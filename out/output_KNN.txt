no change     /home/modelrep/sadiya/miniconda/condabin/conda
no change     /home/modelrep/sadiya/miniconda/bin/conda
no change     /home/modelrep/sadiya/miniconda/bin/conda-env
no change     /home/modelrep/sadiya/miniconda/bin/activate
no change     /home/modelrep/sadiya/miniconda/bin/deactivate
no change     /home/modelrep/sadiya/miniconda/etc/profile.d/conda.sh
no change     /home/modelrep/sadiya/miniconda/etc/fish/conf.d/conda.fish
no change     /home/modelrep/sadiya/miniconda/shell/condabin/Conda.psm1
no change     /home/modelrep/sadiya/miniconda/shell/condabin/conda-hook.ps1
no change     /home/modelrep/sadiya/miniconda/lib/python3.10/site-packages/xontrib/conda.xsh
no change     /home/modelrep/sadiya/miniconda/etc/profile.d/conda.csh
no change     /home/modelrep/sadiya/.bashrc
No action taken.
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=26, n_neighbors=23, p=1;, score=-1.906 total time=   0.3s
[CV 2/3] END leaf_size=26, n_neighbors=23, p=1;, score=-2.095 total time=   0.1s
[CV 3/3] END leaf_size=26, n_neighbors=23, p=1;, score=-2.049 total time=   0.1s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=24, n_neighbors=8, p=1;, score=-1.924 total time=   0.1s
[CV 2/3] END .leaf_size=24, n_neighbors=8, p=1;, score=-2.032 total time=   0.1s
[CV 3/3] END .leaf_size=24, n_neighbors=8, p=1;, score=-2.070 total time=   0.1s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=80, n_neighbors=10, p=1;, score=-1.900 total time=   0.1s
[CV 2/3] END leaf_size=80, n_neighbors=10, p=1;, score=-2.039 total time=   0.1s
[CV 3/3] END leaf_size=80, n_neighbors=10, p=1;, score=-2.079 total time=   0.1s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=30, n_neighbors=26, p=2;, score=-2.026 total time=   0.0s
[CV 2/3] END leaf_size=30, n_neighbors=26, p=2;, score=-2.254 total time=   0.1s
[CV 3/3] END leaf_size=30, n_neighbors=26, p=2;, score=-2.183 total time=   0.1s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=18, n_neighbors=43, p=1;, score=-1.946 total time=   0.1s
[CV 2/3] END leaf_size=18, n_neighbors=43, p=1;, score=-2.169 total time=   0.1s
[CV 3/3] END leaf_size=18, n_neighbors=43, p=1;, score=-2.077 total time=   0.1s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=19, n_neighbors=6, p=1;, score=-1.947 total time=   0.1s
[CV 2/3] END .leaf_size=19, n_neighbors=6, p=1;, score=-2.033 total time=   0.1s
[CV 3/3] END .leaf_size=19, n_neighbors=6, p=1;, score=-2.106 total time=   0.1s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=80, n_neighbors=22, p=2;, score=-2.000 total time=   0.1s
[CV 2/3] END leaf_size=80, n_neighbors=22, p=2;, score=-2.236 total time=   0.0s
[CV 3/3] END leaf_size=80, n_neighbors=22, p=2;, score=-2.190 total time=   0.1s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=96, n_neighbors=11, p=1;, score=-1.896 total time=   0.1s
[CV 2/3] END leaf_size=96, n_neighbors=11, p=1;, score=-2.052 total time=   0.2s
[CV 3/3] END leaf_size=96, n_neighbors=11, p=1;, score=-2.071 total time=   0.2s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=78, n_neighbors=30, p=2;, score=-2.026 total time=   0.1s
[CV 2/3] END leaf_size=78, n_neighbors=30, p=2;, score=-2.256 total time=   0.1s
[CV 3/3] END leaf_size=78, n_neighbors=30, p=2;, score=-2.181 total time=   0.1s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=46, n_neighbors=38, p=2;, score=-2.028 total time=   0.2s
[CV 2/3] END leaf_size=46, n_neighbors=38, p=2;, score=-2.288 total time=   0.1s
[CV 3/3] END leaf_size=46, n_neighbors=38, p=2;, score=-2.194 total time=   0.1s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=100, n_neighbors=16, p=1;, score=-1.906 total time=   0.2s
[CV 2/3] END leaf_size=100, n_neighbors=16, p=1;, score=-2.086 total time=   0.2s
[CV 3/3] END leaf_size=100, n_neighbors=16, p=1;, score=-2.027 total time=   0.2s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=4, n_neighbors=16, p=1;, score=-1.906 total time=   0.2s
[CV 2/3] END .leaf_size=4, n_neighbors=16, p=1;, score=-2.086 total time=   0.2s
[CV 3/3] END .leaf_size=4, n_neighbors=16, p=1;, score=-2.027 total time=   0.2s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=95, n_neighbors=3, p=2;, score=-2.230 total time=   0.2s
[CV 2/3] END .leaf_size=95, n_neighbors=3, p=2;, score=-2.394 total time=   0.1s
[CV 3/3] END .leaf_size=95, n_neighbors=3, p=2;, score=-2.308 total time=   0.1s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=100, n_neighbors=32, p=1;, score=-1.922 total time=   0.2s
[CV 2/3] END leaf_size=100, n_neighbors=32, p=1;, score=-2.127 total time=   0.2s
[CV 3/3] END leaf_size=100, n_neighbors=32, p=1;, score=-2.070 total time=   0.2s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=99, n_neighbors=50, p=1;, score=-1.952 total time=   0.2s
[CV 2/3] END leaf_size=99, n_neighbors=50, p=1;, score=-2.174 total time=   0.2s
[CV 3/3] END leaf_size=99, n_neighbors=50, p=1;, score=-2.097 total time=   0.2s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=4, n_neighbors=13, p=1;, score=-1.896 total time=   0.2s
[CV 2/3] END .leaf_size=4, n_neighbors=13, p=1;, score=-2.065 total time=   0.2s
[CV 3/3] END .leaf_size=4, n_neighbors=13, p=1;, score=-2.036 total time=   0.2s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=97, n_neighbors=50, p=2;, score=-2.053 total time=   0.2s
[CV 2/3] END leaf_size=97, n_neighbors=50, p=2;, score=-2.294 total time=   0.1s
[CV 3/3] END leaf_size=97, n_neighbors=50, p=2;, score=-2.205 total time=   0.1s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=100, n_neighbors=3, p=1;, score=-2.009 total time=   0.2s
[CV 2/3] END leaf_size=100, n_neighbors=3, p=1;, score=-2.136 total time=   0.2s
[CV 3/3] END leaf_size=100, n_neighbors=3, p=1;, score=-2.241 total time=   0.2s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=51, n_neighbors=13, p=1;, score=-1.896 total time=   0.2s
[CV 2/3] END leaf_size=51, n_neighbors=13, p=1;, score=-2.065 total time=   0.2s
[CV 3/3] END leaf_size=51, n_neighbors=13, p=1;, score=-2.036 total time=   0.2s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=98, n_neighbors=27, p=1;, score=-1.910 total time=   0.2s
[CV 2/3] END leaf_size=98, n_neighbors=27, p=1;, score=-2.118 total time=   0.2s
[CV 3/3] END leaf_size=98, n_neighbors=27, p=1;, score=-2.064 total time=   0.2s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=3, n_neighbors=50, p=1;, score=-1.952 total time=   0.2s
[CV 2/3] END .leaf_size=3, n_neighbors=50, p=1;, score=-2.174 total time=   0.2s
[CV 3/3] END .leaf_size=3, n_neighbors=50, p=1;, score=-2.097 total time=   0.2s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=4, n_neighbors=37, p=1;, score=-1.937 total time=   0.2s
[CV 2/3] END .leaf_size=4, n_neighbors=37, p=1;, score=-2.152 total time=   0.2s
[CV 3/3] END .leaf_size=4, n_neighbors=37, p=1;, score=-2.075 total time=   0.2s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=99, n_neighbors=20, p=1;, score=-1.900 total time=   0.2s
[CV 2/3] END leaf_size=99, n_neighbors=20, p=1;, score=-2.093 total time=   0.2s
[CV 3/3] END leaf_size=99, n_neighbors=20, p=1;, score=-2.035 total time=   0.2s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=99, n_neighbors=14, p=1;, score=-1.905 total time=   0.2s
[CV 2/3] END leaf_size=99, n_neighbors=14, p=1;, score=-2.078 total time=   0.2s
[CV 3/3] END leaf_size=99, n_neighbors=14, p=1;, score=-2.047 total time=   0.2s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=3, n_neighbors=11, p=1;, score=-1.896 total time=   0.2s
[CV 2/3] END .leaf_size=3, n_neighbors=11, p=1;, score=-2.052 total time=   0.2s
[CV 3/3] END .leaf_size=3, n_neighbors=11, p=1;, score=-2.071 total time=   0.2s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=3, n_neighbors=10, p=1;, score=-1.900 total time=   0.2s
[CV 2/3] END .leaf_size=3, n_neighbors=10, p=1;, score=-2.039 total time=   0.2s
[CV 3/3] END .leaf_size=3, n_neighbors=10, p=1;, score=-2.079 total time=   0.2s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=3, n_neighbors=13, p=2;, score=-1.998 total time=   0.2s
[CV 2/3] END .leaf_size=3, n_neighbors=13, p=2;, score=-2.199 total time=   0.1s
[CV 3/3] END .leaf_size=3, n_neighbors=13, p=2;, score=-2.190 total time=   0.1s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=3, n_neighbors=13, p=1;, score=-1.896 total time=   0.2s
[CV 2/3] END .leaf_size=3, n_neighbors=13, p=1;, score=-2.065 total time=   0.2s
[CV 3/3] END .leaf_size=3, n_neighbors=13, p=1;, score=-2.036 total time=   0.2s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=3, n_neighbors=13, p=1;, score=-1.896 total time=   0.2s
[CV 2/3] END .leaf_size=3, n_neighbors=13, p=1;, score=-2.065 total time=   0.2s
[CV 3/3] END .leaf_size=3, n_neighbors=13, p=1;, score=-2.036 total time=   0.2s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=4, n_neighbors=18, p=1;, score=-1.904 total time=   0.2s
[CV 2/3] END .leaf_size=4, n_neighbors=18, p=1;, score=-2.086 total time=   0.2s
[CV 3/3] END .leaf_size=4, n_neighbors=18, p=1;, score=-2.039 total time=   0.2s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=100, n_neighbors=47, p=1;, score=-1.937 total time=   0.2s
[CV 2/3] END leaf_size=100, n_neighbors=47, p=1;, score=-2.168 total time=   0.2s
[CV 3/3] END leaf_size=100, n_neighbors=47, p=1;, score=-2.089 total time=   0.2s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=3, n_neighbors=12, p=1;, score=-1.896 total time=   0.2s
[CV 2/3] END .leaf_size=3, n_neighbors=12, p=1;, score=-2.046 total time=   0.2s
[CV 3/3] END .leaf_size=3, n_neighbors=12, p=1;, score=-2.050 total time=   0.2s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=3, n_neighbors=20, p=1;, score=-1.900 total time=   0.2s
[CV 2/3] END .leaf_size=3, n_neighbors=20, p=1;, score=-2.093 total time=   0.2s
[CV 3/3] END .leaf_size=3, n_neighbors=20, p=1;, score=-2.035 total time=   0.2s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=3, n_neighbors=29, p=1;, score=-1.915 total time=   0.2s
[CV 2/3] END .leaf_size=3, n_neighbors=29, p=1;, score=-2.121 total time=   0.2s
[CV 3/3] END .leaf_size=3, n_neighbors=29, p=1;, score=-2.061 total time=   0.2s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=3, n_neighbors=13, p=1;, score=-1.896 total time=   0.2s
[CV 2/3] END .leaf_size=3, n_neighbors=13, p=1;, score=-2.065 total time=   0.2s
[CV 3/3] END .leaf_size=3, n_neighbors=13, p=1;, score=-2.036 total time=   0.2s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=43, n_neighbors=12, p=1;, score=-1.896 total time=   0.2s
[CV 2/3] END leaf_size=43, n_neighbors=12, p=1;, score=-2.046 total time=   0.2s
[CV 3/3] END leaf_size=43, n_neighbors=12, p=1;, score=-2.050 total time=   0.2s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=100, n_neighbors=12, p=1;, score=-1.896 total time=   0.2s
[CV 2/3] END leaf_size=100, n_neighbors=12, p=1;, score=-2.046 total time=   0.2s
[CV 3/3] END leaf_size=100, n_neighbors=12, p=1;, score=-2.050 total time=   0.2s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=98, n_neighbors=12, p=1;, score=-1.896 total time=   0.2s
[CV 2/3] END leaf_size=98, n_neighbors=12, p=1;, score=-2.046 total time=   0.2s
[CV 3/3] END leaf_size=98, n_neighbors=12, p=1;, score=-2.050 total time=   0.2s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=4, n_neighbors=12, p=1;, score=-1.896 total time=   0.2s
[CV 2/3] END .leaf_size=4, n_neighbors=12, p=1;, score=-2.046 total time=   0.2s
[CV 3/3] END .leaf_size=4, n_neighbors=12, p=1;, score=-2.050 total time=   0.2s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=5, n_neighbors=44, p=2;, score=-2.043 total time=   0.1s
[CV 2/3] END .leaf_size=5, n_neighbors=44, p=2;, score=-2.288 total time=   0.1s
[CV 3/3] END .leaf_size=5, n_neighbors=44, p=2;, score=-2.208 total time=   0.1s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=100, n_neighbors=12, p=1;, score=-1.896 total time=   0.2s
[CV 2/3] END leaf_size=100, n_neighbors=12, p=1;, score=-2.046 total time=   0.2s
[CV 3/3] END leaf_size=100, n_neighbors=12, p=1;, score=-2.050 total time=   0.2s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=97, n_neighbors=17, p=1;, score=-1.904 total time=   0.1s
[CV 2/3] END leaf_size=97, n_neighbors=17, p=1;, score=-2.090 total time=   0.2s
[CV 3/3] END leaf_size=97, n_neighbors=17, p=1;, score=-2.035 total time=   0.2s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=4, n_neighbors=12, p=1;, score=-1.896 total time=   0.2s
[CV 2/3] END .leaf_size=4, n_neighbors=12, p=1;, score=-2.046 total time=   0.2s
[CV 3/3] END .leaf_size=4, n_neighbors=12, p=1;, score=-2.050 total time=   0.2s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=100, n_neighbors=12, p=1;, score=-1.896 total time=   0.2s
[CV 2/3] END leaf_size=100, n_neighbors=12, p=1;, score=-2.046 total time=   0.2s
[CV 3/3] END leaf_size=100, n_neighbors=12, p=1;, score=-2.050 total time=   0.2s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=3, n_neighbors=12, p=1;, score=-1.896 total time=   0.2s
[CV 2/3] END .leaf_size=3, n_neighbors=12, p=1;, score=-2.046 total time=   0.2s
[CV 3/3] END .leaf_size=3, n_neighbors=12, p=1;, score=-2.050 total time=   0.2s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=99, n_neighbors=12, p=1;, score=-1.896 total time=   0.2s
[CV 2/3] END leaf_size=99, n_neighbors=12, p=1;, score=-2.046 total time=   0.2s
[CV 3/3] END leaf_size=99, n_neighbors=12, p=1;, score=-2.050 total time=   0.2s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=7, n_neighbors=12, p=1;, score=-1.896 total time=   0.2s
[CV 2/3] END .leaf_size=7, n_neighbors=12, p=1;, score=-2.046 total time=   0.2s
[CV 3/3] END .leaf_size=7, n_neighbors=12, p=1;, score=-2.050 total time=   0.2s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=100, n_neighbors=12, p=1;, score=-1.896 total time=   0.2s
[CV 2/3] END leaf_size=100, n_neighbors=12, p=1;, score=-2.046 total time=   0.2s
[CV 3/3] END leaf_size=100, n_neighbors=12, p=1;, score=-2.050 total time=   0.2s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=5, n_neighbors=12, p=1;, score=-1.896 total time=   0.2s
[CV 2/3] END .leaf_size=5, n_neighbors=12, p=1;, score=-2.046 total time=   0.2s
[CV 3/3] END .leaf_size=5, n_neighbors=12, p=1;, score=-2.050 total time=   0.2s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=100, n_neighbors=12, p=1;, score=-1.896 total time=   0.2s
[CV 2/3] END leaf_size=100, n_neighbors=12, p=1;, score=-2.046 total time=   0.2s
[CV 3/3] END leaf_size=100, n_neighbors=12, p=1;, score=-2.050 total time=   0.2s
{'mean_fit_time': array([0.00355736, 0.00422112, 0.00421651, 0.00490451, 0.00364979,
       0.00353654, 0.00385443, 0.00433366, 0.00459353, 0.00401402,
       0.00395004, 0.00418242, 0.00444873, 0.00426157, 0.00398572,
       0.00397086, 0.00392453, 0.00381955, 0.0042243 , 0.00396832,
       0.00400066, 0.0041097 , 0.00376646, 0.00442251, 0.0043025 ,
       0.00418965, 0.00447567, 0.00444349, 0.00411948, 0.00412806,
       0.00421739, 0.0036699 , 0.00362349, 0.00397277, 0.00405773,
       0.00410954, 0.0039982 , 0.00408951, 0.00383393, 0.00418393,
       0.00391165, 0.00419108, 0.00419609, 0.00392588, 0.00380524,
       0.00384943, 0.0034581 , 0.00328811, 0.00393875, 0.00457939]), 'std_fit_time': array([1.02647647e-03, 3.05531546e-06, 1.92044977e-05, 1.44437749e-03,
       2.05518505e-04, 6.77806125e-06, 2.53673882e-04, 2.42366242e-04,
       7.31600229e-05, 3.78886707e-04, 3.22622558e-04, 7.60128319e-04,
       4.58266820e-04, 5.55990536e-04, 4.05862393e-04, 5.32723041e-04,
       5.20904397e-04, 7.28360612e-04, 4.54490103e-04, 4.94669059e-04,
       4.24370739e-04, 5.79949925e-04, 2.04752411e-04, 4.41100332e-04,
       5.92435613e-04, 3.53058410e-04, 5.80491561e-04, 5.48720531e-04,
       3.67868322e-04, 3.22464416e-04, 6.17907765e-04, 3.01192429e-04,
       2.91151747e-04, 2.92694906e-04, 3.31225241e-04, 7.25586913e-04,
       3.07323573e-04, 6.65201632e-04, 4.62420987e-04, 8.08470367e-04,
       5.48715559e-04, 2.50940837e-04, 5.07495749e-04, 1.68584509e-04,
       1.57098165e-04, 1.63527378e-04, 2.36188659e-04, 2.41295412e-04,
       5.92732446e-04, 7.01324028e-04]), 'mean_score_time': array([0.16456604, 0.10745072, 0.10996707, 0.04765161, 0.1098961 ,
       0.10719148, 0.04245814, 0.14817913, 0.11676892, 0.12913402,
       0.16587679, 0.17026989, 0.12767537, 0.16221833, 0.1779836 ,
       0.1647807 , 0.13743957, 0.16659896, 0.16374381, 0.15929373,
       0.17040451, 0.16085323, 0.15763982, 0.16697319, 0.16707095,
       0.16139428, 0.1282258 , 0.16716838, 0.1561834 , 0.16537515,
       0.16128119, 0.16676172, 0.16706737, 0.16238117, 0.16762654,
       0.16521374, 0.16397858, 0.16481439, 0.16058954, 0.12107428,
       0.15579438, 0.14904372, 0.15694388, 0.16002576, 0.16405074,
       0.15967536, 0.16658513, 0.16647498, 0.16484014, 0.15600459]), 'std_score_time': array([0.07900849, 0.00036078, 0.00314996, 0.01258848, 0.00055009,
       0.00019594, 0.01908941, 0.01039497, 0.00261545, 0.02101728,
       0.0137078 , 0.02116746, 0.02337008, 0.00860412, 0.02929247,
       0.01310217, 0.03108343, 0.01680555, 0.01192185, 0.00420202,
       0.01961646, 0.00598125, 0.00258675, 0.01629783, 0.01717053,
       0.00793601, 0.02101664, 0.01599749, 0.00052001, 0.0130715 ,
       0.005829  , 0.0165403 , 0.01668272, 0.00882302, 0.01624525,
       0.01315347, 0.01319966, 0.01338641, 0.00660662, 0.00767652,
       0.00141158, 0.01136178, 0.00265384, 0.00640244, 0.01180991,
       0.00610679, 0.01196981, 0.00898613, 0.00973064, 0.00095753]), 'param_leaf_size': masked_array(data=[26, 24, 80, 30, 18, 19, 80, 96, 78, 46, 100, 4, 95,
                   100, 99, 4, 97, 100, 51, 98, 3, 4, 99, 99, 3, 3, 3, 3,
                   3, 4, 100, 3, 3, 3, 3, 43, 100, 98, 4, 5, 100, 97, 4,
                   100, 3, 99, 7, 100, 5, 100],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False],
       fill_value='?',
            dtype=object), 'param_n_neighbors': masked_array(data=[23, 8, 10, 26, 43, 6, 22, 11, 30, 38, 16, 16, 3, 32,
                   50, 13, 50, 3, 13, 27, 50, 37, 20, 14, 11, 10, 13, 13,
                   13, 18, 47, 12, 20, 29, 13, 12, 12, 12, 12, 44, 12, 17,
                   12, 12, 12, 12, 12, 12, 12, 12],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False],
       fill_value='?',
            dtype=object), 'param_p': masked_array(data=[1, 1, 1, 2, 1, 1, 2, 1, 2, 2, 1, 1, 2, 1, 1, 1, 2, 1,
                   1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                   1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False],
       fill_value='?',
            dtype=object), 'params': [OrderedDict([('leaf_size', 26), ('n_neighbors', 23), ('p', 1)]), OrderedDict([('leaf_size', 24), ('n_neighbors', 8), ('p', 1)]), OrderedDict([('leaf_size', 80), ('n_neighbors', 10), ('p', 1)]), OrderedDict([('leaf_size', 30), ('n_neighbors', 26), ('p', 2)]), OrderedDict([('leaf_size', 18), ('n_neighbors', 43), ('p', 1)]), OrderedDict([('leaf_size', 19), ('n_neighbors', 6), ('p', 1)]), OrderedDict([('leaf_size', 80), ('n_neighbors', 22), ('p', 2)]), OrderedDict([('leaf_size', 96), ('n_neighbors', 11), ('p', 1)]), OrderedDict([('leaf_size', 78), ('n_neighbors', 30), ('p', 2)]), OrderedDict([('leaf_size', 46), ('n_neighbors', 38), ('p', 2)]), OrderedDict([('leaf_size', 100), ('n_neighbors', 16), ('p', 1)]), OrderedDict([('leaf_size', 4), ('n_neighbors', 16), ('p', 1)]), OrderedDict([('leaf_size', 95), ('n_neighbors', 3), ('p', 2)]), OrderedDict([('leaf_size', 100), ('n_neighbors', 32), ('p', 1)]), OrderedDict([('leaf_size', 99), ('n_neighbors', 50), ('p', 1)]), OrderedDict([('leaf_size', 4), ('n_neighbors', 13), ('p', 1)]), OrderedDict([('leaf_size', 97), ('n_neighbors', 50), ('p', 2)]), OrderedDict([('leaf_size', 100), ('n_neighbors', 3), ('p', 1)]), OrderedDict([('leaf_size', 51), ('n_neighbors', 13), ('p', 1)]), OrderedDict([('leaf_size', 98), ('n_neighbors', 27), ('p', 1)]), OrderedDict([('leaf_size', 3), ('n_neighbors', 50), ('p', 1)]), OrderedDict([('leaf_size', 4), ('n_neighbors', 37), ('p', 1)]), OrderedDict([('leaf_size', 99), ('n_neighbors', 20), ('p', 1)]), OrderedDict([('leaf_size', 99), ('n_neighbors', 14), ('p', 1)]), OrderedDict([('leaf_size', 3), ('n_neighbors', 11), ('p', 1)]), OrderedDict([('leaf_size', 3), ('n_neighbors', 10), ('p', 1)]), OrderedDict([('leaf_size', 3), ('n_neighbors', 13), ('p', 2)]), OrderedDict([('leaf_size', 3), ('n_neighbors', 13), ('p', 1)]), OrderedDict([('leaf_size', 3), ('n_neighbors', 13), ('p', 1)]), OrderedDict([('leaf_size', 4), ('n_neighbors', 18), ('p', 1)]), OrderedDict([('leaf_size', 100), ('n_neighbors', 47), ('p', 1)]), OrderedDict([('leaf_size', 3), ('n_neighbors', 12), ('p', 1)]), OrderedDict([('leaf_size', 3), ('n_neighbors', 20), ('p', 1)]), OrderedDict([('leaf_size', 3), ('n_neighbors', 29), ('p', 1)]), OrderedDict([('leaf_size', 3), ('n_neighbors', 13), ('p', 1)]), OrderedDict([('leaf_size', 43), ('n_neighbors', 12), ('p', 1)]), OrderedDict([('leaf_size', 100), ('n_neighbors', 12), ('p', 1)]), OrderedDict([('leaf_size', 98), ('n_neighbors', 12), ('p', 1)]), OrderedDict([('leaf_size', 4), ('n_neighbors', 12), ('p', 1)]), OrderedDict([('leaf_size', 5), ('n_neighbors', 44), ('p', 2)]), OrderedDict([('leaf_size', 100), ('n_neighbors', 12), ('p', 1)]), OrderedDict([('leaf_size', 97), ('n_neighbors', 17), ('p', 1)]), OrderedDict([('leaf_size', 4), ('n_neighbors', 12), ('p', 1)]), OrderedDict([('leaf_size', 100), ('n_neighbors', 12), ('p', 1)]), OrderedDict([('leaf_size', 3), ('n_neighbors', 12), ('p', 1)]), OrderedDict([('leaf_size', 99), ('n_neighbors', 12), ('p', 1)]), OrderedDict([('leaf_size', 7), ('n_neighbors', 12), ('p', 1)]), OrderedDict([('leaf_size', 100), ('n_neighbors', 12), ('p', 1)]), OrderedDict([('leaf_size', 5), ('n_neighbors', 12), ('p', 1)]), OrderedDict([('leaf_size', 100), ('n_neighbors', 12), ('p', 1)])], 'split0_test_score': array([-1.90624128, -1.92382105, -1.90022124, -2.02567514, -1.94643237,
       -1.94699805, -2.00038709, -1.89636781, -2.02649152, -2.02799723,
       -1.90620414, -1.90620414, -2.22983182, -1.9224558 , -1.95180366,
       -1.89606205, -2.05338063, -2.00852996, -1.89606205, -1.90960808,
       -1.95180366, -1.93664047, -1.9001146 , -1.90492679, -1.89636781,
       -1.90022124, -1.99811988, -1.89606205, -1.89606205, -1.90403267,
       -1.93739108, -1.89562121, -1.9001146 , -1.9149739 , -1.89606205,
       -1.89562121, -1.89562121, -1.89562121, -1.89562121, -2.04272713,
       -1.89562121, -1.90356112, -1.89562121, -1.89562121, -1.89562121,
       -1.89562121, -1.89562121, -1.89562121, -1.89562121, -1.89562121]), 'split1_test_score': array([-2.09545498, -2.03222375, -2.03877876, -2.25384561, -2.16879673,
       -2.0333157 , -2.23603873, -2.05185959, -2.25616981, -2.28770489,
       -2.08555897, -2.08555897, -2.39449833, -2.12651333, -2.17422645,
       -2.06494472, -2.29430046, -2.13636784, -2.06494472, -2.11798244,
       -2.17422645, -2.15238122, -2.09345516, -2.07753341, -2.05185959,
       -2.03877876, -2.19875661, -2.06494472, -2.06494472, -2.086224  ,
       -2.16774314, -2.04631033, -2.09345516, -2.12125813, -2.06494472,
       -2.04631033, -2.04631033, -2.04631033, -2.04631033, -2.28841558,
       -2.04631033, -2.08990974, -2.04631033, -2.04631033, -2.04631033,
       -2.04631033, -2.04631033, -2.04631033, -2.04631033, -2.04631033]), 'split2_test_score': array([-2.0493372 , -2.07021415, -2.0786582 , -2.18299817, -2.07674358,
       -2.10642974, -2.19022461, -2.07123498, -2.1806018 , -2.19363524,
       -2.02744961, -2.02744961, -2.30783624, -2.07014434, -2.09686988,
       -2.03583636, -2.20525403, -2.24066314, -2.03583636, -2.06448031,
       -2.09686988, -2.0752442 , -2.03474914, -2.04684217, -2.07123498,
       -2.0786582 , -2.18950992, -2.03583636, -2.03583636, -2.03867746,
       -2.08858827, -2.04972672, -2.03474914, -2.06075791, -2.03583636,
       -2.04972672, -2.04972672, -2.04972672, -2.04972672, -2.20798494,
       -2.04972672, -2.03522354, -2.04972672, -2.04972672, -2.04972672,
       -2.04972672, -2.04972672, -2.04972672, -2.04972672, -2.04972672]), 'mean_test_score': array([-2.01701115, -2.00875299, -2.00588607, -2.15417297, -2.06399089,
       -2.0289145 , -2.14221681, -2.00648746, -2.15442104, -2.16977912,
       -2.00640424, -2.00640424, -2.31072213, -2.03970449, -2.0743    ,
       -1.99894771, -2.1843117 , -2.12852031, -1.99894771, -2.03069028,
       -2.0743    , -2.0547553 , -2.00943963, -2.00976746, -2.00648746,
       -2.00588607, -2.12879547, -1.99894771, -1.99894771, -2.00964471,
       -2.06457416, -1.99721942, -2.00943963, -2.03232998, -1.99894771,
       -1.99721942, -1.99721942, -1.99721942, -1.99721942, -2.17970921,
       -1.99721942, -2.0095648 , -1.99721942, -1.99721942, -1.99721942,
       -1.99721942, -1.99721942, -1.99721942, -1.99721942, -1.99721942]), 'std_test_score': array([0.08055717, 0.0620263 , 0.07646953, 0.09535411, 0.09122664,
       0.06516208, 0.10201792, 0.07826708, 0.09557581, 0.10735875,
       0.07471823, 0.07471823, 0.06725579, 0.08604188, 0.09219553,
       0.0737153 , 0.09946365, 0.0949303 , 0.0737153 , 0.08836022,
       0.09219553, 0.08925941, 0.08093442, 0.07518494, 0.07826708,
       0.07646953, 0.09247868, 0.0737153 , 0.0737153 , 0.07716042,
       0.09556159, 0.07185432, 0.08093442, 0.08658101, 0.0737153 ,
       0.07185432, 0.07185432, 0.07185432, 0.07185432, 0.10227525,
       0.07185432, 0.0782101 , 0.07185432, 0.07185432, 0.07185432,
       0.07185432, 0.07185432, 0.07185432, 0.07185432, 0.07185432]), 'rank_test_score': array([32, 26, 20, 45, 38, 33, 44, 24, 46, 47, 22, 22, 50, 36, 40, 15, 49,
       42, 15, 34, 40, 37, 27, 31, 24, 20, 43, 15, 15, 30, 39,  1, 27, 35,
       15,  1,  1,  1,  1, 48,  1, 29,  1,  1,  1,  1,  1,  1,  1,  1],
      dtype=int32)}
-1.9972194201541573
OrderedDict([('leaf_size', 3), ('n_neighbors', 12), ('p', 1)])
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=52, n_neighbors=8, p=1;, score=-1.898 total time=   1.7s
[CV 2/3] END .leaf_size=52, n_neighbors=8, p=1;, score=-2.007 total time=   1.5s
[CV 3/3] END .leaf_size=52, n_neighbors=8, p=1;, score=-2.023 total time=   1.6s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=53, n_neighbors=45, p=1;, score=-1.928 total time=   1.7s
[CV 2/3] END leaf_size=53, n_neighbors=45, p=1;, score=-2.130 total time=   1.7s
[CV 3/3] END leaf_size=53, n_neighbors=45, p=1;, score=-2.085 total time=   1.5s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=79, n_neighbors=36, p=2;, score=-2.019 total time=   0.3s
[CV 2/3] END leaf_size=79, n_neighbors=36, p=2;, score=-2.209 total time=   0.4s
[CV 3/3] END leaf_size=79, n_neighbors=36, p=2;, score=-2.156 total time=   0.4s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=83, n_neighbors=45, p=1;, score=-1.928 total time=   1.6s
[CV 2/3] END leaf_size=83, n_neighbors=45, p=1;, score=-2.130 total time=   1.8s
[CV 3/3] END leaf_size=83, n_neighbors=45, p=1;, score=-2.085 total time=   1.5s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=94, n_neighbors=40, p=1;, score=-1.923 total time=   1.8s
[CV 2/3] END leaf_size=94, n_neighbors=40, p=1;, score=-2.123 total time=   1.6s
[CV 3/3] END leaf_size=94, n_neighbors=40, p=1;, score=-2.067 total time=   1.5s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=20, n_neighbors=36, p=2;, score=-2.019 total time=   0.4s
[CV 2/3] END leaf_size=20, n_neighbors=36, p=2;, score=-2.209 total time=   0.4s
[CV 3/3] END leaf_size=20, n_neighbors=36, p=2;, score=-2.156 total time=   0.4s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=80, n_neighbors=31, p=2;, score=-1.999 total time=   0.4s
[CV 2/3] END leaf_size=80, n_neighbors=31, p=2;, score=-2.192 total time=   0.4s
[CV 3/3] END leaf_size=80, n_neighbors=31, p=2;, score=-2.144 total time=   0.3s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=62, n_neighbors=15, p=2;, score=-1.992 total time=   0.4s
[CV 2/3] END leaf_size=62, n_neighbors=15, p=2;, score=-2.147 total time=   0.4s
[CV 3/3] END leaf_size=62, n_neighbors=15, p=2;, score=-2.095 total time=   0.4s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=59, n_neighbors=18, p=1;, score=-1.902 total time=   1.7s
[CV 2/3] END leaf_size=59, n_neighbors=18, p=1;, score=-2.064 total time=   1.6s
[CV 3/3] END leaf_size=59, n_neighbors=18, p=1;, score=-1.991 total time=   1.6s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=26, n_neighbors=49, p=1;, score=-1.941 total time=   1.7s
[CV 2/3] END leaf_size=26, n_neighbors=49, p=1;, score=-2.142 total time=   1.7s
[CV 3/3] END leaf_size=26, n_neighbors=49, p=1;, score=-2.092 total time=   1.7s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END ..leaf_size=3, n_neighbors=3, p=1;, score=-2.036 total time=   1.7s
[CV 2/3] END ..leaf_size=3, n_neighbors=3, p=1;, score=-2.217 total time=   1.7s
[CV 3/3] END ..leaf_size=3, n_neighbors=3, p=1;, score=-2.152 total time=   1.7s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=89, n_neighbors=3, p=1;, score=-2.036 total time=   1.7s
[CV 2/3] END .leaf_size=89, n_neighbors=3, p=1;, score=-2.217 total time=   1.6s
[CV 3/3] END .leaf_size=89, n_neighbors=3, p=1;, score=-2.152 total time=   1.7s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=52, n_neighbors=8, p=1;, score=-1.898 total time=   1.7s
[CV 2/3] END .leaf_size=52, n_neighbors=8, p=1;, score=-2.007 total time=   1.5s
[CV 3/3] END .leaf_size=52, n_neighbors=8, p=1;, score=-2.023 total time=   1.5s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=48, n_neighbors=8, p=1;, score=-1.898 total time=   1.5s
[CV 2/3] END .leaf_size=48, n_neighbors=8, p=1;, score=-2.007 total time=   1.5s
[CV 3/3] END .leaf_size=48, n_neighbors=8, p=1;, score=-2.023 total time=   1.7s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=48, n_neighbors=18, p=1;, score=-1.902 total time=   1.5s
[CV 2/3] END leaf_size=48, n_neighbors=18, p=1;, score=-2.064 total time=   1.6s
[CV 3/3] END leaf_size=48, n_neighbors=18, p=1;, score=-1.991 total time=   1.6s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=51, n_neighbors=8, p=1;, score=-1.898 total time=   1.7s
[CV 2/3] END .leaf_size=51, n_neighbors=8, p=1;, score=-2.007 total time=   1.6s
[CV 3/3] END .leaf_size=51, n_neighbors=8, p=1;, score=-2.023 total time=   1.7s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=100, n_neighbors=3, p=2;, score=-2.142 total time=   0.4s
[CV 2/3] END leaf_size=100, n_neighbors=3, p=2;, score=-2.362 total time=   0.4s
[CV 3/3] END leaf_size=100, n_neighbors=3, p=2;, score=-2.153 total time=   0.4s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=48, n_neighbors=3, p=1;, score=-2.036 total time=   1.6s
[CV 2/3] END .leaf_size=48, n_neighbors=3, p=1;, score=-2.217 total time=   1.7s
[CV 3/3] END .leaf_size=48, n_neighbors=3, p=1;, score=-2.152 total time=   1.7s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=50, n_neighbors=8, p=1;, score=-1.898 total time=   1.6s
[CV 2/3] END .leaf_size=50, n_neighbors=8, p=1;, score=-2.007 total time=   1.7s
[CV 3/3] END .leaf_size=50, n_neighbors=8, p=1;, score=-2.023 total time=   1.7s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=51, n_neighbors=8, p=2;, score=-2.029 total time=   0.4s
[CV 2/3] END .leaf_size=51, n_neighbors=8, p=2;, score=-2.228 total time=   0.4s
[CV 3/3] END .leaf_size=51, n_neighbors=8, p=2;, score=-2.160 total time=   0.4s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=50, n_neighbors=8, p=1;, score=-1.898 total time=   1.6s
[CV 2/3] END .leaf_size=50, n_neighbors=8, p=1;, score=-2.007 total time=   1.7s
[CV 3/3] END .leaf_size=50, n_neighbors=8, p=1;, score=-2.023 total time=   1.7s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=52, n_neighbors=9, p=1;, score=-1.924 total time=   1.5s
[CV 2/3] END .leaf_size=52, n_neighbors=9, p=1;, score=-2.024 total time=   1.6s
[CV 3/3] END .leaf_size=52, n_neighbors=9, p=1;, score=-2.019 total time=   1.7s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=53, n_neighbors=20, p=1;, score=-1.910 total time=   1.5s
[CV 2/3] END leaf_size=53, n_neighbors=20, p=1;, score=-2.068 total time=   1.7s
[CV 3/3] END leaf_size=53, n_neighbors=20, p=1;, score=-1.996 total time=   1.8s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=3, n_neighbors=15, p=1;, score=-1.897 total time=   1.6s
[CV 2/3] END .leaf_size=3, n_neighbors=15, p=1;, score=-2.053 total time=   1.7s
[CV 3/3] END .leaf_size=3, n_neighbors=15, p=1;, score=-1.987 total time=   1.6s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=4, n_neighbors=26, p=1;, score=-1.895 total time=   1.5s
[CV 2/3] END .leaf_size=4, n_neighbors=26, p=1;, score=-2.099 total time=   1.5s
[CV 3/3] END .leaf_size=4, n_neighbors=26, p=1;, score=-2.014 total time=   1.5s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=3, n_neighbors=32, p=1;, score=-1.900 total time=   1.5s
[CV 2/3] END .leaf_size=3, n_neighbors=32, p=1;, score=-2.109 total time=   1.5s
[CV 3/3] END .leaf_size=3, n_neighbors=32, p=1;, score=-2.031 total time=   1.6s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=99, n_neighbors=23, p=1;, score=-1.895 total time=   1.6s
[CV 2/3] END leaf_size=99, n_neighbors=23, p=1;, score=-2.076 total time=   1.5s
[CV 3/3] END leaf_size=99, n_neighbors=23, p=1;, score=-2.012 total time=   1.5s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=99, n_neighbors=50, p=2;, score=-2.024 total time=   0.4s
[CV 2/3] END leaf_size=99, n_neighbors=50, p=2;, score=-2.260 total time=   0.5s
[CV 3/3] END leaf_size=99, n_neighbors=50, p=2;, score=-2.194 total time=   0.4s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=4, n_neighbors=22, p=2;, score=-1.989 total time=   0.4s
[CV 2/3] END .leaf_size=4, n_neighbors=22, p=2;, score=-2.162 total time=   0.4s
[CV 3/3] END .leaf_size=4, n_neighbors=22, p=2;, score=-2.105 total time=   0.4s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=4, n_neighbors=36, p=1;, score=-1.907 total time=   1.7s
[CV 2/3] END .leaf_size=4, n_neighbors=36, p=1;, score=-2.106 total time=   1.5s
[CV 3/3] END .leaf_size=4, n_neighbors=36, p=1;, score=-2.045 total time=   1.5s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=100, n_neighbors=13, p=1;, score=-1.915 total time=   1.5s
[CV 2/3] END leaf_size=100, n_neighbors=13, p=1;, score=-2.057 total time=   1.5s
[CV 3/3] END leaf_size=100, n_neighbors=13, p=1;, score=-2.004 total time=   1.7s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END ..leaf_size=3, n_neighbors=7, p=1;, score=-1.885 total time=   1.7s
[CV 2/3] END ..leaf_size=3, n_neighbors=7, p=1;, score=-2.041 total time=   1.7s
[CV 3/3] END ..leaf_size=3, n_neighbors=7, p=1;, score=-2.049 total time=   1.7s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=100, n_neighbors=29, p=1;, score=-1.903 total time=   1.7s
[CV 2/3] END leaf_size=100, n_neighbors=29, p=1;, score=-2.099 total time=   1.7s
[CV 3/3] END leaf_size=100, n_neighbors=29, p=1;, score=-2.030 total time=   1.7s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=4, n_neighbors=43, p=2;, score=-2.021 total time=   0.4s
[CV 2/3] END .leaf_size=4, n_neighbors=43, p=2;, score=-2.243 total time=   0.4s
[CV 3/3] END .leaf_size=4, n_neighbors=43, p=2;, score=-2.182 total time=   0.4s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=100, n_neighbors=16, p=1;, score=-1.910 total time=   1.7s
[CV 2/3] END leaf_size=100, n_neighbors=16, p=1;, score=-2.058 total time=   1.7s
[CV 3/3] END leaf_size=100, n_neighbors=16, p=1;, score=-1.994 total time=   1.7s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=99, n_neighbors=26, p=2;, score=-1.994 total time=   0.4s
[CV 2/3] END leaf_size=99, n_neighbors=26, p=2;, score=-2.162 total time=   0.4s
[CV 3/3] END leaf_size=99, n_neighbors=26, p=2;, score=-2.134 total time=   0.4s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=99, n_neighbors=18, p=2;, score=-2.017 total time=   0.4s
[CV 2/3] END leaf_size=99, n_neighbors=18, p=2;, score=-2.150 total time=   0.4s
[CV 3/3] END leaf_size=99, n_neighbors=18, p=2;, score=-2.089 total time=   0.4s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=100, n_neighbors=14, p=1;, score=-1.900 total time=   1.7s
[CV 2/3] END leaf_size=100, n_neighbors=14, p=1;, score=-2.057 total time=   1.7s
[CV 3/3] END leaf_size=100, n_neighbors=14, p=1;, score=-1.992 total time=   1.5s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=100, n_neighbors=8, p=1;, score=-1.898 total time=   1.5s
[CV 2/3] END leaf_size=100, n_neighbors=8, p=1;, score=-2.007 total time=   1.5s
[CV 3/3] END leaf_size=100, n_neighbors=8, p=1;, score=-2.023 total time=   1.7s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END ..leaf_size=3, n_neighbors=8, p=1;, score=-1.898 total time=   1.7s
[CV 2/3] END ..leaf_size=3, n_neighbors=8, p=1;, score=-2.007 total time=   1.7s
[CV 3/3] END ..leaf_size=3, n_neighbors=8, p=1;, score=-2.023 total time=   1.7s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=99, n_neighbors=34, p=1;, score=-1.901 total time=   1.7s
[CV 2/3] END leaf_size=99, n_neighbors=34, p=1;, score=-2.110 total time=   1.7s
[CV 3/3] END leaf_size=99, n_neighbors=34, p=1;, score=-2.036 total time=   1.7s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=4, n_neighbors=12, p=2;, score=-1.999 total time=   0.3s
[CV 2/3] END .leaf_size=4, n_neighbors=12, p=2;, score=-2.176 total time=   0.4s
[CV 3/3] END .leaf_size=4, n_neighbors=12, p=2;, score=-2.132 total time=   0.4s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=99, n_neighbors=8, p=1;, score=-1.898 total time=   1.6s
[CV 2/3] END .leaf_size=99, n_neighbors=8, p=1;, score=-2.007 total time=   1.7s
[CV 3/3] END .leaf_size=99, n_neighbors=8, p=1;, score=-2.023 total time=   1.5s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END ..leaf_size=4, n_neighbors=8, p=1;, score=-1.898 total time=   1.5s
[CV 2/3] END ..leaf_size=4, n_neighbors=8, p=1;, score=-2.007 total time=   1.5s
[CV 3/3] END ..leaf_size=4, n_neighbors=8, p=1;, score=-2.023 total time=   1.7s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=100, n_neighbors=8, p=1;, score=-1.898 total time=   1.7s
[CV 2/3] END leaf_size=100, n_neighbors=8, p=1;, score=-2.007 total time=   1.6s
[CV 3/3] END leaf_size=100, n_neighbors=8, p=1;, score=-2.023 total time=   1.5s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END ..leaf_size=3, n_neighbors=8, p=1;, score=-1.898 total time=   1.5s
[CV 2/3] END ..leaf_size=3, n_neighbors=8, p=1;, score=-2.007 total time=   1.6s
[CV 3/3] END ..leaf_size=3, n_neighbors=8, p=1;, score=-2.023 total time=   1.7s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=3, n_neighbors=42, p=1;, score=-1.921 total time=   1.7s
[CV 2/3] END .leaf_size=3, n_neighbors=42, p=1;, score=-2.126 total time=   1.7s
[CV 3/3] END .leaf_size=3, n_neighbors=42, p=1;, score=-2.069 total time=   1.7s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=100, n_neighbors=8, p=1;, score=-1.898 total time=   1.7s
[CV 2/3] END leaf_size=100, n_neighbors=8, p=1;, score=-2.007 total time=   1.7s
[CV 3/3] END leaf_size=100, n_neighbors=8, p=1;, score=-2.023 total time=   1.5s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=4, n_neighbors=24, p=1;, score=-1.897 total time=   1.7s
[CV 2/3] END .leaf_size=4, n_neighbors=24, p=1;, score=-2.089 total time=   1.7s
[CV 3/3] END .leaf_size=4, n_neighbors=24, p=1;, score=-2.015 total time=   1.5s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END ..leaf_size=3, n_neighbors=8, p=1;, score=-1.898 total time=   1.7s
[CV 2/3] END ..leaf_size=3, n_neighbors=8, p=1;, score=-2.007 total time=   1.5s
[CV 3/3] END ..leaf_size=3, n_neighbors=8, p=1;, score=-2.023 total time=   1.5s
{'mean_fit_time': array([0.03072882, 0.0368611 , 0.04532337, 0.03776606, 0.0359149 ,
       0.0474596 , 0.04851111, 0.04646635, 0.03986017, 0.03215559,
       0.0326825 , 0.03173097, 0.03560829, 0.03217117, 0.04140457,
       0.03435636, 0.04629954, 0.04235975, 0.04900614, 0.03805375,
       0.04591656, 0.03446929, 0.03874652, 0.0366323 , 0.03206261,
       0.03194149, 0.04593857, 0.04501748, 0.05293608, 0.04085255,
       0.03355241, 0.03913935, 0.03861682, 0.05013053, 0.0453705 ,
       0.04999121, 0.05129155, 0.04140107, 0.03379655, 0.0342377 ,
       0.03599413, 0.04688072, 0.04004065, 0.03163846, 0.03193069,
       0.03292767, 0.032528  , 0.03615554, 0.03217737, 0.03456322]), 'std_fit_time': array([0.00303924, 0.00212178, 0.01040475, 0.01120467, 0.00229945,
       0.0033287 , 0.00449712, 0.00839964, 0.00809607, 0.00194287,
       0.0012044 , 0.00138332, 0.00260486, 0.00106513, 0.01250477,
       0.00252309, 0.00989859, 0.00606873, 0.0141682 , 0.00984784,
       0.00758936, 0.00337746, 0.00246901, 0.00546039, 0.00037467,
       0.00049537, 0.00924579, 0.01246817, 0.00139466, 0.00741921,
       0.00091475, 0.0005598 , 0.00084238, 0.01221774, 0.00652209,
       0.01265954, 0.00617963, 0.01025962, 0.00393436, 0.00264017,
       0.00122067, 0.00852808, 0.00809714, 0.00160103, 0.00249286,
       0.00304293, 0.00190085, 0.00576611, 0.0010916 , 0.00319568]), 'mean_score_time': array([1.56452942, 1.6022234 , 0.2939837 , 1.57529426, 1.61145329,
       0.37076306, 0.33914876, 0.3527956 , 1.59536997, 1.67644795,
       1.65835492, 1.6263024 , 1.5203472 , 1.53766489, 1.53166119,
       1.63217648, 0.34208751, 1.64233573, 1.64275551, 0.33953055,
       1.62694661, 1.55917263, 1.62914634, 1.63042959, 1.48050197,
       1.4922119 , 1.47660851, 0.38652746, 0.36420584, 1.53267272,
       1.55321407, 1.69034735, 1.69595575, 0.3522892 , 1.66791312,
       0.3406117 , 0.34745749, 1.59219925, 1.54115081, 1.66426412,
       1.66762241, 0.31428242, 1.55276378, 1.53553724, 1.57989486,
       1.56343794, 1.65597423, 1.61905877, 1.6332384 , 1.55526725]), 'std_score_time': array([0.09961685, 0.09970708, 0.0149364 , 0.12183775, 0.11746967,
       0.01286635, 0.02792249, 0.01994802, 0.06693248, 0.03022742,
       0.0251973 , 0.06839765, 0.07841883, 0.09574941, 0.03269957,
       0.04757611, 0.00480348, 0.06735021, 0.04677161, 0.01224232,
       0.03656626, 0.06336325, 0.10490092, 0.04820962, 0.02016114,
       0.03393285, 0.01529234, 0.02378081, 0.01228974, 0.06748191,
       0.09885242, 0.00507387, 0.00634636, 0.00961746, 0.00614568,
       0.0136096 , 0.02172324, 0.09871012, 0.10544168, 0.00808838,
       0.0046929 , 0.00606097, 0.0842081 , 0.0631403 , 0.09337834,
       0.07742384, 0.01992365, 0.10545025, 0.10084132, 0.09785876]), 'param_leaf_size': masked_array(data=[52, 53, 79, 83, 94, 20, 80, 62, 59, 26, 3, 89, 52, 48,
                   48, 51, 100, 48, 50, 51, 50, 52, 53, 3, 4, 3, 99, 99,
                   4, 4, 100, 3, 100, 4, 100, 99, 99, 100, 100, 3, 99, 4,
                   99, 4, 100, 3, 3, 100, 4, 3],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False],
       fill_value='?',
            dtype=object), 'param_n_neighbors': masked_array(data=[8, 45, 36, 45, 40, 36, 31, 15, 18, 49, 3, 3, 8, 8, 18,
                   8, 3, 3, 8, 8, 8, 9, 20, 15, 26, 32, 23, 50, 22, 36,
                   13, 7, 29, 43, 16, 26, 18, 14, 8, 8, 34, 12, 8, 8, 8,
                   8, 42, 8, 24, 8],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False],
       fill_value='?',
            dtype=object), 'param_p': masked_array(data=[1, 1, 2, 1, 1, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1,
                   1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 2, 1, 2,
                   2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False],
       fill_value='?',
            dtype=object), 'params': [OrderedDict([('leaf_size', 52), ('n_neighbors', 8), ('p', 1)]), OrderedDict([('leaf_size', 53), ('n_neighbors', 45), ('p', 1)]), OrderedDict([('leaf_size', 79), ('n_neighbors', 36), ('p', 2)]), OrderedDict([('leaf_size', 83), ('n_neighbors', 45), ('p', 1)]), OrderedDict([('leaf_size', 94), ('n_neighbors', 40), ('p', 1)]), OrderedDict([('leaf_size', 20), ('n_neighbors', 36), ('p', 2)]), OrderedDict([('leaf_size', 80), ('n_neighbors', 31), ('p', 2)]), OrderedDict([('leaf_size', 62), ('n_neighbors', 15), ('p', 2)]), OrderedDict([('leaf_size', 59), ('n_neighbors', 18), ('p', 1)]), OrderedDict([('leaf_size', 26), ('n_neighbors', 49), ('p', 1)]), OrderedDict([('leaf_size', 3), ('n_neighbors', 3), ('p', 1)]), OrderedDict([('leaf_size', 89), ('n_neighbors', 3), ('p', 1)]), OrderedDict([('leaf_size', 52), ('n_neighbors', 8), ('p', 1)]), OrderedDict([('leaf_size', 48), ('n_neighbors', 8), ('p', 1)]), OrderedDict([('leaf_size', 48), ('n_neighbors', 18), ('p', 1)]), OrderedDict([('leaf_size', 51), ('n_neighbors', 8), ('p', 1)]), OrderedDict([('leaf_size', 100), ('n_neighbors', 3), ('p', 2)]), OrderedDict([('leaf_size', 48), ('n_neighbors', 3), ('p', 1)]), OrderedDict([('leaf_size', 50), ('n_neighbors', 8), ('p', 1)]), OrderedDict([('leaf_size', 51), ('n_neighbors', 8), ('p', 2)]), OrderedDict([('leaf_size', 50), ('n_neighbors', 8), ('p', 1)]), OrderedDict([('leaf_size', 52), ('n_neighbors', 9), ('p', 1)]), OrderedDict([('leaf_size', 53), ('n_neighbors', 20), ('p', 1)]), OrderedDict([('leaf_size', 3), ('n_neighbors', 15), ('p', 1)]), OrderedDict([('leaf_size', 4), ('n_neighbors', 26), ('p', 1)]), OrderedDict([('leaf_size', 3), ('n_neighbors', 32), ('p', 1)]), OrderedDict([('leaf_size', 99), ('n_neighbors', 23), ('p', 1)]), OrderedDict([('leaf_size', 99), ('n_neighbors', 50), ('p', 2)]), OrderedDict([('leaf_size', 4), ('n_neighbors', 22), ('p', 2)]), OrderedDict([('leaf_size', 4), ('n_neighbors', 36), ('p', 1)]), OrderedDict([('leaf_size', 100), ('n_neighbors', 13), ('p', 1)]), OrderedDict([('leaf_size', 3), ('n_neighbors', 7), ('p', 1)]), OrderedDict([('leaf_size', 100), ('n_neighbors', 29), ('p', 1)]), OrderedDict([('leaf_size', 4), ('n_neighbors', 43), ('p', 2)]), OrderedDict([('leaf_size', 100), ('n_neighbors', 16), ('p', 1)]), OrderedDict([('leaf_size', 99), ('n_neighbors', 26), ('p', 2)]), OrderedDict([('leaf_size', 99), ('n_neighbors', 18), ('p', 2)]), OrderedDict([('leaf_size', 100), ('n_neighbors', 14), ('p', 1)]), OrderedDict([('leaf_size', 100), ('n_neighbors', 8), ('p', 1)]), OrderedDict([('leaf_size', 3), ('n_neighbors', 8), ('p', 1)]), OrderedDict([('leaf_size', 99), ('n_neighbors', 34), ('p', 1)]), OrderedDict([('leaf_size', 4), ('n_neighbors', 12), ('p', 2)]), OrderedDict([('leaf_size', 99), ('n_neighbors', 8), ('p', 1)]), OrderedDict([('leaf_size', 4), ('n_neighbors', 8), ('p', 1)]), OrderedDict([('leaf_size', 100), ('n_neighbors', 8), ('p', 1)]), OrderedDict([('leaf_size', 3), ('n_neighbors', 8), ('p', 1)]), OrderedDict([('leaf_size', 3), ('n_neighbors', 42), ('p', 1)]), OrderedDict([('leaf_size', 100), ('n_neighbors', 8), ('p', 1)]), OrderedDict([('leaf_size', 4), ('n_neighbors', 24), ('p', 1)]), OrderedDict([('leaf_size', 3), ('n_neighbors', 8), ('p', 1)])], 'split0_test_score': array([-1.89783511, -1.9281828 , -2.01890416, -1.9281828 , -1.92283926,
       -2.01890416, -1.99935022, -1.99198992, -1.90175549, -1.94131985,
       -2.03600796, -2.03600796, -1.89783511, -1.89783511, -1.90175549,
       -1.89783511, -2.14154976, -2.03600796, -1.89783511, -2.02853031,
       -1.89783511, -1.92374096, -1.90955285, -1.89671851, -1.89531233,
       -1.89984863, -1.89504449, -2.02390291, -1.9887498 , -1.90745726,
       -1.91462685, -1.88472291, -1.90285711, -2.02112324, -1.91014905,
       -1.99358756, -2.01666561, -1.89951407, -1.89783511, -1.89783511,
       -1.90138411, -1.99891564, -1.89783511, -1.89783511, -1.89783511,
       -1.89783511, -1.92051183, -1.89783511, -1.89719831, -1.89783511]), 'split1_test_score': array([-2.00697107, -2.12978901, -2.20920479, -2.12978901, -2.12344692,
       -2.20920479, -2.19221553, -2.14652242, -2.06384028, -2.1424057 ,
       -2.21683771, -2.21683771, -2.00697107, -2.00697107, -2.06384028,
       -2.00697107, -2.36208969, -2.21683771, -2.00697107, -2.22762496,
       -2.00697107, -2.02384761, -2.06835402, -2.05325145, -2.09891703,
       -2.10899371, -2.07598394, -2.25953984, -2.16231336, -2.1059653 ,
       -2.0570829 , -2.04123247, -2.09902231, -2.24283431, -2.05811649,
       -2.16199361, -2.15001693, -2.05749274, -2.00697107, -2.00697107,
       -2.10963001, -2.17627621, -2.00697107, -2.00697107, -2.00697107,
       -2.00697107, -2.12623772, -2.00697107, -2.08945912, -2.00697107]), 'split2_test_score': array([-2.02279486, -2.08540348, -2.15612861, -2.08540348, -2.06733553,
       -2.15612861, -2.14424797, -2.09494027, -1.99056987, -2.09176309,
       -2.15242833, -2.15242833, -2.02279486, -2.02279486, -1.99056987,
       -2.02279486, -2.15339786, -2.15242833, -2.02279486, -2.15973807,
       -2.02279486, -2.0188496 , -1.99626565, -1.98666725, -2.01351686,
       -2.03130988, -2.01209822, -2.19420644, -2.10510707, -2.04527816,
       -2.00375881, -2.04862459, -2.02984316, -2.18209866, -1.99366173,
       -2.13433065, -2.08942566, -1.99232221, -2.02279486, -2.02279486,
       -2.03633034, -2.13171843, -2.02279486, -2.02279486, -2.02279486,
       -2.02279486, -2.06916037, -2.02279486, -2.01518674, -2.02279486]), 'mean_test_score': array([-1.97586701, -2.04779176, -2.12807919, -2.04779176, -2.0378739 ,
       -2.12807919, -2.11193791, -2.07781754, -1.98538855, -2.05849621,
       -2.13509134, -2.13509134, -1.97586701, -1.97586701, -1.98538855,
       -1.97586701, -2.21901244, -2.13509134, -1.97586701, -2.13863111,
       -1.97586701, -1.98881272, -1.99139084, -1.97887907, -2.00258208,
       -2.01338408, -1.99437555, -2.1592164 , -2.08539008, -2.01956691,
       -1.99182285, -1.99152666, -2.0105742 , -2.1486854 , -1.98730909,
       -2.09663727, -2.0853694 , -1.98310967, -1.97586701, -1.97586701,
       -2.01578148, -2.10230343, -1.97586701, -1.97586701, -1.97586701,
       -1.97586701, -2.03863664, -1.97586701, -2.00061472, -1.97586701]), 'std_test_score': array([0.05555377, 0.08649565, 0.08018171, 0.08649565, 0.08450581,
       0.08018171, 0.0819846 , 0.06423895, 0.06627219, 0.08539669,
       0.07483439, 0.07483439, 0.05555377, 0.05555377, 0.06627219,
       0.05555377, 0.10128645, 0.07483439, 0.05555377, 0.08263896,
       0.05555377, 0.04605791, 0.06492188, 0.06414116, 0.08348012,
       0.08631886, 0.0749237 , 0.09932915, 0.07221564, 0.08305485,
       0.05876667, 0.07558192, 0.08123491, 0.09354601, 0.06057424,
       0.07373711, 0.05451595, 0.06482267, 0.05555377, 0.05555377,
       0.08624879, 0.07533536, 0.05555377, 0.05555377, 0.05555377,
       0.05555377, 0.08671624, 0.05555377, 0.07916359, 0.05555377]), 'rank_test_score': array([ 1, 33, 42, 33, 31, 42, 41, 36, 17, 35, 44, 44,  1,  1, 17,  1, 50,
       44,  1, 47,  1, 20, 21, 15, 26, 28, 24, 49, 38, 30, 23, 22, 27, 48,
       19, 39, 37, 16,  1,  1, 29, 40,  1,  1,  1,  1, 32,  1, 25,  1],
      dtype=int32)}
-1.9758670099908213
OrderedDict([('leaf_size', 52), ('n_neighbors', 8), ('p', 1)])
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=67, n_neighbors=10, p=2;, score=-2.250 total time=   0.2s
[CV 2/3] END leaf_size=67, n_neighbors=10, p=2;, score=-2.457 total time=   0.0s
[CV 3/3] END leaf_size=67, n_neighbors=10, p=2;, score=-2.271 total time=   0.1s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=5, n_neighbors=10, p=1;, score=-2.172 total time=   0.1s
[CV 2/3] END .leaf_size=5, n_neighbors=10, p=1;, score=-2.380 total time=   0.1s
[CV 3/3] END .leaf_size=5, n_neighbors=10, p=1;, score=-2.174 total time=   0.1s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=59, n_neighbors=48, p=1;, score=-2.096 total time=   0.1s
[CV 2/3] END leaf_size=59, n_neighbors=48, p=1;, score=-2.406 total time=   0.1s
[CV 3/3] END leaf_size=59, n_neighbors=48, p=1;, score=-2.196 total time=   0.1s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=55, n_neighbors=32, p=2;, score=-2.174 total time=   0.0s
[CV 2/3] END leaf_size=55, n_neighbors=32, p=2;, score=-2.523 total time=   0.0s
[CV 3/3] END leaf_size=55, n_neighbors=32, p=2;, score=-2.301 total time=   0.0s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=29, n_neighbors=30, p=2;, score=-2.173 total time=   0.0s
[CV 2/3] END leaf_size=29, n_neighbors=30, p=2;, score=-2.520 total time=   0.0s
[CV 3/3] END leaf_size=29, n_neighbors=30, p=2;, score=-2.293 total time=   0.0s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=12, n_neighbors=13, p=1;, score=-2.136 total time=   0.1s
[CV 2/3] END leaf_size=12, n_neighbors=13, p=1;, score=-2.369 total time=   0.1s
[CV 3/3] END leaf_size=12, n_neighbors=13, p=1;, score=-2.171 total time=   0.1s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=33, n_neighbors=41, p=2;, score=-2.210 total time=   0.0s
[CV 2/3] END leaf_size=33, n_neighbors=41, p=2;, score=-2.513 total time=   0.1s
[CV 3/3] END leaf_size=33, n_neighbors=41, p=2;, score=-2.313 total time=   0.0s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=10, n_neighbors=48, p=2;, score=-2.217 total time=   0.0s
[CV 2/3] END leaf_size=10, n_neighbors=48, p=2;, score=-2.504 total time=   0.0s
[CV 3/3] END leaf_size=10, n_neighbors=48, p=2;, score=-2.331 total time=   0.1s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=95, n_neighbors=19, p=2;, score=-2.212 total time=   0.1s
[CV 2/3] END leaf_size=95, n_neighbors=19, p=2;, score=-2.507 total time=   0.0s
[CV 3/3] END leaf_size=95, n_neighbors=19, p=2;, score=-2.279 total time=   0.0s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=97, n_neighbors=33, p=2;, score=-2.171 total time=   0.1s
[CV 2/3] END leaf_size=97, n_neighbors=33, p=2;, score=-2.524 total time=   0.0s
[CV 3/3] END leaf_size=97, n_neighbors=33, p=2;, score=-2.302 total time=   0.0s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=98, n_neighbors=50, p=1;, score=-2.097 total time=   0.2s
[CV 2/3] END leaf_size=98, n_neighbors=50, p=1;, score=-2.408 total time=   0.2s
[CV 3/3] END leaf_size=98, n_neighbors=50, p=1;, score=-2.196 total time=   0.2s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=98, n_neighbors=3, p=1;, score=-2.404 total time=   0.2s
[CV 2/3] END .leaf_size=98, n_neighbors=3, p=1;, score=-2.377 total time=   0.2s
[CV 3/3] END .leaf_size=98, n_neighbors=3, p=1;, score=-2.371 total time=   0.2s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=3, n_neighbors=29, p=1;, score=-2.093 total time=   0.2s
[CV 2/3] END .leaf_size=3, n_neighbors=29, p=1;, score=-2.392 total time=   0.2s
[CV 3/3] END .leaf_size=3, n_neighbors=29, p=1;, score=-2.172 total time=   0.2s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=100, n_neighbors=33, p=1;, score=-2.094 total time=   0.2s
[CV 2/3] END leaf_size=100, n_neighbors=33, p=1;, score=-2.385 total time=   0.2s
[CV 3/3] END leaf_size=100, n_neighbors=33, p=1;, score=-2.175 total time=   0.2s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=3, n_neighbors=20, p=1;, score=-2.088 total time=   0.2s
[CV 2/3] END .leaf_size=3, n_neighbors=20, p=1;, score=-2.393 total time=   0.2s
[CV 3/3] END .leaf_size=3, n_neighbors=20, p=1;, score=-2.150 total time=   0.2s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=76, n_neighbors=24, p=1;, score=-2.095 total time=   0.2s
[CV 2/3] END leaf_size=76, n_neighbors=24, p=1;, score=-2.386 total time=   0.2s
[CV 3/3] END leaf_size=76, n_neighbors=24, p=1;, score=-2.161 total time=   0.2s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=3, n_neighbors=50, p=1;, score=-2.097 total time=   0.2s
[CV 2/3] END .leaf_size=3, n_neighbors=50, p=1;, score=-2.408 total time=   0.2s
[CV 3/3] END .leaf_size=3, n_neighbors=50, p=1;, score=-2.196 total time=   0.2s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=3, n_neighbors=40, p=1;, score=-2.098 total time=   0.2s
[CV 2/3] END .leaf_size=3, n_neighbors=40, p=1;, score=-2.398 total time=   0.2s
[CV 3/3] END .leaf_size=3, n_neighbors=40, p=1;, score=-2.188 total time=   0.2s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END ..leaf_size=4, n_neighbors=3, p=2;, score=-2.462 total time=   0.2s
[CV 2/3] END ..leaf_size=4, n_neighbors=3, p=2;, score=-2.601 total time=   0.1s
[CV 3/3] END ..leaf_size=4, n_neighbors=3, p=2;, score=-2.466 total time=   0.1s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=100, n_neighbors=17, p=1;, score=-2.081 total time=   0.2s
[CV 2/3] END leaf_size=100, n_neighbors=17, p=1;, score=-2.380 total time=   0.2s
[CV 3/3] END leaf_size=100, n_neighbors=17, p=1;, score=-2.153 total time=   0.2s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=3, n_neighbors=18, p=1;, score=-2.075 total time=   0.2s
[CV 2/3] END .leaf_size=3, n_neighbors=18, p=1;, score=-2.395 total time=   0.2s
[CV 3/3] END .leaf_size=3, n_neighbors=18, p=1;, score=-2.143 total time=   0.2s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=3, n_neighbors=36, p=1;, score=-2.090 total time=   0.2s
[CV 2/3] END .leaf_size=3, n_neighbors=36, p=1;, score=-2.394 total time=   0.2s
[CV 3/3] END .leaf_size=3, n_neighbors=36, p=1;, score=-2.186 total time=   0.2s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=100, n_neighbors=18, p=1;, score=-2.075 total time=   0.2s
[CV 2/3] END leaf_size=100, n_neighbors=18, p=1;, score=-2.395 total time=   0.2s
[CV 3/3] END leaf_size=100, n_neighbors=18, p=1;, score=-2.143 total time=   0.2s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=3, n_neighbors=17, p=1;, score=-2.081 total time=   0.2s
[CV 2/3] END .leaf_size=3, n_neighbors=17, p=1;, score=-2.380 total time=   0.2s
[CV 3/3] END .leaf_size=3, n_neighbors=17, p=1;, score=-2.153 total time=   0.2s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=100, n_neighbors=18, p=1;, score=-2.075 total time=   0.2s
[CV 2/3] END leaf_size=100, n_neighbors=18, p=1;, score=-2.395 total time=   0.2s
[CV 3/3] END leaf_size=100, n_neighbors=18, p=1;, score=-2.143 total time=   0.2s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=3, n_neighbors=18, p=1;, score=-2.075 total time=   0.2s
[CV 2/3] END .leaf_size=3, n_neighbors=18, p=1;, score=-2.395 total time=   0.2s
[CV 3/3] END .leaf_size=3, n_neighbors=18, p=1;, score=-2.143 total time=   0.2s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=100, n_neighbors=18, p=1;, score=-2.075 total time=   0.2s
[CV 2/3] END leaf_size=100, n_neighbors=18, p=1;, score=-2.395 total time=   0.2s
[CV 3/3] END leaf_size=100, n_neighbors=18, p=1;, score=-2.143 total time=   0.2s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=100, n_neighbors=44, p=1;, score=-2.101 total time=   0.2s
[CV 2/3] END leaf_size=100, n_neighbors=44, p=1;, score=-2.400 total time=   0.2s
[CV 3/3] END leaf_size=100, n_neighbors=44, p=1;, score=-2.196 total time=   0.2s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=100, n_neighbors=26, p=1;, score=-2.097 total time=   0.2s
[CV 2/3] END leaf_size=100, n_neighbors=26, p=1;, score=-2.401 total time=   0.2s
[CV 3/3] END leaf_size=100, n_neighbors=26, p=1;, score=-2.159 total time=   0.2s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=3, n_neighbors=18, p=1;, score=-2.075 total time=   0.2s
[CV 2/3] END .leaf_size=3, n_neighbors=18, p=1;, score=-2.395 total time=   0.2s
[CV 3/3] END .leaf_size=3, n_neighbors=18, p=1;, score=-2.143 total time=   0.2s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=99, n_neighbors=18, p=1;, score=-2.075 total time=   0.2s
[CV 2/3] END leaf_size=99, n_neighbors=18, p=1;, score=-2.395 total time=   0.2s
[CV 3/3] END leaf_size=99, n_neighbors=18, p=1;, score=-2.143 total time=   0.2s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=3, n_neighbors=14, p=2;, score=-2.223 total time=   0.1s
[CV 2/3] END .leaf_size=3, n_neighbors=14, p=2;, score=-2.463 total time=   0.1s
[CV 3/3] END .leaf_size=3, n_neighbors=14, p=2;, score=-2.255 total time=   0.1s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=5, n_neighbors=24, p=2;, score=-2.181 total time=   0.2s
[CV 2/3] END .leaf_size=5, n_neighbors=24, p=2;, score=-2.520 total time=   0.1s
[CV 3/3] END .leaf_size=5, n_neighbors=24, p=2;, score=-2.294 total time=   0.1s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=3, n_neighbors=18, p=1;, score=-2.075 total time=   0.2s
[CV 2/3] END .leaf_size=3, n_neighbors=18, p=1;, score=-2.395 total time=   0.2s
[CV 3/3] END .leaf_size=3, n_neighbors=18, p=1;, score=-2.143 total time=   0.2s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=100, n_neighbors=18, p=1;, score=-2.075 total time=   0.2s
[CV 2/3] END leaf_size=100, n_neighbors=18, p=1;, score=-2.395 total time=   0.2s
[CV 3/3] END leaf_size=100, n_neighbors=18, p=1;, score=-2.143 total time=   0.2s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=3, n_neighbors=18, p=1;, score=-2.075 total time=   0.2s
[CV 2/3] END .leaf_size=3, n_neighbors=18, p=1;, score=-2.395 total time=   0.2s
[CV 3/3] END .leaf_size=3, n_neighbors=18, p=1;, score=-2.143 total time=   0.2s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=100, n_neighbors=18, p=1;, score=-2.075 total time=   0.2s
[CV 2/3] END leaf_size=100, n_neighbors=18, p=1;, score=-2.395 total time=   0.2s
[CV 3/3] END leaf_size=100, n_neighbors=18, p=1;, score=-2.143 total time=   0.2s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=3, n_neighbors=18, p=1;, score=-2.075 total time=   0.2s
[CV 2/3] END .leaf_size=3, n_neighbors=18, p=1;, score=-2.395 total time=   0.2s
[CV 3/3] END .leaf_size=3, n_neighbors=18, p=1;, score=-2.143 total time=   0.2s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=100, n_neighbors=18, p=1;, score=-2.075 total time=   0.2s
[CV 2/3] END leaf_size=100, n_neighbors=18, p=1;, score=-2.395 total time=   0.2s
[CV 3/3] END leaf_size=100, n_neighbors=18, p=1;, score=-2.143 total time=   0.2s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=3, n_neighbors=18, p=1;, score=-2.075 total time=   0.2s
[CV 2/3] END .leaf_size=3, n_neighbors=18, p=1;, score=-2.395 total time=   0.2s
[CV 3/3] END .leaf_size=3, n_neighbors=18, p=1;, score=-2.143 total time=   0.2s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=100, n_neighbors=18, p=1;, score=-2.075 total time=   0.2s
[CV 2/3] END leaf_size=100, n_neighbors=18, p=1;, score=-2.395 total time=   0.2s
[CV 3/3] END leaf_size=100, n_neighbors=18, p=1;, score=-2.143 total time=   0.2s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=3, n_neighbors=18, p=1;, score=-2.075 total time=   0.2s
[CV 2/3] END .leaf_size=3, n_neighbors=18, p=1;, score=-2.395 total time=   0.2s
[CV 3/3] END .leaf_size=3, n_neighbors=18, p=1;, score=-2.143 total time=   0.2s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=100, n_neighbors=18, p=1;, score=-2.075 total time=   0.2s
[CV 2/3] END leaf_size=100, n_neighbors=18, p=1;, score=-2.395 total time=   0.2s
[CV 3/3] END leaf_size=100, n_neighbors=18, p=1;, score=-2.143 total time=   0.2s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=3, n_neighbors=18, p=1;, score=-2.075 total time=   0.2s
[CV 2/3] END .leaf_size=3, n_neighbors=18, p=1;, score=-2.395 total time=   0.2s
[CV 3/3] END .leaf_size=3, n_neighbors=18, p=1;, score=-2.143 total time=   0.2s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=100, n_neighbors=18, p=1;, score=-2.075 total time=   0.2s
[CV 2/3] END leaf_size=100, n_neighbors=18, p=1;, score=-2.395 total time=   0.2s
[CV 3/3] END leaf_size=100, n_neighbors=18, p=1;, score=-2.143 total time=   0.2s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=3, n_neighbors=18, p=1;, score=-2.075 total time=   0.2s
[CV 2/3] END .leaf_size=3, n_neighbors=18, p=1;, score=-2.395 total time=   0.2s
[CV 3/3] END .leaf_size=3, n_neighbors=18, p=1;, score=-2.143 total time=   0.2s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=100, n_neighbors=18, p=1;, score=-2.075 total time=   0.2s
[CV 2/3] END leaf_size=100, n_neighbors=18, p=1;, score=-2.395 total time=   0.2s
[CV 3/3] END leaf_size=100, n_neighbors=18, p=1;, score=-2.143 total time=   0.2s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=100, n_neighbors=18, p=1;, score=-2.075 total time=   0.2s
[CV 2/3] END leaf_size=100, n_neighbors=18, p=1;, score=-2.395 total time=   0.2s
[CV 3/3] END leaf_size=100, n_neighbors=18, p=1;, score=-2.143 total time=   0.2s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=3, n_neighbors=18, p=1;, score=-2.075 total time=   0.2s
[CV 2/3] END .leaf_size=3, n_neighbors=18, p=1;, score=-2.395 total time=   0.2s
[CV 3/3] END .leaf_size=3, n_neighbors=18, p=1;, score=-2.143 total time=   0.2s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=3, n_neighbors=18, p=1;, score=-2.075 total time=   0.2s
[CV 2/3] END .leaf_size=3, n_neighbors=18, p=1;, score=-2.395 total time=   0.2s
[CV 3/3] END .leaf_size=3, n_neighbors=18, p=1;, score=-2.143 total time=   0.2s
{'mean_fit_time': array([0.00397531, 0.00441233, 0.00432865, 0.00454227, 0.00465695,
       0.00482146, 0.00377234, 0.00387152, 0.00388471, 0.0042448 ,
       0.00396593, 0.00428168, 0.00410128, 0.00369008, 0.00412615,
       0.00377321, 0.00364041, 0.00383894, 0.003865  , 0.00401831,
       0.00394551, 0.00402037, 0.00415015, 0.00409325, 0.00400384,
       0.00392238, 0.00409373, 0.00414626, 0.00396578, 0.00307616,
       0.00348115, 0.00422875, 0.00424361, 0.00377043, 0.00367538,
       0.00398842, 0.00410549, 0.00393915, 0.00379475, 0.00396355,
       0.0039587 , 0.00399129, 0.00359575, 0.00362261, 0.00413704,
       0.00345818, 0.00428303, 0.00412695, 0.0043393 , 0.00389854]), 'std_fit_time': array([1.21804014e-03, 1.87529647e-04, 1.65483029e-05, 1.67819622e-04,
       6.39096210e-05, 1.15174657e-03, 2.38365353e-04, 1.34043176e-05,
       2.03986877e-05, 6.66181131e-04, 2.26842244e-04, 6.79856792e-04,
       4.32009729e-04, 3.59088476e-04, 7.91594141e-04, 1.11114484e-04,
       2.70894081e-04, 3.88856455e-04, 4.43175954e-04, 2.65431095e-04,
       2.88565833e-04, 4.61871223e-04, 7.50556026e-04, 5.23037849e-04,
       3.24252618e-04, 5.02168330e-04, 6.38383167e-04, 6.42263022e-04,
       2.22706464e-04, 2.03508224e-04, 2.82960168e-04, 8.01464810e-04,
       4.91931583e-04, 4.52151866e-04, 4.86925315e-04, 7.40958055e-04,
       7.91276132e-04, 4.04521556e-04, 5.25239767e-04, 7.51863144e-04,
       3.02853040e-04, 3.27135159e-04, 4.06314242e-04, 3.82974970e-04,
       3.95632914e-04, 2.70639033e-04, 4.28493546e-04, 2.72086010e-04,
       4.96430206e-04, 5.72510258e-05]), 'mean_score_time': array([0.10312128, 0.10829393, 0.1098551 , 0.02803644, 0.02555044,
       0.11049207, 0.03414194, 0.03783043, 0.02851733, 0.05401921,
       0.16624053, 0.16888078, 0.16237752, 0.16035597, 0.16796605,
       0.16588434, 0.16572793, 0.16326865, 0.13050922, 0.16375542,
       0.16563042, 0.16934172, 0.16512259, 0.15670904, 0.16595856,
       0.16723228, 0.16731127, 0.16199327, 0.15614112, 0.17704336,
       0.16861908, 0.10122506, 0.12976297, 0.15532875, 0.16383823,
       0.16448228, 0.16652107, 0.16585628, 0.16550612, 0.16466268,
       0.16416446, 0.16559124, 0.1638337 , 0.16393725, 0.16439295,
       0.16382662, 0.16442696, 0.16488075, 0.1644059 , 0.16488624]), 'std_score_time': array([0.09066931, 0.00063629, 0.00043178, 0.00716237, 0.00801579,
       0.00321381, 0.01944524, 0.0172438 , 0.01922063, 0.04597911,
       0.01250104, 0.02014706, 0.0083461 , 0.00520514, 0.01671695,
       0.01442368, 0.01165879, 0.00885645, 0.02717408, 0.01308508,
       0.01139747, 0.01808088, 0.01385643, 0.00226627, 0.01592332,
       0.01655429, 0.01787764, 0.00884837, 0.00140367, 0.02864027,
       0.01851743, 0.01804885, 0.02106448, 0.00223772, 0.01184864,
       0.01256598, 0.01647306, 0.01565611, 0.01487232, 0.01465592,
       0.01400831, 0.01386517, 0.01307304, 0.01334754, 0.0132919 ,
       0.01289575, 0.01369809, 0.01291498, 0.01283442, 0.01101996]), 'param_leaf_size': masked_array(data=[67, 5, 59, 55, 29, 12, 33, 10, 95, 97, 98, 98, 3, 100,
                   3, 76, 3, 3, 4, 100, 3, 3, 100, 3, 100, 3, 100, 100,
                   100, 3, 99, 3, 5, 3, 100, 3, 100, 3, 100, 3, 100, 3,
                   100, 3, 100, 3, 100, 100, 3, 3],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False],
       fill_value='?',
            dtype=object), 'param_n_neighbors': masked_array(data=[10, 10, 48, 32, 30, 13, 41, 48, 19, 33, 50, 3, 29, 33,
                   20, 24, 50, 40, 3, 17, 18, 36, 18, 17, 18, 18, 18, 44,
                   26, 18, 18, 14, 24, 18, 18, 18, 18, 18, 18, 18, 18, 18,
                   18, 18, 18, 18, 18, 18, 18, 18],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False],
       fill_value='?',
            dtype=object), 'param_p': masked_array(data=[2, 1, 1, 2, 2, 1, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1,
                   2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1,
                   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False],
       fill_value='?',
            dtype=object), 'params': [OrderedDict([('leaf_size', 67), ('n_neighbors', 10), ('p', 2)]), OrderedDict([('leaf_size', 5), ('n_neighbors', 10), ('p', 1)]), OrderedDict([('leaf_size', 59), ('n_neighbors', 48), ('p', 1)]), OrderedDict([('leaf_size', 55), ('n_neighbors', 32), ('p', 2)]), OrderedDict([('leaf_size', 29), ('n_neighbors', 30), ('p', 2)]), OrderedDict([('leaf_size', 12), ('n_neighbors', 13), ('p', 1)]), OrderedDict([('leaf_size', 33), ('n_neighbors', 41), ('p', 2)]), OrderedDict([('leaf_size', 10), ('n_neighbors', 48), ('p', 2)]), OrderedDict([('leaf_size', 95), ('n_neighbors', 19), ('p', 2)]), OrderedDict([('leaf_size', 97), ('n_neighbors', 33), ('p', 2)]), OrderedDict([('leaf_size', 98), ('n_neighbors', 50), ('p', 1)]), OrderedDict([('leaf_size', 98), ('n_neighbors', 3), ('p', 1)]), OrderedDict([('leaf_size', 3), ('n_neighbors', 29), ('p', 1)]), OrderedDict([('leaf_size', 100), ('n_neighbors', 33), ('p', 1)]), OrderedDict([('leaf_size', 3), ('n_neighbors', 20), ('p', 1)]), OrderedDict([('leaf_size', 76), ('n_neighbors', 24), ('p', 1)]), OrderedDict([('leaf_size', 3), ('n_neighbors', 50), ('p', 1)]), OrderedDict([('leaf_size', 3), ('n_neighbors', 40), ('p', 1)]), OrderedDict([('leaf_size', 4), ('n_neighbors', 3), ('p', 2)]), OrderedDict([('leaf_size', 100), ('n_neighbors', 17), ('p', 1)]), OrderedDict([('leaf_size', 3), ('n_neighbors', 18), ('p', 1)]), OrderedDict([('leaf_size', 3), ('n_neighbors', 36), ('p', 1)]), OrderedDict([('leaf_size', 100), ('n_neighbors', 18), ('p', 1)]), OrderedDict([('leaf_size', 3), ('n_neighbors', 17), ('p', 1)]), OrderedDict([('leaf_size', 100), ('n_neighbors', 18), ('p', 1)]), OrderedDict([('leaf_size', 3), ('n_neighbors', 18), ('p', 1)]), OrderedDict([('leaf_size', 100), ('n_neighbors', 18), ('p', 1)]), OrderedDict([('leaf_size', 100), ('n_neighbors', 44), ('p', 1)]), OrderedDict([('leaf_size', 100), ('n_neighbors', 26), ('p', 1)]), OrderedDict([('leaf_size', 3), ('n_neighbors', 18), ('p', 1)]), OrderedDict([('leaf_size', 99), ('n_neighbors', 18), ('p', 1)]), OrderedDict([('leaf_size', 3), ('n_neighbors', 14), ('p', 2)]), OrderedDict([('leaf_size', 5), ('n_neighbors', 24), ('p', 2)]), OrderedDict([('leaf_size', 3), ('n_neighbors', 18), ('p', 1)]), OrderedDict([('leaf_size', 100), ('n_neighbors', 18), ('p', 1)]), OrderedDict([('leaf_size', 3), ('n_neighbors', 18), ('p', 1)]), OrderedDict([('leaf_size', 100), ('n_neighbors', 18), ('p', 1)]), OrderedDict([('leaf_size', 3), ('n_neighbors', 18), ('p', 1)]), OrderedDict([('leaf_size', 100), ('n_neighbors', 18), ('p', 1)]), OrderedDict([('leaf_size', 3), ('n_neighbors', 18), ('p', 1)]), OrderedDict([('leaf_size', 100), ('n_neighbors', 18), ('p', 1)]), OrderedDict([('leaf_size', 3), ('n_neighbors', 18), ('p', 1)]), OrderedDict([('leaf_size', 100), ('n_neighbors', 18), ('p', 1)]), OrderedDict([('leaf_size', 3), ('n_neighbors', 18), ('p', 1)]), OrderedDict([('leaf_size', 100), ('n_neighbors', 18), ('p', 1)]), OrderedDict([('leaf_size', 3), ('n_neighbors', 18), ('p', 1)]), OrderedDict([('leaf_size', 100), ('n_neighbors', 18), ('p', 1)]), OrderedDict([('leaf_size', 100), ('n_neighbors', 18), ('p', 1)]), OrderedDict([('leaf_size', 3), ('n_neighbors', 18), ('p', 1)]), OrderedDict([('leaf_size', 3), ('n_neighbors', 18), ('p', 1)])], 'split0_test_score': array([-2.24975103, -2.17177885, -2.09564502, -2.17429669, -2.17303161,
       -2.13582189, -2.20975627, -2.21713003, -2.21170581, -2.17086595,
       -2.09691536, -2.40439203, -2.09343314, -2.09369954, -2.08833916,
       -2.09522039, -2.09691536, -2.0975206 , -2.4623521 , -2.08145806,
       -2.07456823, -2.08963553, -2.07456823, -2.08145806, -2.07456823,
       -2.07456823, -2.07456823, -2.10078509, -2.09737034, -2.07456823,
       -2.07456823, -2.22271942, -2.18115931, -2.07456823, -2.07456823,
       -2.07456823, -2.07456823, -2.07456823, -2.07456823, -2.07456823,
       -2.07456823, -2.07456823, -2.07456823, -2.07456823, -2.07456823,
       -2.07456823, -2.07456823, -2.07456823, -2.07456823, -2.07456823]), 'split1_test_score': array([-2.4569802 , -2.38023976, -2.40558192, -2.52319739, -2.51961563,
       -2.36902768, -2.51250717, -2.50367517, -2.50665482, -2.52377575,
       -2.40764025, -2.37652483, -2.39178985, -2.38515924, -2.39306366,
       -2.38644951, -2.40764025, -2.39800111, -2.60101252, -2.37981076,
       -2.39524705, -2.39402878, -2.39524705, -2.37981076, -2.39524705,
       -2.39524705, -2.39524705, -2.40034154, -2.40100173, -2.39524705,
       -2.39524705, -2.46273841, -2.51994876, -2.39524705, -2.39524705,
       -2.39524705, -2.39524705, -2.39524705, -2.39524705, -2.39524705,
       -2.39524705, -2.39524705, -2.39524705, -2.39524705, -2.39524705,
       -2.39524705, -2.39524705, -2.39524705, -2.39524705, -2.39524705]), 'split2_test_score': array([-2.27050412, -2.17443441, -2.19618318, -2.30058578, -2.29282713,
       -2.17137294, -2.31327746, -2.33061567, -2.27925106, -2.30172199,
       -2.19603724, -2.37138555, -2.1715336 , -2.17498635, -2.14956677,
       -2.16086635, -2.19603724, -2.18788279, -2.46563382, -2.15318465,
       -2.1434649 , -2.18629149, -2.1434649 , -2.15318465, -2.1434649 ,
       -2.1434649 , -2.1434649 , -2.19618305, -2.15910881, -2.1434649 ,
       -2.1434649 , -2.25549011, -2.29404582, -2.1434649 , -2.1434649 ,
       -2.1434649 , -2.1434649 , -2.1434649 , -2.1434649 , -2.1434649 ,
       -2.1434649 , -2.1434649 , -2.1434649 , -2.1434649 , -2.1434649 ,
       -2.1434649 , -2.1434649 , -2.1434649 , -2.1434649 , -2.1434649 ]), 'mean_test_score': array([-2.32574512, -2.24215101, -2.23247004, -2.33269329, -2.32849145,
       -2.2254075 , -2.3451803 , -2.35047362, -2.33253723, -2.33212123,
       -2.23353095, -2.3841008 , -2.21891887, -2.21794838, -2.21032319,
       -2.21417875, -2.23353095, -2.2278015 , -2.50966614, -2.20481782,
       -2.20442672, -2.2233186 , -2.20442672, -2.20481782, -2.20442672,
       -2.20442672, -2.20442672, -2.23243656, -2.2191603 , -2.20442672,
       -2.20442672, -2.31364931, -2.33171796, -2.20442672, -2.20442672,
       -2.20442672, -2.20442672, -2.20442672, -2.20442672, -2.20442672,
       -2.20442672, -2.20442672, -2.20442672, -2.20442672, -2.20442672,
       -2.20442672, -2.20442672, -2.20442672, -2.20442672, -2.20442672]), 'std_test_score': array([0.09318318, 0.09764951, 0.1291066 , 0.14423613, 0.14372214,
       0.10258666, 0.12563935, 0.11782129, 0.12616997, 0.14566953,
       0.12959378, 0.01450066, 0.12632815, 0.1228047 , 0.13161247,
       0.12472706, 0.12959378, 0.12587629, 0.06460553, 0.12715626,
       0.13783078, 0.12699624, 0.13783078, 0.12715626, 0.13783078,
       0.13783078, 0.13783078, 0.12495133, 0.13102834, 0.13783078,
       0.13783078, 0.10626743, 0.14085209, 0.13783078, 0.13783078,
       0.13783078, 0.13783078, 0.13783078, 0.13783078, 0.13783078,
       0.13783078, 0.13783078, 0.13783078, 0.13783078, 0.13783078,
       0.13783078, 0.13783078, 0.13783078, 0.13783078, 0.13783078]), 'rank_test_score': array([41, 39, 36, 46, 42, 33, 47, 48, 45, 44, 37, 49, 30, 29, 27, 28, 37,
       34, 50, 25,  1, 32,  1, 25,  1,  1,  1, 35, 31,  1,  1, 40, 43,  1,
        1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1],
      dtype=int32)}
-2.204426724447277
OrderedDict([('leaf_size', 3), ('n_neighbors', 18), ('p', 1)])
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=8, n_neighbors=44, p=1;, score=-2.063 total time=   1.6s
[CV 2/3] END .leaf_size=8, n_neighbors=44, p=1;, score=-2.306 total time=   1.5s
[CV 3/3] END .leaf_size=8, n_neighbors=44, p=1;, score=-2.177 total time=   1.8s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=89, n_neighbors=33, p=1;, score=-2.035 total time=   2.0s
[CV 2/3] END leaf_size=89, n_neighbors=33, p=1;, score=-2.272 total time=   1.5s
[CV 3/3] END leaf_size=89, n_neighbors=33, p=1;, score=-2.143 total time=   1.5s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=39, n_neighbors=27, p=2;, score=-2.154 total time=   0.3s
[CV 2/3] END leaf_size=39, n_neighbors=27, p=2;, score=-2.377 total time=   0.4s
[CV 3/3] END leaf_size=39, n_neighbors=27, p=2;, score=-2.247 total time=   0.4s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=78, n_neighbors=37, p=1;, score=-2.048 total time=   1.5s
[CV 2/3] END leaf_size=78, n_neighbors=37, p=1;, score=-2.287 total time=   1.6s
[CV 3/3] END leaf_size=78, n_neighbors=37, p=1;, score=-2.154 total time=   1.7s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=60, n_neighbors=34, p=1;, score=-2.031 total time=   1.6s
[CV 2/3] END leaf_size=60, n_neighbors=34, p=1;, score=-2.280 total time=   1.5s
[CV 3/3] END leaf_size=60, n_neighbors=34, p=1;, score=-2.149 total time=   1.6s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=19, n_neighbors=23, p=2;, score=-2.124 total time=   0.3s
[CV 2/3] END leaf_size=19, n_neighbors=23, p=2;, score=-2.381 total time=   0.4s
[CV 3/3] END leaf_size=19, n_neighbors=23, p=2;, score=-2.242 total time=   0.4s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=39, n_neighbors=34, p=1;, score=-2.031 total time=   1.6s
[CV 2/3] END leaf_size=39, n_neighbors=34, p=1;, score=-2.280 total time=   1.5s
[CV 3/3] END leaf_size=39, n_neighbors=34, p=1;, score=-2.149 total time=   1.5s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=34, n_neighbors=29, p=1;, score=-2.043 total time=   1.5s
[CV 2/3] END leaf_size=34, n_neighbors=29, p=1;, score=-2.271 total time=   1.5s
[CV 3/3] END leaf_size=34, n_neighbors=29, p=1;, score=-2.139 total time=   1.6s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=50, n_neighbors=11, p=2;, score=-2.121 total time=   0.4s
[CV 2/3] END leaf_size=50, n_neighbors=11, p=2;, score=-2.305 total time=   0.4s
[CV 3/3] END leaf_size=50, n_neighbors=11, p=2;, score=-2.237 total time=   0.4s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=77, n_neighbors=46, p=2;, score=-2.167 total time=   0.4s
[CV 2/3] END leaf_size=77, n_neighbors=46, p=2;, score=-2.432 total time=   0.4s
[CV 3/3] END leaf_size=77, n_neighbors=46, p=2;, score=-2.287 total time=   0.3s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=97, n_neighbors=3, p=1;, score=-2.372 total time=   1.9s
[CV 2/3] END .leaf_size=97, n_neighbors=3, p=1;, score=-2.285 total time=   1.6s
[CV 3/3] END .leaf_size=97, n_neighbors=3, p=1;, score=-2.338 total time=   1.6s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=3, n_neighbors=31, p=1;, score=-2.043 total time=   1.5s
[CV 2/3] END .leaf_size=3, n_neighbors=31, p=1;, score=-2.270 total time=   1.5s
[CV 3/3] END .leaf_size=3, n_neighbors=31, p=1;, score=-2.136 total time=   1.8s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END ..leaf_size=4, n_neighbors=3, p=2;, score=-2.390 total time=   0.4s
[CV 2/3] END ..leaf_size=4, n_neighbors=3, p=2;, score=-2.444 total time=   0.4s
[CV 3/3] END ..leaf_size=4, n_neighbors=3, p=2;, score=-2.451 total time=   0.4s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=100, n_neighbors=17, p=1;, score=-2.023 total time=   1.6s
[CV 2/3] END leaf_size=100, n_neighbors=17, p=1;, score=-2.242 total time=   1.5s
[CV 3/3] END leaf_size=100, n_neighbors=17, p=1;, score=-2.139 total time=   1.7s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=100, n_neighbors=14, p=1;, score=-2.037 total time=   1.8s
[CV 2/3] END leaf_size=100, n_neighbors=14, p=1;, score=-2.223 total time=   1.8s
[CV 3/3] END leaf_size=100, n_neighbors=14, p=1;, score=-2.160 total time=   1.5s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=99, n_neighbors=50, p=1;, score=-2.078 total time=   1.5s
[CV 2/3] END leaf_size=99, n_neighbors=50, p=1;, score=-2.334 total time=   1.5s
[CV 3/3] END leaf_size=99, n_neighbors=50, p=1;, score=-2.190 total time=   1.5s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=3, n_neighbors=16, p=1;, score=-2.027 total time=   1.6s
[CV 2/3] END .leaf_size=3, n_neighbors=16, p=1;, score=-2.243 total time=   1.5s
[CV 3/3] END .leaf_size=3, n_neighbors=16, p=1;, score=-2.147 total time=   1.5s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=100, n_neighbors=21, p=1;, score=-2.036 total time=   1.5s
[CV 2/3] END leaf_size=100, n_neighbors=21, p=1;, score=-2.233 total time=   1.5s
[CV 3/3] END leaf_size=100, n_neighbors=21, p=1;, score=-2.149 total time=   1.6s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=99, n_neighbors=10, p=1;, score=-2.081 total time=   1.5s
[CV 2/3] END leaf_size=99, n_neighbors=10, p=1;, score=-2.219 total time=   1.5s
[CV 3/3] END leaf_size=99, n_neighbors=10, p=1;, score=-2.102 total time=   1.5s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=3, n_neighbors=11, p=1;, score=-2.075 total time=   1.5s
[CV 2/3] END .leaf_size=3, n_neighbors=11, p=1;, score=-2.211 total time=   1.6s
[CV 3/3] END .leaf_size=3, n_neighbors=11, p=1;, score=-2.120 total time=   1.7s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=100, n_neighbors=19, p=1;, score=-2.031 total time=   1.7s
[CV 2/3] END leaf_size=100, n_neighbors=19, p=1;, score=-2.232 total time=   1.8s
[CV 3/3] END leaf_size=100, n_neighbors=19, p=1;, score=-2.133 total time=   1.7s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=100, n_neighbors=36, p=2;, score=-2.167 total time=   0.4s
[CV 2/3] END leaf_size=100, n_neighbors=36, p=2;, score=-2.403 total time=   0.4s
[CV 3/3] END leaf_size=100, n_neighbors=36, p=2;, score=-2.272 total time=   0.4s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=100, n_neighbors=11, p=1;, score=-2.075 total time=   1.7s
[CV 2/3] END leaf_size=100, n_neighbors=11, p=1;, score=-2.211 total time=   1.6s
[CV 3/3] END leaf_size=100, n_neighbors=11, p=1;, score=-2.120 total time=   1.7s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=3, n_neighbors=25, p=1;, score=-2.033 total time=   1.7s
[CV 2/3] END .leaf_size=3, n_neighbors=25, p=1;, score=-2.240 total time=   1.7s
[CV 3/3] END .leaf_size=3, n_neighbors=25, p=1;, score=-2.144 total time=   1.7s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=100, n_neighbors=17, p=1;, score=-2.023 total time=   1.8s
[CV 2/3] END leaf_size=100, n_neighbors=17, p=1;, score=-2.242 total time=   1.5s
[CV 3/3] END leaf_size=100, n_neighbors=17, p=1;, score=-2.139 total time=   1.7s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=98, n_neighbors=16, p=2;, score=-2.111 total time=   0.4s
[CV 2/3] END leaf_size=98, n_neighbors=16, p=2;, score=-2.346 total time=   0.4s
[CV 3/3] END leaf_size=98, n_neighbors=16, p=2;, score=-2.248 total time=   0.4s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=3, n_neighbors=18, p=1;, score=-2.032 total time=   1.6s
[CV 2/3] END .leaf_size=3, n_neighbors=18, p=1;, score=-2.231 total time=   1.5s
[CV 3/3] END .leaf_size=3, n_neighbors=18, p=1;, score=-2.137 total time=   1.7s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=100, n_neighbors=18, p=1;, score=-2.032 total time=   1.8s
[CV 2/3] END leaf_size=100, n_neighbors=18, p=1;, score=-2.231 total time=   1.5s
[CV 3/3] END leaf_size=100, n_neighbors=18, p=1;, score=-2.137 total time=   1.6s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=3, n_neighbors=19, p=1;, score=-2.031 total time=   1.6s
[CV 2/3] END .leaf_size=3, n_neighbors=19, p=1;, score=-2.232 total time=   1.7s
[CV 3/3] END .leaf_size=3, n_neighbors=19, p=1;, score=-2.133 total time=   1.7s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=4, n_neighbors=41, p=1;, score=-2.058 total time=   1.6s
[CV 2/3] END .leaf_size=4, n_neighbors=41, p=1;, score=-2.298 total time=   1.7s
[CV 3/3] END .leaf_size=4, n_neighbors=41, p=1;, score=-2.166 total time=   1.6s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=8, n_neighbors=50, p=2;, score=-2.176 total time=   0.4s
[CV 2/3] END .leaf_size=8, n_neighbors=50, p=2;, score=-2.447 total time=   0.4s
[CV 3/3] END .leaf_size=8, n_neighbors=50, p=2;, score=-2.296 total time=   0.4s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END ..leaf_size=4, n_neighbors=8, p=1;, score=-2.131 total time=   1.5s
[CV 2/3] END ..leaf_size=4, n_neighbors=8, p=1;, score=-2.174 total time=   1.7s
[CV 3/3] END ..leaf_size=4, n_neighbors=8, p=1;, score=-2.101 total time=   1.5s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END ..leaf_size=3, n_neighbors=9, p=1;, score=-2.087 total time=   1.7s
[CV 2/3] END ..leaf_size=3, n_neighbors=9, p=1;, score=-2.178 total time=   1.5s
[CV 3/3] END ..leaf_size=3, n_neighbors=9, p=1;, score=-2.097 total time=   1.5s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END ..leaf_size=3, n_neighbors=9, p=1;, score=-2.087 total time=   1.7s
[CV 2/3] END ..leaf_size=3, n_neighbors=9, p=1;, score=-2.178 total time=   1.7s
[CV 3/3] END ..leaf_size=3, n_neighbors=9, p=1;, score=-2.097 total time=   1.7s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END ..leaf_size=3, n_neighbors=9, p=1;, score=-2.087 total time=   1.7s
[CV 2/3] END ..leaf_size=3, n_neighbors=9, p=1;, score=-2.178 total time=   1.7s
[CV 3/3] END ..leaf_size=3, n_neighbors=9, p=1;, score=-2.097 total time=   1.7s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END ..leaf_size=3, n_neighbors=9, p=1;, score=-2.087 total time=   1.7s
[CV 2/3] END ..leaf_size=3, n_neighbors=9, p=1;, score=-2.178 total time=   1.7s
[CV 3/3] END ..leaf_size=3, n_neighbors=9, p=1;, score=-2.097 total time=   1.7s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=100, n_neighbors=26, p=1;, score=-2.035 total time=   1.7s
[CV 2/3] END leaf_size=100, n_neighbors=26, p=1;, score=-2.249 total time=   1.7s
[CV 3/3] END leaf_size=100, n_neighbors=26, p=1;, score=-2.135 total time=   1.5s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=4, n_neighbors=41, p=2;, score=-2.164 total time=   0.4s
[CV 2/3] END .leaf_size=4, n_neighbors=41, p=2;, score=-2.421 total time=   0.4s
[CV 3/3] END .leaf_size=4, n_neighbors=41, p=2;, score=-2.269 total time=   0.4s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END ..leaf_size=3, n_neighbors=9, p=1;, score=-2.087 total time=   1.5s
[CV 2/3] END ..leaf_size=3, n_neighbors=9, p=1;, score=-2.178 total time=   1.6s
[CV 3/3] END ..leaf_size=3, n_neighbors=9, p=1;, score=-2.097 total time=   1.5s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END ..leaf_size=3, n_neighbors=9, p=1;, score=-2.087 total time=   1.5s
[CV 2/3] END ..leaf_size=3, n_neighbors=9, p=1;, score=-2.178 total time=   1.5s
[CV 3/3] END ..leaf_size=3, n_neighbors=9, p=1;, score=-2.097 total time=   1.7s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=99, n_neighbors=47, p=1;, score=-2.073 total time=   1.7s
[CV 2/3] END leaf_size=99, n_neighbors=47, p=1;, score=-2.322 total time=   1.6s
[CV 3/3] END leaf_size=99, n_neighbors=47, p=1;, score=-2.181 total time=   1.7s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=100, n_neighbors=9, p=1;, score=-2.087 total time=   1.9s
[CV 2/3] END leaf_size=100, n_neighbors=9, p=1;, score=-2.178 total time=   1.7s
[CV 3/3] END leaf_size=100, n_neighbors=9, p=1;, score=-2.097 total time=   1.8s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=99, n_neighbors=9, p=1;, score=-2.087 total time=   1.6s
[CV 2/3] END .leaf_size=99, n_neighbors=9, p=1;, score=-2.178 total time=   1.7s
[CV 3/3] END .leaf_size=99, n_neighbors=9, p=1;, score=-2.097 total time=   1.7s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=100, n_neighbors=9, p=1;, score=-2.087 total time=   1.7s
[CV 2/3] END leaf_size=100, n_neighbors=9, p=1;, score=-2.178 total time=   1.8s
[CV 3/3] END leaf_size=100, n_neighbors=9, p=1;, score=-2.097 total time=   1.6s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=99, n_neighbors=9, p=1;, score=-2.087 total time=   1.8s
[CV 2/3] END .leaf_size=99, n_neighbors=9, p=1;, score=-2.178 total time=   1.5s
[CV 3/3] END .leaf_size=99, n_neighbors=9, p=1;, score=-2.097 total time=   1.7s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=100, n_neighbors=9, p=1;, score=-2.087 total time=   1.5s
[CV 2/3] END leaf_size=100, n_neighbors=9, p=1;, score=-2.178 total time=   1.7s
[CV 3/3] END leaf_size=100, n_neighbors=9, p=1;, score=-2.097 total time=   1.7s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=4, n_neighbors=31, p=1;, score=-2.043 total time=   1.5s
[CV 2/3] END .leaf_size=4, n_neighbors=31, p=1;, score=-2.270 total time=   1.7s
[CV 3/3] END .leaf_size=4, n_neighbors=31, p=1;, score=-2.136 total time=   1.8s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=97, n_neighbors=9, p=1;, score=-2.087 total time=   1.5s
[CV 2/3] END .leaf_size=97, n_neighbors=9, p=1;, score=-2.178 total time=   1.8s
[CV 3/3] END .leaf_size=97, n_neighbors=9, p=1;, score=-2.097 total time=   1.6s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=99, n_neighbors=9, p=1;, score=-2.087 total time=   1.5s
[CV 2/3] END .leaf_size=99, n_neighbors=9, p=1;, score=-2.178 total time=   1.7s
[CV 3/3] END .leaf_size=99, n_neighbors=9, p=1;, score=-2.097 total time=   1.7s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END ..leaf_size=5, n_neighbors=9, p=1;, score=-2.087 total time=   1.7s
[CV 2/3] END ..leaf_size=5, n_neighbors=9, p=1;, score=-2.178 total time=   1.7s
[CV 3/3] END ..leaf_size=5, n_neighbors=9, p=1;, score=-2.097 total time=   1.7s
{'mean_fit_time': array([0.02982513, 0.03516094, 0.04554272, 0.04447746, 0.03427784,
       0.04732291, 0.0395956 , 0.03327783, 0.04643663, 0.05167794,
       0.04026596, 0.03339839, 0.04632036, 0.0402844 , 0.0357012 ,
       0.03945597, 0.03348287, 0.03295183, 0.03131604, 0.03285201,
       0.03297416, 0.0437394 , 0.04107221, 0.03600764, 0.03466908,
       0.04421941, 0.04257003, 0.0344015 , 0.03652978, 0.03251004,
       0.05109517, 0.0380675 , 0.03487937, 0.03181656, 0.03514608,
       0.03493881, 0.03313462, 0.0445652 , 0.03977768, 0.03085319,
       0.037721  , 0.03292092, 0.04042109, 0.03425344, 0.03964694,
       0.03526966, 0.03324835, 0.04021494, 0.0377322 , 0.03175855]), 'std_fit_time': array([0.00292766, 0.00141775, 0.01159772, 0.00859617, 0.00373118,
       0.0077169 , 0.00882785, 0.00018539, 0.00680443, 0.00060864,
       0.008094  , 0.00180204, 0.00940667, 0.00808472, 0.00242295,
       0.00767729, 0.00164482, 0.00013369, 0.00037557, 0.00183942,
       0.00178071, 0.01037346, 0.0076916 , 0.00082998, 0.00482886,
       0.01127519, 0.00803256, 0.00478145, 0.00623404, 0.00298931,
       0.00270247, 0.00876655, 0.00388013, 0.00345365, 0.00195887,
       0.00276833, 0.00135221, 0.01032824, 0.00828537, 0.00031789,
       0.0037354 , 0.00282136, 0.00793129, 0.00043437, 0.00536672,
       0.00537609, 0.00396249, 0.00327423, 0.00461103, 0.00195017]), 'mean_score_time': array([1.61709944, 1.63773425, 0.32240645, 1.57521764, 1.53352006,
       0.31151954, 1.49269954, 1.4912018 , 0.31689525, 0.32236417,
       1.63516045, 1.56017439, 0.34010959, 1.582618  , 1.65433947,
       1.48289752, 1.52480006, 1.50602198, 1.46457418, 1.58988309,
       1.69932779, 0.32540226, 1.60604747, 1.69643211, 1.64310368,
       0.32109388, 1.59423447, 1.59142836, 1.63575697, 1.60482359,
       0.31788993, 1.54478041, 1.56334583, 1.6547579 , 1.66953214,
       1.66133396, 1.62466351, 0.31990345, 1.4932433 , 1.53568284,
       1.64176361, 1.7529405 , 1.63813615, 1.65152311, 1.64803203,
       1.61071491, 1.6197811 , 1.60156004, 1.61595313, 1.65636563]), 'std_score_time': array([0.13656424, 0.25232067, 0.02385677, 0.07583499, 0.04965712,
       0.01913922, 0.04936827, 0.04309322, 0.00486755, 0.02558131,
       0.13254725, 0.11218733, 0.02341083, 0.09596946, 0.14042725,
       0.00488685, 0.05593528, 0.03452083, 0.01054949, 0.08969688,
       0.05511092, 0.01364553, 0.06621986, 0.00527474, 0.13568058,
       0.01083301, 0.08703576, 0.10337182, 0.05057251, 0.05975275,
       0.00678702, 0.09848369, 0.11074826, 0.00778935, 0.01496936,
       0.01672902, 0.09290522, 0.01014983, 0.03767555, 0.10558547,
       0.06043057, 0.05218051, 0.08623341, 0.08021533, 0.12871557,
       0.10635818, 0.11290164, 0.0907208 , 0.10201381, 0.00303476]), 'param_leaf_size': masked_array(data=[8, 89, 39, 78, 60, 19, 39, 34, 50, 77, 97, 3, 4, 100,
                   100, 99, 3, 100, 99, 3, 100, 100, 100, 3, 100, 98, 3,
                   100, 3, 4, 8, 4, 3, 3, 3, 3, 100, 4, 3, 3, 99, 100, 99,
                   100, 99, 100, 4, 97, 99, 5],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False],
       fill_value='?',
            dtype=object), 'param_n_neighbors': masked_array(data=[44, 33, 27, 37, 34, 23, 34, 29, 11, 46, 3, 31, 3, 17,
                   14, 50, 16, 21, 10, 11, 19, 36, 11, 25, 17, 16, 18, 18,
                   19, 41, 50, 8, 9, 9, 9, 9, 26, 41, 9, 9, 47, 9, 9, 9,
                   9, 9, 31, 9, 9, 9],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False],
       fill_value='?',
            dtype=object), 'param_p': masked_array(data=[1, 1, 2, 1, 1, 2, 1, 1, 2, 2, 1, 1, 2, 1, 1, 1, 1, 1,
                   1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1,
                   1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False],
       fill_value='?',
            dtype=object), 'params': [OrderedDict([('leaf_size', 8), ('n_neighbors', 44), ('p', 1)]), OrderedDict([('leaf_size', 89), ('n_neighbors', 33), ('p', 1)]), OrderedDict([('leaf_size', 39), ('n_neighbors', 27), ('p', 2)]), OrderedDict([('leaf_size', 78), ('n_neighbors', 37), ('p', 1)]), OrderedDict([('leaf_size', 60), ('n_neighbors', 34), ('p', 1)]), OrderedDict([('leaf_size', 19), ('n_neighbors', 23), ('p', 2)]), OrderedDict([('leaf_size', 39), ('n_neighbors', 34), ('p', 1)]), OrderedDict([('leaf_size', 34), ('n_neighbors', 29), ('p', 1)]), OrderedDict([('leaf_size', 50), ('n_neighbors', 11), ('p', 2)]), OrderedDict([('leaf_size', 77), ('n_neighbors', 46), ('p', 2)]), OrderedDict([('leaf_size', 97), ('n_neighbors', 3), ('p', 1)]), OrderedDict([('leaf_size', 3), ('n_neighbors', 31), ('p', 1)]), OrderedDict([('leaf_size', 4), ('n_neighbors', 3), ('p', 2)]), OrderedDict([('leaf_size', 100), ('n_neighbors', 17), ('p', 1)]), OrderedDict([('leaf_size', 100), ('n_neighbors', 14), ('p', 1)]), OrderedDict([('leaf_size', 99), ('n_neighbors', 50), ('p', 1)]), OrderedDict([('leaf_size', 3), ('n_neighbors', 16), ('p', 1)]), OrderedDict([('leaf_size', 100), ('n_neighbors', 21), ('p', 1)]), OrderedDict([('leaf_size', 99), ('n_neighbors', 10), ('p', 1)]), OrderedDict([('leaf_size', 3), ('n_neighbors', 11), ('p', 1)]), OrderedDict([('leaf_size', 100), ('n_neighbors', 19), ('p', 1)]), OrderedDict([('leaf_size', 100), ('n_neighbors', 36), ('p', 2)]), OrderedDict([('leaf_size', 100), ('n_neighbors', 11), ('p', 1)]), OrderedDict([('leaf_size', 3), ('n_neighbors', 25), ('p', 1)]), OrderedDict([('leaf_size', 100), ('n_neighbors', 17), ('p', 1)]), OrderedDict([('leaf_size', 98), ('n_neighbors', 16), ('p', 2)]), OrderedDict([('leaf_size', 3), ('n_neighbors', 18), ('p', 1)]), OrderedDict([('leaf_size', 100), ('n_neighbors', 18), ('p', 1)]), OrderedDict([('leaf_size', 3), ('n_neighbors', 19), ('p', 1)]), OrderedDict([('leaf_size', 4), ('n_neighbors', 41), ('p', 1)]), OrderedDict([('leaf_size', 8), ('n_neighbors', 50), ('p', 2)]), OrderedDict([('leaf_size', 4), ('n_neighbors', 8), ('p', 1)]), OrderedDict([('leaf_size', 3), ('n_neighbors', 9), ('p', 1)]), OrderedDict([('leaf_size', 3), ('n_neighbors', 9), ('p', 1)]), OrderedDict([('leaf_size', 3), ('n_neighbors', 9), ('p', 1)]), OrderedDict([('leaf_size', 3), ('n_neighbors', 9), ('p', 1)]), OrderedDict([('leaf_size', 100), ('n_neighbors', 26), ('p', 1)]), OrderedDict([('leaf_size', 4), ('n_neighbors', 41), ('p', 2)]), OrderedDict([('leaf_size', 3), ('n_neighbors', 9), ('p', 1)]), OrderedDict([('leaf_size', 3), ('n_neighbors', 9), ('p', 1)]), OrderedDict([('leaf_size', 99), ('n_neighbors', 47), ('p', 1)]), OrderedDict([('leaf_size', 100), ('n_neighbors', 9), ('p', 1)]), OrderedDict([('leaf_size', 99), ('n_neighbors', 9), ('p', 1)]), OrderedDict([('leaf_size', 100), ('n_neighbors', 9), ('p', 1)]), OrderedDict([('leaf_size', 99), ('n_neighbors', 9), ('p', 1)]), OrderedDict([('leaf_size', 100), ('n_neighbors', 9), ('p', 1)]), OrderedDict([('leaf_size', 4), ('n_neighbors', 31), ('p', 1)]), OrderedDict([('leaf_size', 97), ('n_neighbors', 9), ('p', 1)]), OrderedDict([('leaf_size', 99), ('n_neighbors', 9), ('p', 1)]), OrderedDict([('leaf_size', 5), ('n_neighbors', 9), ('p', 1)])], 'split0_test_score': array([-2.06308636, -2.03547652, -2.1542369 , -2.04839507, -2.03125952,
       -2.12400822, -2.03125952, -2.04326566, -2.12094468, -2.16745511,
       -2.37198771, -2.04263154, -2.38955547, -2.02307704, -2.03719829,
       -2.07766641, -2.02694903, -2.03561565, -2.08089085, -2.07513063,
       -2.03085875, -2.16650653, -2.07513063, -2.03345848, -2.02307704,
       -2.11120132, -2.03177742, -2.03177742, -2.03085875, -2.05761321,
       -2.17631016, -2.13104264, -2.08697785, -2.08697785, -2.08697785,
       -2.08697785, -2.0351396 , -2.1644402 , -2.08697785, -2.08697785,
       -2.07264697, -2.08697785, -2.08697785, -2.08697785, -2.08697785,
       -2.08697785, -2.04263154, -2.08697785, -2.08697785, -2.08697785]), 'split1_test_score': array([-2.30646586, -2.27196371, -2.37739072, -2.28657443, -2.27973548,
       -2.38063176, -2.27973548, -2.27089985, -2.30467564, -2.43224165,
       -2.28547429, -2.26990497, -2.44366039, -2.24206426, -2.22279205,
       -2.33374847, -2.24306099, -2.23337397, -2.21862556, -2.21059116,
       -2.23225431, -2.40339542, -2.21059116, -2.24010074, -2.24206426,
       -2.34556025, -2.23123681, -2.23123681, -2.23225431, -2.2979976 ,
       -2.44665376, -2.17416567, -2.17832529, -2.17832529, -2.17832529,
       -2.17832529, -2.24896982, -2.4206215 , -2.17832529, -2.17832529,
       -2.32170844, -2.17832529, -2.17832529, -2.17832529, -2.17832529,
       -2.17832529, -2.26990497, -2.17832529, -2.17832529, -2.17832529]), 'split2_test_score': array([-2.17672415, -2.14315421, -2.2468389 , -2.1535311 , -2.14856628,
       -2.24180927, -2.14856628, -2.13916903, -2.23717208, -2.28660135,
       -2.338258  , -2.13560933, -2.45057449, -2.13915732, -2.15954056,
       -2.18959226, -2.14737891, -2.1493723 , -2.10235327, -2.12012873,
       -2.13273584, -2.27221101, -2.12012873, -2.14396868, -2.13915732,
       -2.24774661, -2.13734029, -2.13734029, -2.13273584, -2.1657037 ,
       -2.2956541 , -2.10069748, -2.09706335, -2.09706335, -2.09706335,
       -2.09706335, -2.13519591, -2.26933106, -2.09706335, -2.09706335,
       -2.18077539, -2.09706335, -2.09706335, -2.09706335, -2.09706335,
       -2.09706335, -2.13560933, -2.09706335, -2.09706335, -2.09706335]), 'mean_test_score': array([-2.18209212, -2.15019815, -2.25948884, -2.16283353, -2.15318709,
       -2.24881642, -2.15318709, -2.15111152, -2.2209308 , -2.2954327 ,
       -2.33190667, -2.14938194, -2.42793012, -2.13476621, -2.13984363,
       -2.20033571, -2.13912964, -2.13945398, -2.13395656, -2.13528351,
       -2.13194963, -2.28070432, -2.13528351, -2.13917597, -2.13476621,
       -2.23483606, -2.13345151, -2.13345151, -2.13194963, -2.1737715 ,
       -2.30620601, -2.13530193, -2.12078883, -2.12078883, -2.12078883,
       -2.12078883, -2.13976845, -2.28479759, -2.12078883, -2.12078883,
       -2.19171027, -2.12078883, -2.12078883, -2.12078883, -2.12078883,
       -2.12078883, -2.14938194, -2.12078883, -2.12078883, -2.12078883]), 'std_test_score': array([0.09943174, 0.09667389, 0.09154023, 0.09745855, 0.10149249,
       0.10488323, 0.10149249, 0.09331416, 0.07588193, 0.10827888,
       0.03560335, 0.09329368, 0.02728139, 0.08945506, 0.07703781,
       0.10482071, 0.08841995, 0.08103854, 0.06050779, 0.05633022,
       0.08222127, 0.09689578, 0.05633022, 0.08442939, 0.08945506,
       0.09611118, 0.08147537, 0.08147537, 0.08222127, 0.09830219,
       0.11061924, 0.0301441 , 0.04089223, 0.04089223, 0.04089223,
       0.04089223, 0.08735568, 0.10515584, 0.04089223, 0.04089223,
       0.10197249, 0.04089223, 0.04089223, 0.04089223, 0.04089223,
       0.04089223, 0.09329368, 0.04089223, 0.04089223, 0.04089223]), 'rank_test_score': array([38, 32, 44, 36, 34, 43, 34, 33, 41, 47, 49, 30, 50, 20, 29, 40, 25,
       27, 19, 22, 15, 45, 22, 26, 20, 42, 17, 17, 15, 37, 48, 24,  1,  1,
        1,  1, 28, 46,  1,  1, 39,  1,  1,  1,  1,  1, 30,  1,  1,  1],
      dtype=int32)}
-2.1207888327265496
OrderedDict([('leaf_size', 3), ('n_neighbors', 9), ('p', 1)])
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=87, n_neighbors=8, p=1;, score=-2.007 total time=   0.4s
[CV 2/3] END .leaf_size=87, n_neighbors=8, p=1;, score=-2.150 total time=   0.2s
[CV 3/3] END .leaf_size=87, n_neighbors=8, p=1;, score=-2.164 total time=   0.2s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=94, n_neighbors=17, p=1;, score=-1.942 total time=   0.2s
[CV 2/3] END leaf_size=94, n_neighbors=17, p=1;, score=-2.150 total time=   0.2s
[CV 3/3] END leaf_size=94, n_neighbors=17, p=1;, score=-2.051 total time=   0.2s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=93, n_neighbors=40, p=1;, score=-1.949 total time=   0.2s
[CV 2/3] END leaf_size=93, n_neighbors=40, p=1;, score=-2.189 total time=   0.2s
[CV 3/3] END leaf_size=93, n_neighbors=40, p=1;, score=-2.070 total time=   0.2s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=85, n_neighbors=15, p=2;, score=-2.071 total time=   0.1s
[CV 2/3] END leaf_size=85, n_neighbors=15, p=2;, score=-2.262 total time=   0.0s
[CV 3/3] END leaf_size=85, n_neighbors=15, p=2;, score=-2.208 total time=   0.1s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=39, n_neighbors=41, p=1;, score=-1.950 total time=   0.3s
[CV 2/3] END leaf_size=39, n_neighbors=41, p=1;, score=-2.195 total time=   0.3s
[CV 3/3] END leaf_size=39, n_neighbors=41, p=1;, score=-2.071 total time=   0.3s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=38, n_neighbors=47, p=1;, score=-1.966 total time=   0.3s
[CV 2/3] END leaf_size=38, n_neighbors=47, p=1;, score=-2.204 total time=   0.3s
[CV 3/3] END leaf_size=38, n_neighbors=47, p=1;, score=-2.088 total time=   0.3s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=94, n_neighbors=12, p=2;, score=-2.079 total time=   0.1s
[CV 2/3] END leaf_size=94, n_neighbors=12, p=2;, score=-2.265 total time=   0.1s
[CV 3/3] END leaf_size=94, n_neighbors=12, p=2;, score=-2.186 total time=   0.1s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=27, n_neighbors=10, p=2;, score=-2.089 total time=   0.1s
[CV 2/3] END leaf_size=27, n_neighbors=10, p=2;, score=-2.247 total time=   0.1s
[CV 3/3] END leaf_size=27, n_neighbors=10, p=2;, score=-2.183 total time=   0.1s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=46, n_neighbors=28, p=2;, score=-2.068 total time=   0.1s
[CV 2/3] END leaf_size=46, n_neighbors=28, p=2;, score=-2.315 total time=   0.1s
[CV 3/3] END leaf_size=46, n_neighbors=28, p=2;, score=-2.189 total time=   0.1s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=80, n_neighbors=28, p=1;, score=-1.923 total time=   0.3s
[CV 2/3] END leaf_size=80, n_neighbors=28, p=1;, score=-2.164 total time=   0.3s
[CV 3/3] END leaf_size=80, n_neighbors=28, p=1;, score=-2.052 total time=   0.3s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=100, n_neighbors=22, p=1;, score=-1.932 total time=   0.3s
[CV 2/3] END leaf_size=100, n_neighbors=22, p=1;, score=-2.159 total time=   0.3s
[CV 3/3] END leaf_size=100, n_neighbors=22, p=1;, score=-2.056 total time=   0.3s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=4, n_neighbors=50, p=2;, score=-2.086 total time=   0.2s
[CV 2/3] END .leaf_size=4, n_neighbors=50, p=2;, score=-2.332 total time=   0.1s
[CV 3/3] END .leaf_size=4, n_neighbors=50, p=2;, score=-2.214 total time=   0.1s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=3, n_neighbors=32, p=1;, score=-1.934 total time=   0.3s
[CV 2/3] END .leaf_size=3, n_neighbors=32, p=1;, score=-2.180 total time=   0.3s
[CV 3/3] END .leaf_size=3, n_neighbors=32, p=1;, score=-2.055 total time=   0.3s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=3, n_neighbors=23, p=1;, score=-1.929 total time=   0.3s
[CV 2/3] END .leaf_size=3, n_neighbors=23, p=1;, score=-2.151 total time=   0.3s
[CV 3/3] END .leaf_size=3, n_neighbors=23, p=1;, score=-2.053 total time=   0.3s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=3, n_neighbors=20, p=1;, score=-1.949 total time=   0.3s
[CV 2/3] END .leaf_size=3, n_neighbors=20, p=1;, score=-2.157 total time=   0.3s
[CV 3/3] END .leaf_size=3, n_neighbors=20, p=1;, score=-2.053 total time=   0.3s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=100, n_neighbors=25, p=1;, score=-1.921 total time=   0.3s
[CV 2/3] END leaf_size=100, n_neighbors=25, p=1;, score=-2.165 total time=   0.3s
[CV 3/3] END leaf_size=100, n_neighbors=25, p=1;, score=-2.050 total time=   0.3s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=100, n_neighbors=26, p=1;, score=-1.915 total time=   0.3s
[CV 2/3] END leaf_size=100, n_neighbors=26, p=1;, score=-2.171 total time=   0.3s
[CV 3/3] END leaf_size=100, n_neighbors=26, p=1;, score=-2.057 total time=   0.3s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=3, n_neighbors=24, p=1;, score=-1.922 total time=   0.3s
[CV 2/3] END .leaf_size=3, n_neighbors=24, p=1;, score=-2.157 total time=   0.3s
[CV 3/3] END .leaf_size=3, n_neighbors=24, p=1;, score=-2.047 total time=   0.3s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=99, n_neighbors=20, p=1;, score=-1.949 total time=   0.3s
[CV 2/3] END leaf_size=99, n_neighbors=20, p=1;, score=-2.157 total time=   0.3s
[CV 3/3] END leaf_size=99, n_neighbors=20, p=1;, score=-2.053 total time=   0.3s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=4, n_neighbors=28, p=1;, score=-1.923 total time=   0.3s
[CV 2/3] END .leaf_size=4, n_neighbors=28, p=1;, score=-2.164 total time=   0.3s
[CV 3/3] END .leaf_size=4, n_neighbors=28, p=1;, score=-2.052 total time=   0.3s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=3, n_neighbors=14, p=1;, score=-1.954 total time=   0.3s
[CV 2/3] END .leaf_size=3, n_neighbors=14, p=1;, score=-2.139 total time=   0.3s
[CV 3/3] END .leaf_size=3, n_neighbors=14, p=1;, score=-2.082 total time=   0.3s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END ..leaf_size=3, n_neighbors=3, p=1;, score=-2.160 total time=   0.3s
[CV 2/3] END ..leaf_size=3, n_neighbors=3, p=1;, score=-2.332 total time=   0.3s
[CV 3/3] END ..leaf_size=3, n_neighbors=3, p=1;, score=-2.238 total time=   0.3s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=99, n_neighbors=39, p=2;, score=-2.072 total time=   0.2s
[CV 2/3] END leaf_size=99, n_neighbors=39, p=2;, score=-2.315 total time=   0.1s
[CV 3/3] END leaf_size=99, n_neighbors=39, p=2;, score=-2.201 total time=   0.1s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=100, n_neighbors=24, p=1;, score=-1.922 total time=   0.3s
[CV 2/3] END leaf_size=100, n_neighbors=24, p=1;, score=-2.157 total time=   0.3s
[CV 3/3] END leaf_size=100, n_neighbors=24, p=1;, score=-2.047 total time=   0.3s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=99, n_neighbors=3, p=2;, score=-2.274 total time=   0.2s
[CV 2/3] END .leaf_size=99, n_neighbors=3, p=2;, score=-2.424 total time=   0.1s
[CV 3/3] END .leaf_size=99, n_neighbors=3, p=2;, score=-2.382 total time=   0.1s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=100, n_neighbors=30, p=1;, score=-1.933 total time=   0.3s
[CV 2/3] END leaf_size=100, n_neighbors=30, p=1;, score=-2.179 total time=   0.3s
[CV 3/3] END leaf_size=100, n_neighbors=30, p=1;, score=-2.053 total time=   0.3s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=4, n_neighbors=50, p=1;, score=-1.968 total time=   0.3s
[CV 2/3] END .leaf_size=4, n_neighbors=50, p=1;, score=-2.213 total time=   0.3s
[CV 3/3] END .leaf_size=4, n_neighbors=50, p=1;, score=-2.087 total time=   0.3s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=3, n_neighbors=36, p=1;, score=-1.947 total time=   0.3s
[CV 2/3] END .leaf_size=3, n_neighbors=36, p=1;, score=-2.184 total time=   0.3s
[CV 3/3] END .leaf_size=3, n_neighbors=36, p=1;, score=-2.060 total time=   0.3s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=6, n_neighbors=23, p=1;, score=-1.929 total time=   0.3s
[CV 2/3] END .leaf_size=6, n_neighbors=23, p=1;, score=-2.151 total time=   0.3s
[CV 3/3] END .leaf_size=6, n_neighbors=23, p=1;, score=-2.053 total time=   0.3s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=100, n_neighbors=24, p=1;, score=-1.922 total time=   0.3s
[CV 2/3] END leaf_size=100, n_neighbors=24, p=1;, score=-2.157 total time=   0.3s
[CV 3/3] END leaf_size=100, n_neighbors=24, p=1;, score=-2.047 total time=   0.3s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=3, n_neighbors=24, p=1;, score=-1.922 total time=   0.3s
[CV 2/3] END .leaf_size=3, n_neighbors=24, p=1;, score=-2.157 total time=   0.3s
[CV 3/3] END .leaf_size=3, n_neighbors=24, p=1;, score=-2.047 total time=   0.3s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=100, n_neighbors=24, p=1;, score=-1.922 total time=   0.3s
[CV 2/3] END leaf_size=100, n_neighbors=24, p=1;, score=-2.157 total time=   0.3s
[CV 3/3] END leaf_size=100, n_neighbors=24, p=1;, score=-2.047 total time=   0.3s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=4, n_neighbors=22, p=2;, score=-2.051 total time=   0.1s
[CV 2/3] END .leaf_size=4, n_neighbors=22, p=2;, score=-2.304 total time=   0.1s
[CV 3/3] END .leaf_size=4, n_neighbors=22, p=2;, score=-2.187 total time=   0.1s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=3, n_neighbors=24, p=1;, score=-1.922 total time=   0.3s
[CV 2/3] END .leaf_size=3, n_neighbors=24, p=1;, score=-2.157 total time=   0.3s
[CV 3/3] END .leaf_size=3, n_neighbors=24, p=1;, score=-2.047 total time=   0.3s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=100, n_neighbors=24, p=1;, score=-1.922 total time=   0.3s
[CV 2/3] END leaf_size=100, n_neighbors=24, p=1;, score=-2.157 total time=   0.3s
[CV 3/3] END leaf_size=100, n_neighbors=24, p=1;, score=-2.047 total time=   0.3s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=100, n_neighbors=11, p=1;, score=-1.968 total time=   0.3s
[CV 2/3] END leaf_size=100, n_neighbors=11, p=1;, score=-2.148 total time=   0.3s
[CV 3/3] END leaf_size=100, n_neighbors=11, p=1;, score=-2.102 total time=   0.3s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=3, n_neighbors=24, p=1;, score=-1.922 total time=   0.3s
[CV 2/3] END .leaf_size=3, n_neighbors=24, p=1;, score=-2.157 total time=   0.3s
[CV 3/3] END .leaf_size=3, n_neighbors=24, p=1;, score=-2.047 total time=   0.3s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=100, n_neighbors=24, p=1;, score=-1.922 total time=   0.3s
[CV 2/3] END leaf_size=100, n_neighbors=24, p=1;, score=-2.157 total time=   0.3s
[CV 3/3] END leaf_size=100, n_neighbors=24, p=1;, score=-2.047 total time=   0.3s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=4, n_neighbors=24, p=1;, score=-1.922 total time=   0.3s
[CV 2/3] END .leaf_size=4, n_neighbors=24, p=1;, score=-2.157 total time=   0.3s
[CV 3/3] END .leaf_size=4, n_neighbors=24, p=1;, score=-2.047 total time=   0.3s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=5, n_neighbors=34, p=2;, score=-2.064 total time=   0.1s
[CV 2/3] END .leaf_size=5, n_neighbors=34, p=2;, score=-2.310 total time=   0.1s
[CV 3/3] END .leaf_size=5, n_neighbors=34, p=2;, score=-2.198 total time=   0.1s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=4, n_neighbors=45, p=2;, score=-2.067 total time=   0.1s
[CV 2/3] END .leaf_size=4, n_neighbors=45, p=2;, score=-2.332 total time=   0.1s
[CV 3/3] END .leaf_size=4, n_neighbors=45, p=2;, score=-2.215 total time=   0.1s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=100, n_neighbors=44, p=1;, score=-1.961 total time=   0.3s
[CV 2/3] END leaf_size=100, n_neighbors=44, p=1;, score=-2.207 total time=   0.3s
[CV 3/3] END leaf_size=100, n_neighbors=44, p=1;, score=-2.085 total time=   0.3s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=100, n_neighbors=24, p=1;, score=-1.922 total time=   0.3s
[CV 2/3] END leaf_size=100, n_neighbors=24, p=1;, score=-2.157 total time=   0.3s
[CV 3/3] END leaf_size=100, n_neighbors=24, p=1;, score=-2.047 total time=   0.3s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=5, n_neighbors=24, p=1;, score=-1.922 total time=   0.3s
[CV 2/3] END .leaf_size=5, n_neighbors=24, p=1;, score=-2.157 total time=   0.3s
[CV 3/3] END .leaf_size=5, n_neighbors=24, p=1;, score=-2.047 total time=   0.3s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=100, n_neighbors=24, p=1;, score=-1.922 total time=   0.3s
[CV 2/3] END leaf_size=100, n_neighbors=24, p=1;, score=-2.157 total time=   0.3s
[CV 3/3] END leaf_size=100, n_neighbors=24, p=1;, score=-2.047 total time=   0.3s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=3, n_neighbors=24, p=1;, score=-1.922 total time=   0.3s
[CV 2/3] END .leaf_size=3, n_neighbors=24, p=1;, score=-2.157 total time=   0.3s
[CV 3/3] END .leaf_size=3, n_neighbors=24, p=1;, score=-2.047 total time=   0.3s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=99, n_neighbors=24, p=1;, score=-1.922 total time=   0.3s
[CV 2/3] END leaf_size=99, n_neighbors=24, p=1;, score=-2.157 total time=   0.3s
[CV 3/3] END leaf_size=99, n_neighbors=24, p=1;, score=-2.047 total time=   0.3s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=4, n_neighbors=24, p=1;, score=-1.922 total time=   0.3s
[CV 2/3] END .leaf_size=4, n_neighbors=24, p=1;, score=-2.157 total time=   0.3s
[CV 3/3] END .leaf_size=4, n_neighbors=24, p=1;, score=-2.047 total time=   0.3s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=100, n_neighbors=24, p=1;, score=-1.922 total time=   0.3s
[CV 2/3] END leaf_size=100, n_neighbors=24, p=1;, score=-2.157 total time=   0.3s
[CV 3/3] END leaf_size=100, n_neighbors=24, p=1;, score=-2.047 total time=   0.3s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=3, n_neighbors=24, p=1;, score=-1.922 total time=   0.3s
[CV 2/3] END .leaf_size=3, n_neighbors=24, p=1;, score=-2.157 total time=   0.3s
[CV 3/3] END .leaf_size=3, n_neighbors=24, p=1;, score=-2.047 total time=   0.3s
{'mean_fit_time': array([0.00669916, 0.00813429, 0.00513546, 0.006663  , 0.00784771,
       0.00820335, 0.00810202, 0.00836364, 0.00817418, 0.00784731,
       0.00740806, 0.00749882, 0.00663288, 0.00641847, 0.00549102,
       0.00687496, 0.00734345, 0.0057315 , 0.00616002, 0.00594767,
       0.00626175, 0.00698415, 0.0079693 , 0.0075655 , 0.00839257,
       0.00739972, 0.00737913, 0.00737127, 0.00724117, 0.00704877,
       0.00774034, 0.00682282, 0.00761986, 0.00754603, 0.00712514,
       0.00765761, 0.00766214, 0.00721661, 0.00756884, 0.00720787,
       0.0065283 , 0.00719635, 0.00716631, 0.00715876, 0.00715526,
       0.0071977 , 0.0062027 , 0.00677021, 0.00556771, 0.00557216]), 'std_fit_time': array([1.98401169e-03, 7.09466215e-04, 1.44426481e-05, 1.43472382e-03,
       4.80561822e-04, 3.37443316e-04, 2.17317223e-05, 1.24027220e-04,
       1.13094543e-04, 3.43050672e-04, 1.44190139e-05, 4.01707941e-04,
       1.27369760e-03, 1.17965197e-03, 2.53867613e-04, 1.33764958e-03,
       1.04978427e-03, 1.66341954e-04, 5.57692841e-04, 2.39134139e-04,
       3.97780391e-04, 9.99514539e-04, 6.61365756e-04, 3.25013235e-04,
       1.56786035e-04, 2.64574902e-04, 2.71484430e-04, 9.99765840e-04,
       2.78051357e-04, 1.33777445e-03, 6.23678041e-04, 1.45355822e-03,
       8.22347189e-04, 5.99897827e-04, 4.70736861e-04, 8.92401481e-04,
       9.04269117e-04, 6.02964132e-04, 8.39380523e-04, 8.22277049e-04,
       1.70936575e-03, 6.43257872e-04, 6.68853408e-04, 6.48049972e-04,
       6.20500383e-04, 6.61694514e-04, 9.78745022e-04, 1.69877983e-03,
       8.31609708e-04, 8.04073915e-04]), 'mean_score_time': array([0.26680048, 0.21350702, 0.21268574, 0.07682141, 0.26190066,
       0.26241151, 0.11964679, 0.11900496, 0.12095817, 0.26514014,
       0.26601696, 0.13381577, 0.27207955, 0.27368482, 0.26741989,
       0.27411461, 0.2747407 , 0.2729067 , 0.27459915, 0.26087443,
       0.27110847, 0.25868265, 0.14034033, 0.27202717, 0.13624644,
       0.26907452, 0.26796182, 0.26951249, 0.27301733, 0.26106048,
       0.26396505, 0.27252062, 0.10353684, 0.27017983, 0.27045234,
       0.25991702, 0.2786781 , 0.26353184, 0.26961366, 0.12154198,
       0.11451006, 0.26910416, 0.26808381, 0.26870147, 0.26977038,
       0.26911163, 0.27622279, 0.26233109, 0.26423844, 0.26914263]), 'std_score_time': array([0.07974825, 0.00345437, 0.00080734, 0.0315376 , 0.00062533,
       0.00073264, 0.00097743, 0.00169885, 0.00028654, 0.0055041 ,
       0.00719984, 0.022035  , 0.01697445, 0.0194952 , 0.01008306,
       0.01911592, 0.02023954, 0.01785375, 0.02149076, 0.00605778,
       0.01692631, 0.00039741, 0.02616427, 0.01837639, 0.02307174,
       0.01454014, 0.00891628, 0.01174292, 0.01641356, 0.00112311,
       0.00218263, 0.01485325, 0.02427078, 0.01210372, 0.01226899,
       0.00057367, 0.02361553, 0.00385578, 0.01276357, 0.00181901,
       0.00686586, 0.01364892, 0.01397118, 0.01383839, 0.01363018,
       0.0132979 , 0.02149032, 0.00120178, 0.00289814, 0.012192  ]), 'param_leaf_size': masked_array(data=[87, 94, 93, 85, 39, 38, 94, 27, 46, 80, 100, 4, 3, 3,
                   3, 100, 100, 3, 99, 4, 3, 3, 99, 100, 99, 100, 4, 3, 6,
                   100, 3, 100, 4, 3, 100, 100, 3, 100, 4, 5, 4, 100, 100,
                   5, 100, 3, 99, 4, 100, 3],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False],
       fill_value='?',
            dtype=object), 'param_n_neighbors': masked_array(data=[8, 17, 40, 15, 41, 47, 12, 10, 28, 28, 22, 50, 32, 23,
                   20, 25, 26, 24, 20, 28, 14, 3, 39, 24, 3, 30, 50, 36,
                   23, 24, 24, 24, 22, 24, 24, 11, 24, 24, 24, 34, 45, 44,
                   24, 24, 24, 24, 24, 24, 24, 24],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False],
       fill_value='?',
            dtype=object), 'param_p': masked_array(data=[1, 1, 1, 2, 1, 1, 2, 2, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1,
                   1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1,
                   1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False],
       fill_value='?',
            dtype=object), 'params': [OrderedDict([('leaf_size', 87), ('n_neighbors', 8), ('p', 1)]), OrderedDict([('leaf_size', 94), ('n_neighbors', 17), ('p', 1)]), OrderedDict([('leaf_size', 93), ('n_neighbors', 40), ('p', 1)]), OrderedDict([('leaf_size', 85), ('n_neighbors', 15), ('p', 2)]), OrderedDict([('leaf_size', 39), ('n_neighbors', 41), ('p', 1)]), OrderedDict([('leaf_size', 38), ('n_neighbors', 47), ('p', 1)]), OrderedDict([('leaf_size', 94), ('n_neighbors', 12), ('p', 2)]), OrderedDict([('leaf_size', 27), ('n_neighbors', 10), ('p', 2)]), OrderedDict([('leaf_size', 46), ('n_neighbors', 28), ('p', 2)]), OrderedDict([('leaf_size', 80), ('n_neighbors', 28), ('p', 1)]), OrderedDict([('leaf_size', 100), ('n_neighbors', 22), ('p', 1)]), OrderedDict([('leaf_size', 4), ('n_neighbors', 50), ('p', 2)]), OrderedDict([('leaf_size', 3), ('n_neighbors', 32), ('p', 1)]), OrderedDict([('leaf_size', 3), ('n_neighbors', 23), ('p', 1)]), OrderedDict([('leaf_size', 3), ('n_neighbors', 20), ('p', 1)]), OrderedDict([('leaf_size', 100), ('n_neighbors', 25), ('p', 1)]), OrderedDict([('leaf_size', 100), ('n_neighbors', 26), ('p', 1)]), OrderedDict([('leaf_size', 3), ('n_neighbors', 24), ('p', 1)]), OrderedDict([('leaf_size', 99), ('n_neighbors', 20), ('p', 1)]), OrderedDict([('leaf_size', 4), ('n_neighbors', 28), ('p', 1)]), OrderedDict([('leaf_size', 3), ('n_neighbors', 14), ('p', 1)]), OrderedDict([('leaf_size', 3), ('n_neighbors', 3), ('p', 1)]), OrderedDict([('leaf_size', 99), ('n_neighbors', 39), ('p', 2)]), OrderedDict([('leaf_size', 100), ('n_neighbors', 24), ('p', 1)]), OrderedDict([('leaf_size', 99), ('n_neighbors', 3), ('p', 2)]), OrderedDict([('leaf_size', 100), ('n_neighbors', 30), ('p', 1)]), OrderedDict([('leaf_size', 4), ('n_neighbors', 50), ('p', 1)]), OrderedDict([('leaf_size', 3), ('n_neighbors', 36), ('p', 1)]), OrderedDict([('leaf_size', 6), ('n_neighbors', 23), ('p', 1)]), OrderedDict([('leaf_size', 100), ('n_neighbors', 24), ('p', 1)]), OrderedDict([('leaf_size', 3), ('n_neighbors', 24), ('p', 1)]), OrderedDict([('leaf_size', 100), ('n_neighbors', 24), ('p', 1)]), OrderedDict([('leaf_size', 4), ('n_neighbors', 22), ('p', 2)]), OrderedDict([('leaf_size', 3), ('n_neighbors', 24), ('p', 1)]), OrderedDict([('leaf_size', 100), ('n_neighbors', 24), ('p', 1)]), OrderedDict([('leaf_size', 100), ('n_neighbors', 11), ('p', 1)]), OrderedDict([('leaf_size', 3), ('n_neighbors', 24), ('p', 1)]), OrderedDict([('leaf_size', 100), ('n_neighbors', 24), ('p', 1)]), OrderedDict([('leaf_size', 4), ('n_neighbors', 24), ('p', 1)]), OrderedDict([('leaf_size', 5), ('n_neighbors', 34), ('p', 2)]), OrderedDict([('leaf_size', 4), ('n_neighbors', 45), ('p', 2)]), OrderedDict([('leaf_size', 100), ('n_neighbors', 44), ('p', 1)]), OrderedDict([('leaf_size', 100), ('n_neighbors', 24), ('p', 1)]), OrderedDict([('leaf_size', 5), ('n_neighbors', 24), ('p', 1)]), OrderedDict([('leaf_size', 100), ('n_neighbors', 24), ('p', 1)]), OrderedDict([('leaf_size', 3), ('n_neighbors', 24), ('p', 1)]), OrderedDict([('leaf_size', 99), ('n_neighbors', 24), ('p', 1)]), OrderedDict([('leaf_size', 4), ('n_neighbors', 24), ('p', 1)]), OrderedDict([('leaf_size', 100), ('n_neighbors', 24), ('p', 1)]), OrderedDict([('leaf_size', 3), ('n_neighbors', 24), ('p', 1)])], 'split0_test_score': array([-2.0074106 , -1.9415212 , -1.94889296, -2.07072293, -1.94972821,
       -1.96631489, -2.07875119, -2.08859182, -2.06789426, -1.92307619,
       -1.93189971, -2.08573385, -1.9337457 , -1.92929082, -1.9494528 ,
       -1.92096724, -1.91534037, -1.92230814, -1.9494528 , -1.92307619,
       -1.95447008, -2.1601186 , -2.07173618, -1.92230814, -2.27442274,
       -1.93262934, -1.96814116, -1.94744276, -1.92929082, -1.92230814,
       -1.92230814, -1.92230814, -2.05114836, -1.92230814, -1.92230814,
       -1.96842321, -1.92230814, -1.92230814, -1.92230814, -2.06424924,
       -2.06722541, -1.96066747, -1.92230814, -1.92230814, -1.92230814,
       -1.92230814, -1.92230814, -1.92230814, -1.92230814, -1.92230814]), 'split1_test_score': array([-2.14967025, -2.14978532, -2.18878962, -2.2622889 , -2.19540579,
       -2.20425247, -2.26500403, -2.24693234, -2.31492713, -2.1635578 ,
       -2.15883099, -2.33227805, -2.18001301, -2.15077624, -2.15732225,
       -2.16478612, -2.17106706, -2.15692126, -2.15732225, -2.1635578 ,
       -2.13921613, -2.33158392, -2.31495668, -2.15692126, -2.42390919,
       -2.17922981, -2.21291892, -2.1844191 , -2.15077624, -2.15692126,
       -2.15692126, -2.15692126, -2.30441277, -2.15692126, -2.15692126,
       -2.14793815, -2.15692126, -2.15692126, -2.15692126, -2.30968478,
       -2.33215383, -2.20692889, -2.15692126, -2.15692126, -2.15692126,
       -2.15692126, -2.15692126, -2.15692126, -2.15692126, -2.15692126]), 'split2_test_score': array([-2.16442596, -2.05086959, -2.07016969, -2.20800848, -2.07091252,
       -2.088075  , -2.18583367, -2.18296172, -2.18864665, -2.05244566,
       -2.05559324, -2.21401388, -2.05461057, -2.05320319, -2.05267546,
       -2.05028664, -2.05672728, -2.04724466, -2.05267546, -2.05244566,
       -2.08151374, -2.23805518, -2.20116453, -2.04724466, -2.38182765,
       -2.0531983 , -2.0865422 , -2.05975834, -2.05320319, -2.04724466,
       -2.04724466, -2.04724466, -2.18659397, -2.04724466, -2.04724466,
       -2.10177694, -2.04724466, -2.04724466, -2.04724466, -2.19833259,
       -2.21491969, -2.08511052, -2.04724466, -2.04724466, -2.04724466,
       -2.04724466, -2.04724466, -2.04724466, -2.04724466, -2.04724466]), 'mean_test_score': array([-2.10716894, -2.04739204, -2.06928409, -2.1803401 , -2.07201551,
       -2.08621412, -2.17652963, -2.17282863, -2.19048934, -2.04635988,
       -2.04877465, -2.21067526, -2.05612309, -2.04442342, -2.05315017,
       -2.04534667, -2.04771157, -2.04215802, -2.05315017, -2.04635988,
       -2.05839998, -2.24325257, -2.19595246, -2.04215802, -2.3600532 ,
       -2.05501915, -2.08920076, -2.0638734 , -2.04442342, -2.04215802,
       -2.04215802, -2.04215802, -2.18071837, -2.04215802, -2.04215802,
       -2.07271277, -2.04215802, -2.04215802, -2.04215802, -2.19075554,
       -2.20476631, -2.08423563, -2.04215802, -2.04215802, -2.04215802,
       -2.04215802, -2.04215802, -2.04215802, -2.04215802, -2.04215802]), 'std_test_score': array([0.07079655, 0.08505902, 0.0979394 , 0.08061652, 0.10030048,
       0.09714652, 0.07632149, 0.06503814, 0.10085916, 0.09827047,
       0.09276969, 0.10067893, 0.1005439 , 0.09063392, 0.08486301,
       0.09959991, 0.10459445, 0.09584791, 0.08486301, 0.09827047,
       0.07717279, 0.07009683, 0.09936273, 0.09584791, 0.06293989,
       0.10068245, 0.09994779, 0.09678893, 0.09063392, 0.09584791,
       0.09584791, 0.09584791, 0.1034782 , 0.09584791, 0.09584791,
       0.07611372, 0.09584791, 0.09584791, 0.09584791, 0.10034178,
       0.1083946 , 0.10053771, 0.09584791, 0.09584791, 0.09584791,
       0.09584791, 0.09584791, 0.09584791, 0.09584791, 0.09584791]), 'rank_test_score': array([39, 24, 33, 42, 34, 37, 41, 40, 44, 22, 26, 48, 30, 19, 27, 21, 25,
        1, 27, 22, 31, 49, 46,  1, 50, 29, 38, 32, 19,  1,  1,  1, 43,  1,
        1, 35,  1,  1,  1, 45, 47, 36,  1,  1,  1,  1,  1,  1,  1,  1],
      dtype=int32)}
-2.042158020149845
OrderedDict([('leaf_size', 3), ('n_neighbors', 24), ('p', 1)])
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=50, n_neighbors=15, p=1;, score=-1.896 total time=   3.2s
[CV 2/3] END leaf_size=50, n_neighbors=15, p=1;, score=-2.103 total time=   2.9s
[CV 3/3] END leaf_size=50, n_neighbors=15, p=1;, score=-2.026 total time=   3.2s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=57, n_neighbors=30, p=1;, score=-1.901 total time=   3.2s
[CV 2/3] END leaf_size=57, n_neighbors=30, p=1;, score=-2.139 total time=   3.2s
[CV 3/3] END leaf_size=57, n_neighbors=30, p=1;, score=-2.020 total time=   2.9s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=24, n_neighbors=5, p=2;, score=-2.000 total time=   0.5s
[CV 2/3] END .leaf_size=24, n_neighbors=5, p=2;, score=-2.292 total time=   0.5s
[CV 3/3] END .leaf_size=24, n_neighbors=5, p=2;, score=-2.129 total time=   0.5s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=29, n_neighbors=14, p=1;, score=-1.901 total time=   3.3s
[CV 2/3] END leaf_size=29, n_neighbors=14, p=1;, score=-2.102 total time=   3.3s
[CV 3/3] END leaf_size=29, n_neighbors=14, p=1;, score=-2.032 total time=   3.5s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=18, n_neighbors=26, p=2;, score=-1.993 total time=   0.5s
[CV 2/3] END leaf_size=18, n_neighbors=26, p=2;, score=-2.216 total time=   0.5s
[CV 3/3] END leaf_size=18, n_neighbors=26, p=2;, score=-2.131 total time=   0.6s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=59, n_neighbors=49, p=1;, score=-1.952 total time=   3.2s
[CV 2/3] END leaf_size=59, n_neighbors=49, p=1;, score=-2.173 total time=   3.1s
[CV 3/3] END leaf_size=59, n_neighbors=49, p=1;, score=-2.093 total time=   3.4s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=8, n_neighbors=16, p=2;, score=-1.956 total time=   0.5s
[CV 2/3] END .leaf_size=8, n_neighbors=16, p=2;, score=-2.193 total time=   0.5s
[CV 3/3] END .leaf_size=8, n_neighbors=16, p=2;, score=-2.099 total time=   0.5s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=10, n_neighbors=29, p=2;, score=-2.008 total time=   0.5s
[CV 2/3] END leaf_size=10, n_neighbors=29, p=2;, score=-2.228 total time=   0.6s
[CV 3/3] END leaf_size=10, n_neighbors=29, p=2;, score=-2.156 total time=   0.5s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=65, n_neighbors=38, p=1;, score=-1.921 total time=   3.1s
[CV 2/3] END leaf_size=65, n_neighbors=38, p=1;, score=-2.175 total time=   3.0s
[CV 3/3] END leaf_size=65, n_neighbors=38, p=1;, score=-2.059 total time=   3.3s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=28, n_neighbors=42, p=1;, score=-1.926 total time=   3.4s
[CV 2/3] END leaf_size=28, n_neighbors=42, p=1;, score=-2.173 total time=   3.4s
[CV 3/3] END leaf_size=28, n_neighbors=42, p=1;, score=-2.066 total time=   3.4s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=22, n_neighbors=21, p=1;, score=-1.885 total time=   3.3s
[CV 2/3] END leaf_size=22, n_neighbors=21, p=1;, score=-2.096 total time=   3.3s
[CV 3/3] END leaf_size=22, n_neighbors=21, p=1;, score=-2.002 total time=   2.9s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=100, n_neighbors=3, p=1;, score=-2.035 total time=   3.0s
[CV 2/3] END leaf_size=100, n_neighbors=3, p=1;, score=-2.166 total time=   3.5s
[CV 3/3] END leaf_size=100, n_neighbors=3, p=1;, score=-2.178 total time=   3.0s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=3, n_neighbors=20, p=1;, score=-1.887 total time=   3.1s
[CV 2/3] END .leaf_size=3, n_neighbors=20, p=1;, score=-2.101 total time=   3.0s
[CV 3/3] END .leaf_size=3, n_neighbors=20, p=1;, score=-2.000 total time=   3.4s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=3, n_neighbors=24, p=1;, score=-1.901 total time=   3.4s
[CV 2/3] END .leaf_size=3, n_neighbors=24, p=1;, score=-2.094 total time=   3.0s
[CV 3/3] END .leaf_size=3, n_neighbors=24, p=1;, score=-1.998 total time=   3.4s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=100, n_neighbors=21, p=1;, score=-1.885 total time=   3.1s
[CV 2/3] END leaf_size=100, n_neighbors=21, p=1;, score=-2.096 total time=   3.3s
[CV 3/3] END leaf_size=100, n_neighbors=21, p=1;, score=-2.002 total time=   3.3s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=3, n_neighbors=22, p=1;, score=-1.886 total time=   3.2s
[CV 2/3] END .leaf_size=3, n_neighbors=22, p=1;, score=-2.096 total time=   3.3s
[CV 3/3] END .leaf_size=3, n_neighbors=22, p=1;, score=-1.994 total time=   3.0s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=8, n_neighbors=50, p=2;, score=-2.019 total time=   0.5s
[CV 2/3] END .leaf_size=8, n_neighbors=50, p=2;, score=-2.281 total time=   0.5s
[CV 3/3] END .leaf_size=8, n_neighbors=50, p=2;, score=-2.198 total time=   0.5s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=100, n_neighbors=21, p=1;, score=-1.885 total time=   3.1s
[CV 2/3] END leaf_size=100, n_neighbors=21, p=1;, score=-2.096 total time=   2.9s
[CV 3/3] END leaf_size=100, n_neighbors=21, p=1;, score=-2.002 total time=   3.1s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=97, n_neighbors=24, p=1;, score=-1.901 total time=   3.5s
[CV 2/3] END leaf_size=97, n_neighbors=24, p=1;, score=-2.094 total time=   3.3s
[CV 3/3] END leaf_size=97, n_neighbors=24, p=1;, score=-1.998 total time=   3.4s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=3, n_neighbors=21, p=1;, score=-1.885 total time=   3.4s
[CV 2/3] END .leaf_size=3, n_neighbors=21, p=1;, score=-2.096 total time=   3.4s
[CV 3/3] END .leaf_size=3, n_neighbors=21, p=1;, score=-2.002 total time=   3.4s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=100, n_neighbors=40, p=2;, score=-2.009 total time=   0.6s
[CV 2/3] END leaf_size=100, n_neighbors=40, p=2;, score=-2.239 total time=   0.5s
[CV 3/3] END leaf_size=100, n_neighbors=40, p=2;, score=-2.192 total time=   0.5s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=100, n_neighbors=22, p=1;, score=-1.886 total time=   3.1s
[CV 2/3] END leaf_size=100, n_neighbors=22, p=1;, score=-2.096 total time=   3.4s
[CV 3/3] END leaf_size=100, n_neighbors=22, p=1;, score=-1.994 total time=   3.1s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=3, n_neighbors=22, p=1;, score=-1.886 total time=   3.4s
[CV 2/3] END .leaf_size=3, n_neighbors=22, p=1;, score=-2.096 total time=   3.4s
[CV 3/3] END .leaf_size=3, n_neighbors=22, p=1;, score=-1.994 total time=   3.4s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=100, n_neighbors=22, p=1;, score=-1.886 total time=   2.9s
[CV 2/3] END leaf_size=100, n_neighbors=22, p=1;, score=-2.096 total time=   2.9s
[CV 3/3] END leaf_size=100, n_neighbors=22, p=1;, score=-1.994 total time=   3.4s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=4, n_neighbors=22, p=1;, score=-1.886 total time=   2.9s
[CV 2/3] END .leaf_size=4, n_neighbors=22, p=1;, score=-2.096 total time=   3.1s
[CV 3/3] END .leaf_size=4, n_neighbors=22, p=1;, score=-1.994 total time=   3.4s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=99, n_neighbors=9, p=1;, score=-1.881 total time=   2.9s
[CV 2/3] END .leaf_size=99, n_neighbors=9, p=1;, score=-2.086 total time=   2.9s
[CV 3/3] END .leaf_size=99, n_neighbors=9, p=1;, score=-2.083 total time=   3.1s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=100, n_neighbors=23, p=1;, score=-1.886 total time=   2.9s
[CV 2/3] END leaf_size=100, n_neighbors=23, p=1;, score=-2.089 total time=   3.4s
[CV 3/3] END leaf_size=100, n_neighbors=23, p=1;, score=-1.993 total time=   3.3s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=5, n_neighbors=33, p=1;, score=-1.909 total time=   2.9s
[CV 2/3] END .leaf_size=5, n_neighbors=33, p=1;, score=-2.148 total time=   3.0s
[CV 3/3] END .leaf_size=5, n_neighbors=33, p=1;, score=-2.032 total time=   2.9s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=3, n_neighbors=23, p=1;, score=-1.886 total time=   2.9s
[CV 2/3] END .leaf_size=3, n_neighbors=23, p=1;, score=-2.089 total time=   2.9s
[CV 3/3] END .leaf_size=3, n_neighbors=23, p=1;, score=-1.993 total time=   3.0s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=99, n_neighbors=11, p=2;, score=-1.962 total time=   0.5s
[CV 2/3] END leaf_size=99, n_neighbors=11, p=2;, score=-2.188 total time=   0.5s
[CV 3/3] END leaf_size=99, n_neighbors=11, p=2;, score=-2.110 total time=   0.6s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=100, n_neighbors=23, p=1;, score=-1.886 total time=   2.9s
[CV 2/3] END leaf_size=100, n_neighbors=23, p=1;, score=-2.089 total time=   3.3s
[CV 3/3] END leaf_size=100, n_neighbors=23, p=1;, score=-1.993 total time=   2.9s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=100, n_neighbors=11, p=1;, score=-1.895 total time=   3.4s
[CV 2/3] END leaf_size=100, n_neighbors=11, p=1;, score=-2.079 total time=   2.9s
[CV 3/3] END leaf_size=100, n_neighbors=11, p=1;, score=-2.052 total time=   2.9s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=100, n_neighbors=22, p=1;, score=-1.886 total time=   3.4s
[CV 2/3] END leaf_size=100, n_neighbors=22, p=1;, score=-2.096 total time=   3.4s
[CV 3/3] END leaf_size=100, n_neighbors=22, p=1;, score=-1.994 total time=   3.1s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=3, n_neighbors=23, p=1;, score=-1.886 total time=   3.1s
[CV 2/3] END .leaf_size=3, n_neighbors=23, p=1;, score=-2.089 total time=   3.4s
[CV 3/3] END .leaf_size=3, n_neighbors=23, p=1;, score=-1.993 total time=   3.4s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=4, n_neighbors=23, p=1;, score=-1.886 total time=   3.4s
[CV 2/3] END .leaf_size=4, n_neighbors=23, p=1;, score=-2.089 total time=   3.3s
[CV 3/3] END .leaf_size=4, n_neighbors=23, p=1;, score=-1.993 total time=   3.3s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=99, n_neighbors=21, p=2;, score=-1.970 total time=   0.5s
[CV 2/3] END leaf_size=99, n_neighbors=21, p=2;, score=-2.213 total time=   0.5s
[CV 3/3] END leaf_size=99, n_neighbors=21, p=2;, score=-2.130 total time=   0.5s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=100, n_neighbors=23, p=1;, score=-1.886 total time=   3.5s
[CV 2/3] END leaf_size=100, n_neighbors=23, p=1;, score=-2.089 total time=   3.3s
[CV 3/3] END leaf_size=100, n_neighbors=23, p=1;, score=-1.993 total time=   3.3s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=100, n_neighbors=23, p=1;, score=-1.886 total time=   3.1s
[CV 2/3] END leaf_size=100, n_neighbors=23, p=1;, score=-2.089 total time=   3.4s
[CV 3/3] END leaf_size=100, n_neighbors=23, p=1;, score=-1.993 total time=   3.4s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=3, n_neighbors=23, p=1;, score=-1.886 total time=   3.4s
[CV 2/3] END .leaf_size=3, n_neighbors=23, p=1;, score=-2.089 total time=   3.4s
[CV 3/3] END .leaf_size=3, n_neighbors=23, p=1;, score=-1.993 total time=   3.3s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=4, n_neighbors=23, p=1;, score=-1.886 total time=   3.4s
[CV 2/3] END .leaf_size=4, n_neighbors=23, p=1;, score=-2.089 total time=   3.0s
[CV 3/3] END .leaf_size=4, n_neighbors=23, p=1;, score=-1.993 total time=   2.9s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=100, n_neighbors=23, p=1;, score=-1.886 total time=   3.4s
[CV 2/3] END leaf_size=100, n_neighbors=23, p=1;, score=-2.089 total time=   3.0s
[CV 3/3] END leaf_size=100, n_neighbors=23, p=1;, score=-1.993 total time=   3.4s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=3, n_neighbors=23, p=1;, score=-1.886 total time=   3.4s
[CV 2/3] END .leaf_size=3, n_neighbors=23, p=1;, score=-2.089 total time=   3.4s
[CV 3/3] END .leaf_size=3, n_neighbors=23, p=1;, score=-1.993 total time=   3.6s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=99, n_neighbors=18, p=1;, score=-1.890 total time=   3.0s
[CV 2/3] END leaf_size=99, n_neighbors=18, p=1;, score=-2.091 total time=   3.0s
[CV 3/3] END leaf_size=99, n_neighbors=18, p=1;, score=-2.017 total time=   2.9s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=99, n_neighbors=46, p=1;, score=-1.937 total time=   3.0s
[CV 2/3] END leaf_size=99, n_neighbors=46, p=1;, score=-2.174 total time=   3.0s
[CV 3/3] END leaf_size=99, n_neighbors=46, p=1;, score=-2.082 total time=   3.3s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=99, n_neighbors=23, p=1;, score=-1.886 total time=   3.0s
[CV 2/3] END leaf_size=99, n_neighbors=23, p=1;, score=-2.089 total time=   3.0s
[CV 3/3] END leaf_size=99, n_neighbors=23, p=1;, score=-1.993 total time=   3.1s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=4, n_neighbors=35, p=2;, score=-2.005 total time=   0.5s
[CV 2/3] END .leaf_size=4, n_neighbors=35, p=2;, score=-2.229 total time=   0.5s
[CV 3/3] END .leaf_size=4, n_neighbors=35, p=2;, score=-2.174 total time=   0.5s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=3, n_neighbors=23, p=1;, score=-1.886 total time=   3.0s
[CV 2/3] END .leaf_size=3, n_neighbors=23, p=1;, score=-2.089 total time=   3.3s
[CV 3/3] END .leaf_size=3, n_neighbors=23, p=1;, score=-1.993 total time=   3.3s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=4, n_neighbors=27, p=1;, score=-1.906 total time=   2.9s
[CV 2/3] END .leaf_size=4, n_neighbors=27, p=1;, score=-2.122 total time=   3.4s
[CV 3/3] END .leaf_size=4, n_neighbors=27, p=1;, score=-1.999 total time=   3.4s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=99, n_neighbors=23, p=1;, score=-1.886 total time=   3.4s
[CV 2/3] END leaf_size=99, n_neighbors=23, p=1;, score=-2.089 total time=   3.4s
[CV 3/3] END leaf_size=99, n_neighbors=23, p=1;, score=-1.993 total time=   3.3s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=100, n_neighbors=23, p=1;, score=-1.886 total time=   3.1s
[CV 2/3] END leaf_size=100, n_neighbors=23, p=1;, score=-2.089 total time=   2.9s
[CV 3/3] END leaf_size=100, n_neighbors=23, p=1;, score=-1.993 total time=   3.0s
{'mean_fit_time': array([0.05717882, 0.05983075, 0.08029747, 0.06756465, 0.08410088,
       0.06673741, 0.08193652, 0.08862623, 0.06771231, 0.05845014,
       0.06046645, 0.06076169, 0.06425897, 0.06131482, 0.05751697,
       0.05669816, 0.07710497, 0.06965955, 0.08087055, 0.05942329,
       0.07940865, 0.08039745, 0.07174738, 0.05785894, 0.05759287,
       0.06275376, 0.06565936, 0.0567019 , 0.05624088, 0.07685558,
       0.06046343, 0.06118488, 0.06312482, 0.06433678, 0.06689739,
       0.08211581, 0.06717539, 0.07042233, 0.06609782, 0.06787984,
       0.06334527, 0.06405512, 0.05574139, 0.05970534, 0.05530508,
       0.07800039, 0.0725294 , 0.06331635, 0.07650105, 0.0648005 ]), 'std_fit_time': array([0.00613054, 0.00403341, 0.01733645, 0.01235118, 0.014935  ,
       0.01484414, 0.01572324, 0.00093108, 0.01681659, 0.00308685,
       0.00265159, 0.00908447, 0.00736873, 0.00471536, 0.00260748,
       0.00193326, 0.01515203, 0.01718317, 0.01414776, 0.00267572,
       0.01616271, 0.00386133, 0.00521579, 0.00524788, 0.00448935,
       0.00567057, 0.00803634, 0.00312329, 0.00193757, 0.01998061,
       0.00816643, 0.00447227, 0.00250281, 0.00763051, 0.00479343,
       0.01708918, 0.00811222, 0.0082317 , 0.00610263, 0.00377801,
       0.0105625 , 0.00254523, 0.00308616, 0.00617943, 0.00244515,
       0.01247136, 0.00868055, 0.00693658, 0.00867199, 0.00307153]), 'mean_score_time': array([3.05598839, 3.04944897, 0.41976841, 3.27148326, 0.44775454,
       3.16847682, 0.40546719, 0.46422696, 3.06241083, 3.34952943,
       3.14068882, 3.07772589, 3.09800593, 3.18756731, 3.18172558,
       3.11695019, 0.43130922, 2.96596607, 3.3335367 , 3.35188762,
       0.46855553, 3.13702893, 3.30098867, 3.01868924, 3.06095028,
       2.93693821, 3.1362404 , 2.91224511, 2.88023607, 0.44165651,
       2.99812452, 3.02955389, 3.2367115 , 3.23565014, 3.30760932,
       0.4364717 , 3.29173223, 3.23059336, 3.31918414, 3.0276653 ,
       3.19282269, 3.39456423, 2.90062165, 3.03942259, 2.97262367,
       0.4250017 , 3.1517508 , 3.15649199, 3.29487856, 2.94695036]), 'std_score_time': array([0.13508297, 0.13582433, 0.02166066, 0.09947392, 0.02917661,
       0.11940977, 0.03718621, 0.00741149, 0.13599595, 0.0061705 ,
       0.1905731 , 0.22536756, 0.15671493, 0.19930854, 0.12606477,
       0.14043433, 0.01786181, 0.07117482, 0.07516438, 0.00642384,
       0.02252684, 0.12797567, 0.01636306, 0.21842725, 0.18093383,
       0.09815003, 0.18696514, 0.03363244, 0.01024566, 0.02014676,
       0.15298173, 0.22298518, 0.1723721 , 0.15898284, 0.04809623,
       0.03222784, 0.09621301, 0.14217791, 0.05959802, 0.19898114,
       0.16690115, 0.07190089, 0.03485111, 0.1614397 , 0.0737807 ,
       0.00894936, 0.16804728, 0.18827215, 0.01032124, 0.07556881]), 'param_leaf_size': masked_array(data=[50, 57, 24, 29, 18, 59, 8, 10, 65, 28, 22, 100, 3, 3,
                   100, 3, 8, 100, 97, 3, 100, 100, 3, 100, 4, 99, 100, 5,
                   3, 99, 100, 100, 100, 3, 4, 99, 100, 100, 3, 4, 100, 3,
                   99, 99, 99, 4, 3, 4, 99, 100],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False],
       fill_value='?',
            dtype=object), 'param_n_neighbors': masked_array(data=[15, 30, 5, 14, 26, 49, 16, 29, 38, 42, 21, 3, 20, 24,
                   21, 22, 50, 21, 24, 21, 40, 22, 22, 22, 22, 9, 23, 33,
                   23, 11, 23, 11, 22, 23, 23, 21, 23, 23, 23, 23, 23, 23,
                   18, 46, 23, 35, 23, 27, 23, 23],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False],
       fill_value='?',
            dtype=object), 'param_p': masked_array(data=[1, 1, 2, 1, 2, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1,
                   1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2,
                   1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False],
       fill_value='?',
            dtype=object), 'params': [OrderedDict([('leaf_size', 50), ('n_neighbors', 15), ('p', 1)]), OrderedDict([('leaf_size', 57), ('n_neighbors', 30), ('p', 1)]), OrderedDict([('leaf_size', 24), ('n_neighbors', 5), ('p', 2)]), OrderedDict([('leaf_size', 29), ('n_neighbors', 14), ('p', 1)]), OrderedDict([('leaf_size', 18), ('n_neighbors', 26), ('p', 2)]), OrderedDict([('leaf_size', 59), ('n_neighbors', 49), ('p', 1)]), OrderedDict([('leaf_size', 8), ('n_neighbors', 16), ('p', 2)]), OrderedDict([('leaf_size', 10), ('n_neighbors', 29), ('p', 2)]), OrderedDict([('leaf_size', 65), ('n_neighbors', 38), ('p', 1)]), OrderedDict([('leaf_size', 28), ('n_neighbors', 42), ('p', 1)]), OrderedDict([('leaf_size', 22), ('n_neighbors', 21), ('p', 1)]), OrderedDict([('leaf_size', 100), ('n_neighbors', 3), ('p', 1)]), OrderedDict([('leaf_size', 3), ('n_neighbors', 20), ('p', 1)]), OrderedDict([('leaf_size', 3), ('n_neighbors', 24), ('p', 1)]), OrderedDict([('leaf_size', 100), ('n_neighbors', 21), ('p', 1)]), OrderedDict([('leaf_size', 3), ('n_neighbors', 22), ('p', 1)]), OrderedDict([('leaf_size', 8), ('n_neighbors', 50), ('p', 2)]), OrderedDict([('leaf_size', 100), ('n_neighbors', 21), ('p', 1)]), OrderedDict([('leaf_size', 97), ('n_neighbors', 24), ('p', 1)]), OrderedDict([('leaf_size', 3), ('n_neighbors', 21), ('p', 1)]), OrderedDict([('leaf_size', 100), ('n_neighbors', 40), ('p', 2)]), OrderedDict([('leaf_size', 100), ('n_neighbors', 22), ('p', 1)]), OrderedDict([('leaf_size', 3), ('n_neighbors', 22), ('p', 1)]), OrderedDict([('leaf_size', 100), ('n_neighbors', 22), ('p', 1)]), OrderedDict([('leaf_size', 4), ('n_neighbors', 22), ('p', 1)]), OrderedDict([('leaf_size', 99), ('n_neighbors', 9), ('p', 1)]), OrderedDict([('leaf_size', 100), ('n_neighbors', 23), ('p', 1)]), OrderedDict([('leaf_size', 5), ('n_neighbors', 33), ('p', 1)]), OrderedDict([('leaf_size', 3), ('n_neighbors', 23), ('p', 1)]), OrderedDict([('leaf_size', 99), ('n_neighbors', 11), ('p', 2)]), OrderedDict([('leaf_size', 100), ('n_neighbors', 23), ('p', 1)]), OrderedDict([('leaf_size', 100), ('n_neighbors', 11), ('p', 1)]), OrderedDict([('leaf_size', 100), ('n_neighbors', 22), ('p', 1)]), OrderedDict([('leaf_size', 3), ('n_neighbors', 23), ('p', 1)]), OrderedDict([('leaf_size', 4), ('n_neighbors', 23), ('p', 1)]), OrderedDict([('leaf_size', 99), ('n_neighbors', 21), ('p', 2)]), OrderedDict([('leaf_size', 100), ('n_neighbors', 23), ('p', 1)]), OrderedDict([('leaf_size', 100), ('n_neighbors', 23), ('p', 1)]), OrderedDict([('leaf_size', 3), ('n_neighbors', 23), ('p', 1)]), OrderedDict([('leaf_size', 4), ('n_neighbors', 23), ('p', 1)]), OrderedDict([('leaf_size', 100), ('n_neighbors', 23), ('p', 1)]), OrderedDict([('leaf_size', 3), ('n_neighbors', 23), ('p', 1)]), OrderedDict([('leaf_size', 99), ('n_neighbors', 18), ('p', 1)]), OrderedDict([('leaf_size', 99), ('n_neighbors', 46), ('p', 1)]), OrderedDict([('leaf_size', 99), ('n_neighbors', 23), ('p', 1)]), OrderedDict([('leaf_size', 4), ('n_neighbors', 35), ('p', 2)]), OrderedDict([('leaf_size', 3), ('n_neighbors', 23), ('p', 1)]), OrderedDict([('leaf_size', 4), ('n_neighbors', 27), ('p', 1)]), OrderedDict([('leaf_size', 99), ('n_neighbors', 23), ('p', 1)]), OrderedDict([('leaf_size', 100), ('n_neighbors', 23), ('p', 1)])], 'split0_test_score': array([-1.8964952 , -1.90067267, -1.99991938, -1.90142631, -1.99349622,
       -1.9524753 , -1.95567549, -2.00753589, -1.92140299, -1.92571758,
       -1.88490138, -2.03509618, -1.88700893, -1.90073828, -1.88490138,
       -1.88604726, -2.01904671, -1.88490138, -1.90073828, -1.88490138,
       -2.00946289, -1.88604726, -1.88604726, -1.88604726, -1.88604726,
       -1.88121563, -1.88602763, -1.90948243, -1.88602763, -1.96153497,
       -1.88602763, -1.89495951, -1.88604726, -1.88602763, -1.88602763,
       -1.9696335 , -1.88602763, -1.88602763, -1.88602763, -1.88602763,
       -1.88602763, -1.88602763, -1.89046902, -1.93723886, -1.88602763,
       -2.00473257, -1.88602763, -1.90602927, -1.88602763, -1.88602763]), 'split1_test_score': array([-2.10286077, -2.13948217, -2.29153006, -2.1015172 , -2.21552563,
       -2.17329144, -2.19273766, -2.22841838, -2.17547422, -2.17323178,
       -2.09587269, -2.16559666, -2.10061129, -2.09445466, -2.09587269,
       -2.09559241, -2.28127561, -2.09587269, -2.09445466, -2.09587269,
       -2.23917896, -2.09559241, -2.09559241, -2.09559241, -2.09559241,
       -2.08579691, -2.08916343, -2.1484144 , -2.08916343, -2.18776398,
       -2.08916343, -2.07869589, -2.09559241, -2.08916343, -2.08916343,
       -2.21290686, -2.08916343, -2.08916343, -2.08916343, -2.08916343,
       -2.08916343, -2.08916343, -2.09064529, -2.17448143, -2.08916343,
       -2.22931436, -2.08916343, -2.12222331, -2.08916343, -2.08916343]), 'split2_test_score': array([-2.02630837, -2.02020594, -2.12895396, -2.03153476, -2.13121487,
       -2.093314  , -2.09922832, -2.15617737, -2.05871868, -2.06589384,
       -2.00193816, -2.17777298, -1.99980613, -1.99814799, -2.00193816,
       -1.99435022, -2.19805002, -2.00193816, -1.99814799, -2.00193816,
       -2.19151226, -1.99435022, -1.99435022, -1.99435022, -1.99435022,
       -2.08286264, -1.99338218, -2.03166769, -1.99338218, -2.11037063,
       -1.99338218, -2.05172532, -1.99435022, -1.99338218, -1.99338218,
       -2.1302874 , -1.99338218, -1.99338218, -1.99338218, -1.99338218,
       -1.99338218, -1.99338218, -2.01720729, -2.08156965, -1.99338218,
       -2.17385582, -1.99338218, -1.99899861, -1.99338218, -1.99338218]), 'mean_test_score': array([-2.00855478, -2.02012026, -2.14013447, -2.01149275, -2.11341224,
       -2.07302691, -2.08254716, -2.13071055, -2.0518653 , -2.05494774,
       -1.99423741, -2.12615527, -1.99580878, -1.99778031, -1.99423741,
       -1.99199663, -2.16612411, -1.99423741, -1.99778031, -1.99423741,
       -2.14671804, -1.99199663, -1.99199663, -1.99199663, -1.99199663,
       -2.01662506, -1.98952441, -2.02985484, -1.98952441, -2.08655652,
       -1.98952441, -2.00846024, -1.99199663, -1.98952441, -1.98952441,
       -2.10427592, -1.98952441, -1.98952441, -1.98952441, -1.98952441,
       -1.98952441, -1.98952441, -1.99944053, -2.06442998, -1.98952441,
       -2.13596758, -1.98952441, -2.00908373, -1.98952441, -1.98952441]), 'std_test_score': array([0.08517856, 0.09749359, 0.11931178, 0.08290699, 0.09151308,
       0.09128204, 0.09749637, 0.09195538, 0.10383729, 0.10134326,
       0.08630063, 0.06458011, 0.08724859, 0.07908481, 0.08630063,
       0.08556264, 0.10940886, 0.08630063, 0.07908481, 0.08630063,
       0.09898572, 0.08556264, 0.08556264, 0.08556264, 0.08556264,
       0.09575642, 0.0829747 , 0.09755199, 0.0829747 , 0.09388015,
       0.0829747 , 0.08100891, 0.08556264, 0.0829747 , 0.0829747 ,
       0.10100472, 0.0829747 , 0.0829747 , 0.0829747 , 0.0829747 ,
       0.0829747 , 0.0829747 , 0.08268163, 0.09760921, 0.0829747 ,
       0.09551923, 0.0829747 , 0.08854847, 0.0829747 , 0.0829747 ]), 'rank_test_score': array([31, 35, 48, 33, 44, 40, 41, 46, 37, 38, 22, 45, 26, 27, 22, 16, 50,
       22, 27, 22, 49, 16, 16, 16, 16, 34,  1, 36,  1, 42,  1, 30, 16,  1,
        1, 43,  1,  1,  1,  1,  1,  1, 29, 39,  1, 47,  1, 32,  1,  1],
      dtype=int32)}
-1.9895244139628474
OrderedDict([('leaf_size', 100), ('n_neighbors', 23), ('p', 1)])
