no change     /home/modelrep/sadiya/miniconda/condabin/conda
no change     /home/modelrep/sadiya/miniconda/bin/conda
no change     /home/modelrep/sadiya/miniconda/bin/conda-env
no change     /home/modelrep/sadiya/miniconda/bin/activate
no change     /home/modelrep/sadiya/miniconda/bin/deactivate
no change     /home/modelrep/sadiya/miniconda/etc/profile.d/conda.sh
no change     /home/modelrep/sadiya/miniconda/etc/fish/conf.d/conda.fish
no change     /home/modelrep/sadiya/miniconda/shell/condabin/Conda.psm1
no change     /home/modelrep/sadiya/miniconda/shell/condabin/conda-hook.ps1
no change     /home/modelrep/sadiya/miniconda/lib/python3.10/site-packages/xontrib/conda.xsh
no change     /home/modelrep/sadiya/miniconda/etc/profile.d/conda.csh
no change     /home/modelrep/sadiya/.bashrc
No action taken.
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=212, n_neighbors=27, p=2;, score=-2.103 total time=   0.2s
[CV 2/3] END leaf_size=212, n_neighbors=27, p=2;, score=-2.325 total time=   0.1s
[CV 3/3] END leaf_size=212, n_neighbors=27, p=2;, score=-2.224 total time=   0.0s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=190, n_neighbors=28, p=1;, score=-1.985 total time=   0.2s
[CV 2/3] END leaf_size=190, n_neighbors=28, p=1;, score=-2.225 total time=   0.2s
[CV 3/3] END leaf_size=190, n_neighbors=28, p=1;, score=-2.125 total time=   0.2s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=32, n_neighbors=5, p=2;, score=-2.210 total time=   0.0s
[CV 2/3] END .leaf_size=32, n_neighbors=5, p=2;, score=-2.388 total time=   0.0s
[CV 3/3] END .leaf_size=32, n_neighbors=5, p=2;, score=-2.331 total time=   0.1s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=169, n_neighbors=49, p=2;, score=-2.093 total time=   0.0s
[CV 2/3] END leaf_size=169, n_neighbors=49, p=2;, score=-2.368 total time=   0.1s
[CV 3/3] END leaf_size=169, n_neighbors=49, p=2;, score=-2.249 total time=   0.1s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=223, n_neighbors=37, p=2;, score=-2.094 total time=   0.1s
[CV 2/3] END leaf_size=223, n_neighbors=37, p=2;, score=-2.337 total time=   0.0s
[CV 3/3] END leaf_size=223, n_neighbors=37, p=2;, score=-2.240 total time=   0.1s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=65, n_neighbors=18, p=1;, score=-1.982 total time=   0.2s
[CV 2/3] END leaf_size=65, n_neighbors=18, p=1;, score=-2.200 total time=   0.2s
[CV 3/3] END leaf_size=65, n_neighbors=18, p=1;, score=-2.115 total time=   0.2s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=67, n_neighbors=17, p=1;, score=-2.003 total time=   0.2s
[CV 2/3] END leaf_size=67, n_neighbors=17, p=1;, score=-2.197 total time=   0.3s
[CV 3/3] END leaf_size=67, n_neighbors=17, p=1;, score=-2.128 total time=   0.3s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=212, n_neighbors=11, p=2;, score=-2.143 total time=   0.1s
[CV 2/3] END leaf_size=212, n_neighbors=11, p=2;, score=-2.322 total time=   0.1s
[CV 3/3] END leaf_size=212, n_neighbors=11, p=2;, score=-2.240 total time=   0.1s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=149, n_neighbors=24, p=2;, score=-2.094 total time=   0.1s
[CV 2/3] END leaf_size=149, n_neighbors=24, p=2;, score=-2.338 total time=   0.1s
[CV 3/3] END leaf_size=149, n_neighbors=24, p=2;, score=-2.237 total time=   0.1s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=217, n_neighbors=26, p=2;, score=-2.103 total time=   0.2s
[CV 2/3] END leaf_size=217, n_neighbors=26, p=2;, score=-2.330 total time=   0.1s
[CV 3/3] END leaf_size=217, n_neighbors=26, p=2;, score=-2.231 total time=   0.1s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=3, n_neighbors=48, p=1;, score=-2.012 total time=   0.3s
[CV 2/3] END .leaf_size=3, n_neighbors=48, p=1;, score=-2.252 total time=   0.3s
[CV 3/3] END .leaf_size=3, n_neighbors=48, p=1;, score=-2.131 total time=   0.3s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=300, n_neighbors=7, p=1;, score=-2.087 total time=   0.3s
[CV 2/3] END leaf_size=300, n_neighbors=7, p=1;, score=-2.208 total time=   0.3s
[CV 3/3] END leaf_size=300, n_neighbors=7, p=1;, score=-2.156 total time=   0.3s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=125, n_neighbors=50, p=1;, score=-2.013 total time=   0.3s
[CV 2/3] END leaf_size=125, n_neighbors=50, p=1;, score=-2.253 total time=   0.3s
[CV 3/3] END leaf_size=125, n_neighbors=50, p=1;, score=-2.133 total time=   0.3s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END ..leaf_size=3, n_neighbors=3, p=1;, score=-2.247 total time=   0.3s
[CV 2/3] END ..leaf_size=3, n_neighbors=3, p=1;, score=-2.360 total time=   0.3s
[CV 3/3] END ..leaf_size=3, n_neighbors=3, p=1;, score=-2.308 total time=   0.3s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=69, n_neighbors=21, p=1;, score=-1.997 total time=   0.3s
[CV 2/3] END leaf_size=69, n_neighbors=21, p=1;, score=-2.195 total time=   0.3s
[CV 3/3] END leaf_size=69, n_neighbors=21, p=1;, score=-2.132 total time=   0.3s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=300, n_neighbors=17, p=1;, score=-2.003 total time=   0.3s
[CV 2/3] END leaf_size=300, n_neighbors=17, p=1;, score=-2.197 total time=   0.3s
[CV 3/3] END leaf_size=300, n_neighbors=17, p=1;, score=-2.128 total time=   0.3s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=3, n_neighbors=34, p=1;, score=-1.966 total time=   0.3s
[CV 2/3] END .leaf_size=3, n_neighbors=34, p=1;, score=-2.236 total time=   0.3s
[CV 3/3] END .leaf_size=3, n_neighbors=34, p=1;, score=-2.121 total time=   0.3s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=300, n_neighbors=39, p=1;, score=-1.991 total time=   0.3s
[CV 2/3] END leaf_size=300, n_neighbors=39, p=1;, score=-2.242 total time=   0.3s
[CV 3/3] END leaf_size=300, n_neighbors=39, p=1;, score=-2.127 total time=   0.3s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=3, n_neighbors=26, p=1;, score=-1.981 total time=   0.3s
[CV 2/3] END .leaf_size=3, n_neighbors=26, p=1;, score=-2.226 total time=   0.3s
[CV 3/3] END .leaf_size=3, n_neighbors=26, p=1;, score=-2.137 total time=   0.3s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=93, n_neighbors=39, p=1;, score=-1.991 total time=   0.3s
[CV 2/3] END leaf_size=93, n_neighbors=39, p=1;, score=-2.242 total time=   0.3s
[CV 3/3] END leaf_size=93, n_neighbors=39, p=1;, score=-2.127 total time=   0.3s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=300, n_neighbors=32, p=1;, score=-1.973 total time=   0.3s
[CV 2/3] END leaf_size=300, n_neighbors=32, p=1;, score=-2.227 total time=   0.3s
[CV 3/3] END leaf_size=300, n_neighbors=32, p=1;, score=-2.120 total time=   0.3s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=300, n_neighbors=23, p=1;, score=-1.998 total time=   0.3s
[CV 2/3] END leaf_size=300, n_neighbors=23, p=1;, score=-2.212 total time=   0.3s
[CV 3/3] END leaf_size=300, n_neighbors=23, p=1;, score=-2.127 total time=   0.3s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=300, n_neighbors=50, p=1;, score=-2.013 total time=   0.3s
[CV 2/3] END leaf_size=300, n_neighbors=50, p=1;, score=-2.253 total time=   0.3s
[CV 3/3] END leaf_size=300, n_neighbors=50, p=1;, score=-2.133 total time=   0.3s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=299, n_neighbors=11, p=1;, score=-2.014 total time=   0.3s
[CV 2/3] END leaf_size=299, n_neighbors=11, p=1;, score=-2.213 total time=   0.3s
[CV 3/3] END leaf_size=299, n_neighbors=11, p=1;, score=-2.141 total time=   0.3s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=4, n_neighbors=19, p=1;, score=-1.991 total time=   0.3s
[CV 2/3] END .leaf_size=4, n_neighbors=19, p=1;, score=-2.199 total time=   0.3s
[CV 3/3] END .leaf_size=4, n_neighbors=19, p=1;, score=-2.115 total time=   0.3s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=161, n_neighbors=33, p=1;, score=-1.966 total time=   0.3s
[CV 2/3] END leaf_size=161, n_neighbors=33, p=1;, score=-2.235 total time=   0.3s
[CV 3/3] END leaf_size=161, n_neighbors=33, p=1;, score=-2.118 total time=   0.3s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=299, n_neighbors=43, p=1;, score=-1.998 total time=   0.3s
[CV 2/3] END leaf_size=299, n_neighbors=43, p=1;, score=-2.242 total time=   0.3s
[CV 3/3] END leaf_size=299, n_neighbors=43, p=1;, score=-2.138 total time=   0.3s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=3, n_neighbors=19, p=1;, score=-1.991 total time=   0.3s
[CV 2/3] END .leaf_size=3, n_neighbors=19, p=1;, score=-2.199 total time=   0.3s
[CV 3/3] END .leaf_size=3, n_neighbors=19, p=1;, score=-2.115 total time=   0.3s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=4, n_neighbors=15, p=1;, score=-2.006 total time=   0.3s
[CV 2/3] END .leaf_size=4, n_neighbors=15, p=1;, score=-2.201 total time=   0.3s
[CV 3/3] END .leaf_size=4, n_neighbors=15, p=1;, score=-2.133 total time=   0.3s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=15, n_neighbors=18, p=1;, score=-1.982 total time=   0.3s
[CV 2/3] END leaf_size=15, n_neighbors=18, p=1;, score=-2.200 total time=   0.3s
[CV 3/3] END leaf_size=15, n_neighbors=18, p=1;, score=-2.115 total time=   0.3s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=4, n_neighbors=18, p=1;, score=-1.982 total time=   0.3s
[CV 2/3] END .leaf_size=4, n_neighbors=18, p=1;, score=-2.200 total time=   0.3s
[CV 3/3] END .leaf_size=4, n_neighbors=18, p=1;, score=-2.115 total time=   0.3s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=299, n_neighbors=36, p=1;, score=-1.980 total time=   0.3s
[CV 2/3] END leaf_size=299, n_neighbors=36, p=1;, score=-2.233 total time=   0.3s
[CV 3/3] END leaf_size=299, n_neighbors=36, p=1;, score=-2.124 total time=   0.3s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=3, n_neighbors=18, p=1;, score=-1.982 total time=   0.3s
[CV 2/3] END .leaf_size=3, n_neighbors=18, p=1;, score=-2.200 total time=   0.3s
[CV 3/3] END .leaf_size=3, n_neighbors=18, p=1;, score=-2.115 total time=   0.3s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=4, n_neighbors=18, p=1;, score=-1.982 total time=   0.3s
[CV 2/3] END .leaf_size=4, n_neighbors=18, p=1;, score=-2.200 total time=   0.3s
[CV 3/3] END .leaf_size=4, n_neighbors=18, p=1;, score=-2.115 total time=   0.3s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=297, n_neighbors=17, p=2;, score=-2.120 total time=   0.1s
[CV 2/3] END leaf_size=297, n_neighbors=17, p=2;, score=-2.329 total time=   0.1s
[CV 3/3] END leaf_size=297, n_neighbors=17, p=2;, score=-2.236 total time=   0.1s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=3, n_neighbors=19, p=1;, score=-1.991 total time=   0.3s
[CV 2/3] END .leaf_size=3, n_neighbors=19, p=1;, score=-2.199 total time=   0.3s
[CV 3/3] END .leaf_size=3, n_neighbors=19, p=1;, score=-2.115 total time=   0.3s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=9, n_neighbors=30, p=1;, score=-1.975 total time=   0.3s
[CV 2/3] END .leaf_size=9, n_neighbors=30, p=1;, score=-2.229 total time=   0.3s
[CV 3/3] END .leaf_size=9, n_neighbors=30, p=1;, score=-2.116 total time=   0.3s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=3, n_neighbors=19, p=1;, score=-1.991 total time=   0.3s
[CV 2/3] END .leaf_size=3, n_neighbors=19, p=1;, score=-2.199 total time=   0.3s
[CV 3/3] END .leaf_size=3, n_neighbors=19, p=1;, score=-2.115 total time=   0.3s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=4, n_neighbors=43, p=2;, score=-2.094 total time=   0.1s
[CV 2/3] END .leaf_size=4, n_neighbors=43, p=2;, score=-2.353 total time=   0.1s
[CV 3/3] END .leaf_size=4, n_neighbors=43, p=2;, score=-2.245 total time=   0.1s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=300, n_neighbors=18, p=1;, score=-1.982 total time=   0.3s
[CV 2/3] END leaf_size=300, n_neighbors=18, p=1;, score=-2.200 total time=   0.3s
[CV 3/3] END leaf_size=300, n_neighbors=18, p=1;, score=-2.115 total time=   0.3s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=12, n_neighbors=18, p=1;, score=-1.982 total time=   0.3s
[CV 2/3] END leaf_size=12, n_neighbors=18, p=1;, score=-2.200 total time=   0.3s
[CV 3/3] END leaf_size=12, n_neighbors=18, p=1;, score=-2.115 total time=   0.3s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=7, n_neighbors=32, p=2;, score=-2.089 total time=   0.1s
[CV 2/3] END .leaf_size=7, n_neighbors=32, p=2;, score=-2.332 total time=   0.1s
[CV 3/3] END .leaf_size=7, n_neighbors=32, p=2;, score=-2.242 total time=   0.1s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=4, n_neighbors=45, p=1;, score=-2.003 total time=   0.3s
[CV 2/3] END .leaf_size=4, n_neighbors=45, p=1;, score=-2.243 total time=   0.3s
[CV 3/3] END .leaf_size=4, n_neighbors=45, p=1;, score=-2.133 total time=   0.3s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=5, n_neighbors=13, p=1;, score=-2.003 total time=   0.3s
[CV 2/3] END .leaf_size=5, n_neighbors=13, p=1;, score=-2.205 total time=   0.3s
[CV 3/3] END .leaf_size=5, n_neighbors=13, p=1;, score=-2.150 total time=   0.3s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END ..leaf_size=9, n_neighbors=9, p=1;, score=-2.068 total time=   0.3s
[CV 2/3] END ..leaf_size=9, n_neighbors=9, p=1;, score=-2.228 total time=   0.3s
[CV 3/3] END ..leaf_size=9, n_neighbors=9, p=1;, score=-2.139 total time=   0.3s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=4, n_neighbors=41, p=1;, score=-1.993 total time=   0.3s
[CV 2/3] END .leaf_size=4, n_neighbors=41, p=1;, score=-2.241 total time=   0.3s
[CV 3/3] END .leaf_size=4, n_neighbors=41, p=1;, score=-2.128 total time=   0.3s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=4, n_neighbors=20, p=2;, score=-2.122 total time=   0.1s
[CV 2/3] END .leaf_size=4, n_neighbors=20, p=2;, score=-2.329 total time=   0.1s
[CV 3/3] END .leaf_size=4, n_neighbors=20, p=2;, score=-2.235 total time=   0.1s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=299, n_neighbors=40, p=2;, score=-2.092 total time=   0.1s
[CV 2/3] END leaf_size=299, n_neighbors=40, p=2;, score=-2.341 total time=   0.1s
[CV 3/3] END leaf_size=299, n_neighbors=40, p=2;, score=-2.244 total time=   0.1s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=300, n_neighbors=18, p=1;, score=-1.982 total time=   0.3s
[CV 2/3] END leaf_size=300, n_neighbors=18, p=1;, score=-2.200 total time=   0.3s
[CV 3/3] END leaf_size=300, n_neighbors=18, p=1;, score=-2.115 total time=   0.3s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=300, n_neighbors=18, p=1;, score=-1.982 total time=   0.3s
[CV 2/3] END leaf_size=300, n_neighbors=18, p=1;, score=-2.200 total time=   0.3s
[CV 3/3] END leaf_size=300, n_neighbors=18, p=1;, score=-2.115 total time=   0.3s
{'mean_fit_time': array([0.00546042, 0.00540805, 0.00604566, 0.0069383 , 0.00728337,
       0.00683594, 0.00656446, 0.007478  , 0.00753522, 0.0075388 ,
       0.00713428, 0.0071454 , 0.00666833, 0.00686049, 0.00684031,
       0.00676568, 0.0069565 , 0.0068144 , 0.00676417, 0.00671426,
       0.00671315, 0.00679564, 0.00681345, 0.00653195, 0.00635521,
       0.00633804, 0.00691787, 0.00665379, 0.00695658, 0.00695992,
       0.00653672, 0.00673032, 0.00652925, 0.0068659 , 0.007013  ,
       0.00679366, 0.00665919, 0.00680486, 0.00702937, 0.00588965,
       0.00593003, 0.00695642, 0.00667874, 0.00665029, 0.00686995,
       0.00641648, 0.00620405, 0.00649301, 0.00614675, 0.00644191]), 'std_fit_time': array([1.09754594e-03, 4.68173517e-04, 7.29831148e-04, 4.53949656e-04,
       8.09861586e-05, 2.81692737e-04, 2.78833108e-05, 2.09969311e-04,
       1.91814625e-05, 3.68457999e-04, 3.50949899e-04, 4.97373996e-04,
       1.04889002e-04, 5.71859176e-04, 3.69238587e-04, 2.61254936e-04,
       3.95760351e-04, 5.29337655e-04, 4.38024830e-04, 4.60074569e-04,
       5.60969717e-04, 3.88110053e-04, 4.76927762e-04, 2.67505858e-04,
       3.00630187e-05, 1.39250239e-04, 5.88935470e-04, 6.36043426e-04,
       5.84119226e-04, 7.46202569e-04, 3.49486886e-04, 6.50304874e-04,
       4.64022802e-04, 7.18876109e-04, 7.32671901e-04, 7.28464584e-04,
       8.09716726e-04, 7.95357146e-04, 1.33388770e-03, 6.08271292e-04,
       6.96398708e-04, 1.05625629e-03, 8.43541518e-04, 8.30014220e-04,
       1.08700972e-03, 7.78427772e-04, 8.03263114e-04, 1.02866512e-03,
       7.86929703e-04, 1.00607010e-03]), 'mean_score_time': array([0.10872054, 0.2122399 , 0.04522252, 0.05451298, 0.04793835,
       0.2119689 , 0.2449491 , 0.12372549, 0.12033852, 0.13196667,
       0.2683963 , 0.27234403, 0.27345951, 0.27054803, 0.26941117,
       0.27056305, 0.26253939, 0.26469636, 0.27089063, 0.26454798,
       0.26468897, 0.26956733, 0.26934385, 0.26919882, 0.25923236,
       0.27110426, 0.26913659, 0.27157116, 0.26150441, 0.26267457,
       0.26507449, 0.27402544, 0.26101883, 0.26191394, 0.12254826,
       0.27182984, 0.27089707, 0.26077787, 0.12516387, 0.25941181,
       0.2677931 , 0.12239861, 0.27006364, 0.26994872, 0.26879684,
       0.2701327 , 0.12180916, 0.1211439 , 0.27031636, 0.26963957]), 'std_score_time': array([0.08889947, 0.00221238, 0.00804102, 0.01515608, 0.01822812,
       0.00219572, 0.02067647, 0.00500036, 0.00031627, 0.01466308,
       0.00808596, 0.01517445, 0.01704961, 0.01742127, 0.01317439,
       0.01229001, 0.00116066, 0.00342295, 0.01269917, 0.00382274,
       0.00395629, 0.01204349, 0.0092371 , 0.01241283, 0.00080215,
       0.01648345, 0.00940567, 0.01607089, 0.00045073, 0.00600229,
       0.00409575, 0.01769901, 0.00145207, 0.00463652, 0.00287716,
       0.01566463, 0.01475179, 0.00141669, 0.00281253, 0.00172544,
       0.01499421, 0.0022412 , 0.010129  , 0.01258693, 0.01062695,
       0.01301787, 0.00271354, 0.00085677, 0.01252109, 0.01209212]), 'param_leaf_size': masked_array(data=[212, 190, 32, 169, 223, 65, 67, 212, 149, 217, 3, 300,
                   125, 3, 69, 300, 3, 300, 3, 93, 300, 300, 300, 299, 4,
                   161, 299, 3, 4, 15, 4, 299, 3, 4, 297, 3, 9, 3, 4, 300,
                   12, 7, 4, 5, 9, 4, 4, 299, 300, 300],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False],
       fill_value='?',
            dtype=object), 'param_n_neighbors': masked_array(data=[27, 28, 5, 49, 37, 18, 17, 11, 24, 26, 48, 7, 50, 3,
                   21, 17, 34, 39, 26, 39, 32, 23, 50, 11, 19, 33, 43, 19,
                   15, 18, 18, 36, 18, 18, 17, 19, 30, 19, 43, 18, 18, 32,
                   45, 13, 9, 41, 20, 40, 18, 18],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False],
       fill_value='?',
            dtype=object), 'param_p': masked_array(data=[2, 1, 2, 2, 2, 1, 1, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1,
                   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1,
                   1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2, 2, 1, 1],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False],
       fill_value='?',
            dtype=object), 'params': [OrderedDict([('leaf_size', 212), ('n_neighbors', 27), ('p', 2)]), OrderedDict([('leaf_size', 190), ('n_neighbors', 28), ('p', 1)]), OrderedDict([('leaf_size', 32), ('n_neighbors', 5), ('p', 2)]), OrderedDict([('leaf_size', 169), ('n_neighbors', 49), ('p', 2)]), OrderedDict([('leaf_size', 223), ('n_neighbors', 37), ('p', 2)]), OrderedDict([('leaf_size', 65), ('n_neighbors', 18), ('p', 1)]), OrderedDict([('leaf_size', 67), ('n_neighbors', 17), ('p', 1)]), OrderedDict([('leaf_size', 212), ('n_neighbors', 11), ('p', 2)]), OrderedDict([('leaf_size', 149), ('n_neighbors', 24), ('p', 2)]), OrderedDict([('leaf_size', 217), ('n_neighbors', 26), ('p', 2)]), OrderedDict([('leaf_size', 3), ('n_neighbors', 48), ('p', 1)]), OrderedDict([('leaf_size', 300), ('n_neighbors', 7), ('p', 1)]), OrderedDict([('leaf_size', 125), ('n_neighbors', 50), ('p', 1)]), OrderedDict([('leaf_size', 3), ('n_neighbors', 3), ('p', 1)]), OrderedDict([('leaf_size', 69), ('n_neighbors', 21), ('p', 1)]), OrderedDict([('leaf_size', 300), ('n_neighbors', 17), ('p', 1)]), OrderedDict([('leaf_size', 3), ('n_neighbors', 34), ('p', 1)]), OrderedDict([('leaf_size', 300), ('n_neighbors', 39), ('p', 1)]), OrderedDict([('leaf_size', 3), ('n_neighbors', 26), ('p', 1)]), OrderedDict([('leaf_size', 93), ('n_neighbors', 39), ('p', 1)]), OrderedDict([('leaf_size', 300), ('n_neighbors', 32), ('p', 1)]), OrderedDict([('leaf_size', 300), ('n_neighbors', 23), ('p', 1)]), OrderedDict([('leaf_size', 300), ('n_neighbors', 50), ('p', 1)]), OrderedDict([('leaf_size', 299), ('n_neighbors', 11), ('p', 1)]), OrderedDict([('leaf_size', 4), ('n_neighbors', 19), ('p', 1)]), OrderedDict([('leaf_size', 161), ('n_neighbors', 33), ('p', 1)]), OrderedDict([('leaf_size', 299), ('n_neighbors', 43), ('p', 1)]), OrderedDict([('leaf_size', 3), ('n_neighbors', 19), ('p', 1)]), OrderedDict([('leaf_size', 4), ('n_neighbors', 15), ('p', 1)]), OrderedDict([('leaf_size', 15), ('n_neighbors', 18), ('p', 1)]), OrderedDict([('leaf_size', 4), ('n_neighbors', 18), ('p', 1)]), OrderedDict([('leaf_size', 299), ('n_neighbors', 36), ('p', 1)]), OrderedDict([('leaf_size', 3), ('n_neighbors', 18), ('p', 1)]), OrderedDict([('leaf_size', 4), ('n_neighbors', 18), ('p', 1)]), OrderedDict([('leaf_size', 297), ('n_neighbors', 17), ('p', 2)]), OrderedDict([('leaf_size', 3), ('n_neighbors', 19), ('p', 1)]), OrderedDict([('leaf_size', 9), ('n_neighbors', 30), ('p', 1)]), OrderedDict([('leaf_size', 3), ('n_neighbors', 19), ('p', 1)]), OrderedDict([('leaf_size', 4), ('n_neighbors', 43), ('p', 2)]), OrderedDict([('leaf_size', 300), ('n_neighbors', 18), ('p', 1)]), OrderedDict([('leaf_size', 12), ('n_neighbors', 18), ('p', 1)]), OrderedDict([('leaf_size', 7), ('n_neighbors', 32), ('p', 2)]), OrderedDict([('leaf_size', 4), ('n_neighbors', 45), ('p', 1)]), OrderedDict([('leaf_size', 5), ('n_neighbors', 13), ('p', 1)]), OrderedDict([('leaf_size', 9), ('n_neighbors', 9), ('p', 1)]), OrderedDict([('leaf_size', 4), ('n_neighbors', 41), ('p', 1)]), OrderedDict([('leaf_size', 4), ('n_neighbors', 20), ('p', 2)]), OrderedDict([('leaf_size', 299), ('n_neighbors', 40), ('p', 2)]), OrderedDict([('leaf_size', 300), ('n_neighbors', 18), ('p', 1)]), OrderedDict([('leaf_size', 300), ('n_neighbors', 18), ('p', 1)])], 'split0_test_score': array([-2.10264453, -1.98540532, -2.21015993, -2.09280331, -2.09440524,
       -1.98232008, -2.00317419, -2.14298147, -2.09444377, -2.10320192,
       -2.01187331, -2.08688474, -2.01326755, -2.24748494, -1.99735469,
       -2.00317419, -1.96583657, -1.99078862, -1.98126174, -1.99078862,
       -1.97254343, -1.99826   , -2.01326755, -2.0142261 , -1.99097989,
       -1.96646662, -1.99804774, -1.99097989, -2.0061709 , -1.98232008,
       -1.98232008, -1.98013527, -1.98232008, -1.98232008, -2.1204145 ,
       -1.99097989, -1.97482599, -1.99097989, -2.0937832 , -1.98232008,
       -1.98232008, -2.08860564, -2.0026523 , -2.002838  , -2.06821178,
       -1.99347266, -2.12229538, -2.09245785, -1.98232008, -1.98232008]), 'split1_test_score': array([-2.32459458, -2.22465361, -2.38760045, -2.36762721, -2.33652305,
       -2.20027492, -2.1968344 , -2.32175019, -2.33825913, -2.33031806,
       -2.25152257, -2.20752416, -2.25343971, -2.35988106, -2.19468021,
       -2.1968344 , -2.23614718, -2.24239752, -2.22633632, -2.24239752,
       -2.22680687, -2.21176181, -2.25343971, -2.21313072, -2.1987358 ,
       -2.23489199, -2.24194906, -2.1987358 , -2.20095811, -2.20027492,
       -2.20027492, -2.23312587, -2.20027492, -2.20027492, -2.32913136,
       -2.1987358 , -2.22897141, -2.1987358 , -2.35271994, -2.20027492,
       -2.20027492, -2.33249939, -2.24316445, -2.20514797, -2.22837527,
       -2.24129981, -2.32895587, -2.34082001, -2.20027492, -2.20027492]), 'split2_test_score': array([-2.223779  , -2.12511293, -2.33065578, -2.24860454, -2.23958906,
       -2.11548681, -2.12765355, -2.23978097, -2.23706524, -2.23108579,
       -2.13067224, -2.1560398 , -2.13268857, -2.30844782, -2.13215759,
       -2.12765355, -2.12051244, -2.12716198, -2.13683081, -2.12716198,
       -2.12023805, -2.12654913, -2.13268857, -2.14146188, -2.11457476,
       -2.11757462, -2.13826183, -2.11457476, -2.13301908, -2.11548681,
       -2.11548681, -2.12449292, -2.11548681, -2.11548681, -2.23555745,
       -2.11457476, -2.11556969, -2.11457476, -2.24523281, -2.11548681,
       -2.11548681, -2.24204261, -2.13307526, -2.15039428, -2.13920014,
       -2.12834301, -2.23468812, -2.24393343, -2.11548681, -2.11548681]), 'mean_test_score': array([-2.21700603, -2.11172395, -2.30947205, -2.23634502, -2.22350578,
       -2.0993606 , -2.10922071, -2.23483754, -2.22325605, -2.22153526,
       -2.13135604, -2.15014957, -2.13313194, -2.30527127, -2.10806417,
       -2.10922071, -2.10749873, -2.12011604, -2.11480962, -2.12011604,
       -2.10652945, -2.11219031, -2.13313194, -2.12293957, -2.10143015,
       -2.10631108, -2.12608621, -2.10143015, -2.1133827 , -2.0993606 ,
       -2.0993606 , -2.11258469, -2.0993606 , -2.0993606 , -2.22836777,
       -2.10143015, -2.1064557 , -2.10143015, -2.23057865, -2.0993606 ,
       -2.0993606 , -2.22104921, -2.12629734, -2.11946008, -2.14526239,
       -2.12103849, -2.22864646, -2.2257371 , -2.0993606 , -2.0993606 ]), 'std_test_score': array([0.09073721, 0.09813048, 0.07397228, 0.11253078, 0.09949627,
       0.08970737, 0.08012863, 0.07306569, 0.10001501, 0.09296539,
       0.09783759, 0.04942664, 0.09805038, 0.04594047, 0.08233958,
       0.08012863, 0.11073685, 0.10283966, 0.10125574, 0.10283966,
       0.10425423, 0.08775112, 0.09805038, 0.08225193, 0.08532376,
       0.10987325, 0.09994381, 0.08532376, 0.08072466, 0.08970737,
       0.08970737, 0.10362566, 0.08970737, 0.08970737, 0.08535983,
       0.08532376, 0.10395439, 0.08532376, 0.10621713, 0.08970737,
       0.08970737, 0.1006697 , 0.09830558, 0.08544013, 0.06552683,
       0.10130677, 0.08447688, 0.10220656, 0.08970737, 0.08970737]), 'rank_test_score': array([38, 21, 50, 48, 42,  1, 19, 47, 41, 40, 33, 37, 34, 49, 18, 19, 17,
       27, 25, 27, 16, 22, 34, 30, 10, 14, 31, 10, 24,  1,  1, 23,  1,  1,
       44, 10, 15, 10, 46,  1,  1, 39, 32, 26, 36, 29, 45, 43,  1,  1],
      dtype=int32)}
-2.0993606044597164
OrderedDict([('leaf_size', 65), ('n_neighbors', 18), ('p', 1)])
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=115, n_neighbors=17, p=1;, score=-1.937 total time=   0.2s
[CV 2/3] END leaf_size=115, n_neighbors=17, p=1;, score=-2.136 total time=   0.2s
[CV 3/3] END leaf_size=115, n_neighbors=17, p=1;, score=-2.103 total time=   0.2s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=20, n_neighbors=29, p=1;, score=-1.945 total time=   0.2s
[CV 2/3] END leaf_size=20, n_neighbors=29, p=1;, score=-2.158 total time=   0.2s
[CV 3/3] END leaf_size=20, n_neighbors=29, p=1;, score=-2.117 total time=   0.2s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=18, n_neighbors=33, p=2;, score=-2.066 total time=   0.1s
[CV 2/3] END leaf_size=18, n_neighbors=33, p=2;, score=-2.295 total time=   0.1s
[CV 3/3] END leaf_size=18, n_neighbors=33, p=2;, score=-2.221 total time=   0.1s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=48, n_neighbors=49, p=1;, score=-1.998 total time=   0.2s
[CV 2/3] END leaf_size=48, n_neighbors=49, p=1;, score=-2.232 total time=   0.2s
[CV 3/3] END leaf_size=48, n_neighbors=49, p=1;, score=-2.134 total time=   0.2s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=248, n_neighbors=46, p=2;, score=-2.081 total time=   0.1s
[CV 2/3] END leaf_size=248, n_neighbors=46, p=2;, score=-2.347 total time=   0.1s
[CV 3/3] END leaf_size=248, n_neighbors=46, p=2;, score=-2.233 total time=   0.1s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=24, n_neighbors=21, p=2;, score=-2.038 total time=   0.1s
[CV 2/3] END leaf_size=24, n_neighbors=21, p=2;, score=-2.256 total time=   0.1s
[CV 3/3] END leaf_size=24, n_neighbors=21, p=2;, score=-2.245 total time=   0.1s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=262, n_neighbors=24, p=1;, score=-1.953 total time=   0.2s
[CV 2/3] END leaf_size=262, n_neighbors=24, p=1;, score=-2.153 total time=   0.2s
[CV 3/3] END leaf_size=262, n_neighbors=24, p=1;, score=-2.096 total time=   0.2s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=250, n_neighbors=21, p=1;, score=-1.950 total time=   0.2s
[CV 2/3] END leaf_size=250, n_neighbors=21, p=1;, score=-2.144 total time=   0.2s
[CV 3/3] END leaf_size=250, n_neighbors=21, p=1;, score=-2.103 total time=   0.2s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=127, n_neighbors=43, p=2;, score=-2.068 total time=   0.1s
[CV 2/3] END leaf_size=127, n_neighbors=43, p=2;, score=-2.334 total time=   0.1s
[CV 3/3] END leaf_size=127, n_neighbors=43, p=2;, score=-2.233 total time=   0.1s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=230, n_neighbors=48, p=2;, score=-2.079 total time=   0.2s
[CV 2/3] END leaf_size=230, n_neighbors=48, p=2;, score=-2.353 total time=   0.1s
[CV 3/3] END leaf_size=230, n_neighbors=48, p=2;, score=-2.235 total time=   0.1s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END ..leaf_size=3, n_neighbors=3, p=1;, score=-2.159 total time=   0.2s
[CV 2/3] END ..leaf_size=3, n_neighbors=3, p=1;, score=-2.276 total time=   0.2s
[CV 3/3] END ..leaf_size=3, n_neighbors=3, p=1;, score=-2.334 total time=   0.2s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=293, n_neighbors=3, p=2;, score=-2.329 total time=   0.2s
[CV 2/3] END leaf_size=293, n_neighbors=3, p=2;, score=-2.373 total time=   0.1s
[CV 3/3] END leaf_size=293, n_neighbors=3, p=2;, score=-2.347 total time=   0.1s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=3, n_neighbors=19, p=1;, score=-1.941 total time=   0.2s
[CV 2/3] END .leaf_size=3, n_neighbors=19, p=1;, score=-2.127 total time=   0.2s
[CV 3/3] END .leaf_size=3, n_neighbors=19, p=1;, score=-2.105 total time=   0.2s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=3, n_neighbors=18, p=1;, score=-1.931 total time=   0.2s
[CV 2/3] END .leaf_size=3, n_neighbors=18, p=1;, score=-2.133 total time=   0.2s
[CV 3/3] END .leaf_size=3, n_neighbors=18, p=1;, score=-2.106 total time=   0.2s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=3, n_neighbors=39, p=1;, score=-1.971 total time=   0.2s
[CV 2/3] END .leaf_size=3, n_neighbors=39, p=1;, score=-2.195 total time=   0.2s
[CV 3/3] END .leaf_size=3, n_neighbors=39, p=1;, score=-2.129 total time=   0.2s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=3, n_neighbors=16, p=1;, score=-1.934 total time=   0.2s
[CV 2/3] END .leaf_size=3, n_neighbors=16, p=1;, score=-2.135 total time=   0.2s
[CV 3/3] END .leaf_size=3, n_neighbors=16, p=1;, score=-2.109 total time=   0.2s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=296, n_neighbors=34, p=1;, score=-1.957 total time=   0.2s
[CV 2/3] END leaf_size=296, n_neighbors=34, p=1;, score=-2.174 total time=   0.2s
[CV 3/3] END leaf_size=296, n_neighbors=34, p=1;, score=-2.136 total time=   0.2s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=299, n_neighbors=44, p=1;, score=-1.980 total time=   0.2s
[CV 2/3] END leaf_size=299, n_neighbors=44, p=1;, score=-2.229 total time=   0.2s
[CV 3/3] END leaf_size=299, n_neighbors=44, p=1;, score=-2.122 total time=   0.2s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=3, n_neighbors=18, p=1;, score=-1.931 total time=   0.2s
[CV 2/3] END .leaf_size=3, n_neighbors=18, p=1;, score=-2.133 total time=   0.2s
[CV 3/3] END .leaf_size=3, n_neighbors=18, p=1;, score=-2.106 total time=   0.2s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=296, n_neighbors=13, p=2;, score=-2.049 total time=   0.2s
[CV 2/3] END leaf_size=296, n_neighbors=13, p=2;, score=-2.239 total time=   0.1s
[CV 3/3] END leaf_size=296, n_neighbors=13, p=2;, score=-2.237 total time=   0.1s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=300, n_neighbors=12, p=1;, score=-1.953 total time=   0.2s
[CV 2/3] END leaf_size=300, n_neighbors=12, p=1;, score=-2.121 total time=   0.2s
[CV 3/3] END leaf_size=300, n_neighbors=12, p=1;, score=-2.139 total time=   0.2s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=3, n_neighbors=18, p=1;, score=-1.931 total time=   0.2s
[CV 2/3] END .leaf_size=3, n_neighbors=18, p=1;, score=-2.133 total time=   0.2s
[CV 3/3] END .leaf_size=3, n_neighbors=18, p=1;, score=-2.106 total time=   0.2s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=300, n_neighbors=15, p=1;, score=-1.921 total time=   0.2s
[CV 2/3] END leaf_size=300, n_neighbors=15, p=1;, score=-2.126 total time=   0.2s
[CV 3/3] END leaf_size=300, n_neighbors=15, p=1;, score=-2.117 total time=   0.2s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=3, n_neighbors=24, p=1;, score=-1.953 total time=   0.2s
[CV 2/3] END .leaf_size=3, n_neighbors=24, p=1;, score=-2.153 total time=   0.2s
[CV 3/3] END .leaf_size=3, n_neighbors=24, p=1;, score=-2.096 total time=   0.2s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=299, n_neighbors=27, p=2;, score=-2.052 total time=   0.1s
[CV 2/3] END leaf_size=299, n_neighbors=27, p=2;, score=-2.291 total time=   0.1s
[CV 3/3] END leaf_size=299, n_neighbors=27, p=2;, score=-2.231 total time=   0.1s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=296, n_neighbors=27, p=1;, score=-1.954 total time=   0.2s
[CV 2/3] END leaf_size=296, n_neighbors=27, p=1;, score=-2.160 total time=   0.2s
[CV 3/3] END leaf_size=296, n_neighbors=27, p=1;, score=-2.101 total time=   0.2s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=299, n_neighbors=50, p=1;, score=-2.001 total time=   0.2s
[CV 2/3] END leaf_size=299, n_neighbors=50, p=1;, score=-2.234 total time=   0.2s
[CV 3/3] END leaf_size=299, n_neighbors=50, p=1;, score=-2.136 total time=   0.2s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=300, n_neighbors=14, p=1;, score=-1.917 total time=   0.2s
[CV 2/3] END leaf_size=300, n_neighbors=14, p=1;, score=-2.121 total time=   0.2s
[CV 3/3] END leaf_size=300, n_neighbors=14, p=1;, score=-2.114 total time=   0.2s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=300, n_neighbors=17, p=2;, score=-2.029 total time=   0.1s
[CV 2/3] END leaf_size=300, n_neighbors=17, p=2;, score=-2.247 total time=   0.1s
[CV 3/3] END leaf_size=300, n_neighbors=17, p=2;, score=-2.237 total time=   0.1s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=3, n_neighbors=14, p=1;, score=-1.917 total time=   0.2s
[CV 2/3] END .leaf_size=3, n_neighbors=14, p=1;, score=-2.121 total time=   0.2s
[CV 3/3] END .leaf_size=3, n_neighbors=14, p=1;, score=-2.114 total time=   0.2s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=296, n_neighbors=31, p=1;, score=-1.948 total time=   0.2s
[CV 2/3] END leaf_size=296, n_neighbors=31, p=1;, score=-2.169 total time=   0.2s
[CV 3/3] END leaf_size=296, n_neighbors=31, p=1;, score=-2.127 total time=   0.2s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=298, n_neighbors=38, p=2;, score=-2.077 total time=   0.1s
[CV 2/3] END leaf_size=298, n_neighbors=38, p=2;, score=-2.323 total time=   0.1s
[CV 3/3] END leaf_size=298, n_neighbors=38, p=2;, score=-2.220 total time=   0.1s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=3, n_neighbors=14, p=1;, score=-1.917 total time=   0.2s
[CV 2/3] END .leaf_size=3, n_neighbors=14, p=1;, score=-2.121 total time=   0.2s
[CV 3/3] END .leaf_size=3, n_neighbors=14, p=1;, score=-2.114 total time=   0.2s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=300, n_neighbors=14, p=1;, score=-1.917 total time=   0.2s
[CV 2/3] END leaf_size=300, n_neighbors=14, p=1;, score=-2.121 total time=   0.2s
[CV 3/3] END leaf_size=300, n_neighbors=14, p=1;, score=-2.114 total time=   0.2s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=4, n_neighbors=14, p=1;, score=-1.917 total time=   0.2s
[CV 2/3] END .leaf_size=4, n_neighbors=14, p=1;, score=-2.121 total time=   0.2s
[CV 3/3] END .leaf_size=4, n_neighbors=14, p=1;, score=-2.114 total time=   0.2s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=300, n_neighbors=14, p=1;, score=-1.917 total time=   0.2s
[CV 2/3] END leaf_size=300, n_neighbors=14, p=1;, score=-2.121 total time=   0.2s
[CV 3/3] END leaf_size=300, n_neighbors=14, p=1;, score=-2.114 total time=   0.2s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END ..leaf_size=6, n_neighbors=8, p=1;, score=-1.946 total time=   0.2s
[CV 2/3] END ..leaf_size=6, n_neighbors=8, p=1;, score=-2.144 total time=   0.2s
[CV 3/3] END ..leaf_size=6, n_neighbors=8, p=1;, score=-2.136 total time=   0.2s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=3, n_neighbors=14, p=1;, score=-1.917 total time=   0.2s
[CV 2/3] END .leaf_size=3, n_neighbors=14, p=1;, score=-2.121 total time=   0.2s
[CV 3/3] END .leaf_size=3, n_neighbors=14, p=1;, score=-2.114 total time=   0.2s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=299, n_neighbors=14, p=1;, score=-1.917 total time=   0.2s
[CV 2/3] END leaf_size=299, n_neighbors=14, p=1;, score=-2.121 total time=   0.2s
[CV 3/3] END leaf_size=299, n_neighbors=14, p=1;, score=-2.114 total time=   0.2s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=3, n_neighbors=14, p=1;, score=-1.917 total time=   0.2s
[CV 2/3] END .leaf_size=3, n_neighbors=14, p=1;, score=-2.121 total time=   0.2s
[CV 3/3] END .leaf_size=3, n_neighbors=14, p=1;, score=-2.114 total time=   0.2s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=300, n_neighbors=14, p=1;, score=-1.917 total time=   0.2s
[CV 2/3] END leaf_size=300, n_neighbors=14, p=1;, score=-2.121 total time=   0.2s
[CV 3/3] END leaf_size=300, n_neighbors=14, p=1;, score=-2.114 total time=   0.2s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END ..leaf_size=4, n_neighbors=9, p=2;, score=-2.066 total time=   0.1s
[CV 2/3] END ..leaf_size=4, n_neighbors=9, p=2;, score=-2.220 total time=   0.1s
[CV 3/3] END ..leaf_size=4, n_neighbors=9, p=2;, score=-2.242 total time=   0.1s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=3, n_neighbors=14, p=1;, score=-1.917 total time=   0.2s
[CV 2/3] END .leaf_size=3, n_neighbors=14, p=1;, score=-2.121 total time=   0.2s
[CV 3/3] END .leaf_size=3, n_neighbors=14, p=1;, score=-2.114 total time=   0.2s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=296, n_neighbors=37, p=1;, score=-1.968 total time=   0.2s
[CV 2/3] END leaf_size=296, n_neighbors=37, p=1;, score=-2.187 total time=   0.2s
[CV 3/3] END leaf_size=296, n_neighbors=37, p=1;, score=-2.134 total time=   0.2s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=3, n_neighbors=14, p=1;, score=-1.917 total time=   0.2s
[CV 2/3] END .leaf_size=3, n_neighbors=14, p=1;, score=-2.121 total time=   0.2s
[CV 3/3] END .leaf_size=3, n_neighbors=14, p=1;, score=-2.114 total time=   0.2s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=300, n_neighbors=14, p=1;, score=-1.917 total time=   0.2s
[CV 2/3] END leaf_size=300, n_neighbors=14, p=1;, score=-2.121 total time=   0.2s
[CV 3/3] END leaf_size=300, n_neighbors=14, p=1;, score=-2.114 total time=   0.2s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=298, n_neighbors=14, p=1;, score=-1.917 total time=   0.2s
[CV 2/3] END leaf_size=298, n_neighbors=14, p=1;, score=-2.121 total time=   0.2s
[CV 3/3] END leaf_size=298, n_neighbors=14, p=1;, score=-2.114 total time=   0.2s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=3, n_neighbors=14, p=1;, score=-1.917 total time=   0.2s
[CV 2/3] END .leaf_size=3, n_neighbors=14, p=1;, score=-2.121 total time=   0.2s
[CV 3/3] END .leaf_size=3, n_neighbors=14, p=1;, score=-2.114 total time=   0.2s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=3, n_neighbors=10, p=1;, score=-1.948 total time=   0.2s
[CV 2/3] END .leaf_size=3, n_neighbors=10, p=1;, score=-2.117 total time=   0.2s
[CV 3/3] END .leaf_size=3, n_neighbors=10, p=1;, score=-2.131 total time=   0.2s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=4, n_neighbors=14, p=1;, score=-1.917 total time=   0.2s
[CV 2/3] END .leaf_size=4, n_neighbors=14, p=1;, score=-2.121 total time=   0.2s
[CV 3/3] END .leaf_size=4, n_neighbors=14, p=1;, score=-2.114 total time=   0.2s
{'mean_fit_time': array([0.00385602, 0.00368897, 0.004035  , 0.00446765, 0.00483735,
       0.00461102, 0.00441988, 0.00419148, 0.00474517, 0.00471052,
       0.00446685, 0.00446351, 0.00423725, 0.00454624, 0.00446137,
       0.00359615, 0.00342933, 0.00334056, 0.0035127 , 0.00375096,
       0.00365742, 0.00441607, 0.00443602, 0.00441202, 0.00419132,
       0.00447003, 0.00440105, 0.00454259, 0.00439397, 0.00435456,
       0.00401441, 0.00434113, 0.00402999, 0.00376574, 0.00384219,
       0.00391968, 0.00369541, 0.00380158, 0.00352565, 0.00409563,
       0.00397579, 0.00398421, 0.00358621, 0.00375438, 0.00333317,
       0.00344094, 0.00371122, 0.00328056, 0.00320387, 0.00378482]), 'std_fit_time': array([9.34018415e-04, 1.76677694e-04, 5.32418849e-04, 5.18805013e-05,
       8.09383481e-04, 5.98029969e-05, 1.07483569e-04, 1.14715487e-04,
       2.29582305e-04, 2.44123731e-04, 3.20236320e-04, 1.54321028e-04,
       1.78632680e-04, 5.11875355e-04, 1.01264661e-03, 2.50194927e-04,
       2.24513375e-04, 3.15141887e-04, 3.31282899e-04, 4.15661184e-04,
       3.90544349e-04, 4.25104375e-04, 5.17183628e-04, 2.94903212e-05,
       3.60569845e-04, 5.62860648e-04, 4.58182134e-04, 4.90976509e-04,
       2.70681737e-04, 3.88622495e-04, 3.19407425e-04, 5.00438534e-04,
       7.24077212e-04, 4.14088178e-04, 4.13539635e-04, 6.76388154e-04,
       3.38425765e-04, 4.41835151e-04, 3.34884128e-04, 7.38921461e-04,
       7.44826798e-04, 7.33332220e-04, 2.98508334e-04, 3.90125266e-04,
       1.30744038e-04, 2.30397920e-04, 3.38437336e-04, 8.39951809e-05,
       7.67448630e-05, 5.77229888e-04]), 'mean_score_time': array([0.15553157, 0.15670085, 0.11469221, 0.15732964, 0.11838984,
       0.11275061, 0.15665603, 0.15598806, 0.11313645, 0.13578431,
       0.15884932, 0.12630073, 0.16814891, 0.16932646, 0.1602571 ,
       0.1751171 , 0.15684581, 0.16834275, 0.16329694, 0.12663388,
       0.16183837, 0.16386525, 0.16605051, 0.16824889, 0.12175322,
       0.16095511, 0.16693219, 0.1671377 , 0.12365476, 0.16712062,
       0.16432269, 0.1179866 , 0.16838455, 0.16387836, 0.16700737,
       0.16681012, 0.15549501, 0.15730898, 0.16210691, 0.15748684,
       0.15737112, 0.1174012 , 0.16482957, 0.15847683, 0.17413855,
       0.1736265 , 0.16472832, 0.16108648, 0.15633718, 0.16417901]), 'std_score_time': array([0.00022525, 0.00031526, 0.0001143 , 0.00069131, 0.00509003,
       0.00218856, 0.00055037, 0.00011898, 0.00283605, 0.03041566,
       0.00379743, 0.01870454, 0.01681694, 0.0188635 , 0.0048691 ,
       0.02738935, 0.00036775, 0.01500618, 0.00697739, 0.01838782,
       0.00937898, 0.01116808, 0.01488941, 0.01741749, 0.0111085 ,
       0.004082  , 0.01248509, 0.01593757, 0.0144368 , 0.01709106,
       0.01139699, 0.00452698, 0.01767087, 0.01184511, 0.01632998,
       0.01643244, 0.00061784, 0.00225561, 0.0099594 , 0.00353758,
       0.00276754, 0.00565954, 0.01243269, 0.00289228, 0.02478641,
       0.0249755 , 0.01202702, 0.00794753, 0.00047879, 0.01209052]), 'param_leaf_size': masked_array(data=[115, 20, 18, 48, 248, 24, 262, 250, 127, 230, 3, 293,
                   3, 3, 3, 3, 296, 299, 3, 296, 300, 3, 300, 3, 299, 296,
                   299, 300, 300, 3, 296, 298, 3, 300, 4, 300, 6, 3, 299,
                   3, 300, 4, 3, 296, 3, 300, 298, 3, 3, 4],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False],
       fill_value='?',
            dtype=object), 'param_n_neighbors': masked_array(data=[17, 29, 33, 49, 46, 21, 24, 21, 43, 48, 3, 3, 19, 18,
                   39, 16, 34, 44, 18, 13, 12, 18, 15, 24, 27, 27, 50, 14,
                   17, 14, 31, 38, 14, 14, 14, 14, 8, 14, 14, 14, 14, 9,
                   14, 37, 14, 14, 14, 14, 10, 14],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False],
       fill_value='?',
            dtype=object), 'param_p': masked_array(data=[1, 1, 2, 1, 2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 1, 1,
                   1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1,
                   1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False],
       fill_value='?',
            dtype=object), 'params': [OrderedDict([('leaf_size', 115), ('n_neighbors', 17), ('p', 1)]), OrderedDict([('leaf_size', 20), ('n_neighbors', 29), ('p', 1)]), OrderedDict([('leaf_size', 18), ('n_neighbors', 33), ('p', 2)]), OrderedDict([('leaf_size', 48), ('n_neighbors', 49), ('p', 1)]), OrderedDict([('leaf_size', 248), ('n_neighbors', 46), ('p', 2)]), OrderedDict([('leaf_size', 24), ('n_neighbors', 21), ('p', 2)]), OrderedDict([('leaf_size', 262), ('n_neighbors', 24), ('p', 1)]), OrderedDict([('leaf_size', 250), ('n_neighbors', 21), ('p', 1)]), OrderedDict([('leaf_size', 127), ('n_neighbors', 43), ('p', 2)]), OrderedDict([('leaf_size', 230), ('n_neighbors', 48), ('p', 2)]), OrderedDict([('leaf_size', 3), ('n_neighbors', 3), ('p', 1)]), OrderedDict([('leaf_size', 293), ('n_neighbors', 3), ('p', 2)]), OrderedDict([('leaf_size', 3), ('n_neighbors', 19), ('p', 1)]), OrderedDict([('leaf_size', 3), ('n_neighbors', 18), ('p', 1)]), OrderedDict([('leaf_size', 3), ('n_neighbors', 39), ('p', 1)]), OrderedDict([('leaf_size', 3), ('n_neighbors', 16), ('p', 1)]), OrderedDict([('leaf_size', 296), ('n_neighbors', 34), ('p', 1)]), OrderedDict([('leaf_size', 299), ('n_neighbors', 44), ('p', 1)]), OrderedDict([('leaf_size', 3), ('n_neighbors', 18), ('p', 1)]), OrderedDict([('leaf_size', 296), ('n_neighbors', 13), ('p', 2)]), OrderedDict([('leaf_size', 300), ('n_neighbors', 12), ('p', 1)]), OrderedDict([('leaf_size', 3), ('n_neighbors', 18), ('p', 1)]), OrderedDict([('leaf_size', 300), ('n_neighbors', 15), ('p', 1)]), OrderedDict([('leaf_size', 3), ('n_neighbors', 24), ('p', 1)]), OrderedDict([('leaf_size', 299), ('n_neighbors', 27), ('p', 2)]), OrderedDict([('leaf_size', 296), ('n_neighbors', 27), ('p', 1)]), OrderedDict([('leaf_size', 299), ('n_neighbors', 50), ('p', 1)]), OrderedDict([('leaf_size', 300), ('n_neighbors', 14), ('p', 1)]), OrderedDict([('leaf_size', 300), ('n_neighbors', 17), ('p', 2)]), OrderedDict([('leaf_size', 3), ('n_neighbors', 14), ('p', 1)]), OrderedDict([('leaf_size', 296), ('n_neighbors', 31), ('p', 1)]), OrderedDict([('leaf_size', 298), ('n_neighbors', 38), ('p', 2)]), OrderedDict([('leaf_size', 3), ('n_neighbors', 14), ('p', 1)]), OrderedDict([('leaf_size', 300), ('n_neighbors', 14), ('p', 1)]), OrderedDict([('leaf_size', 4), ('n_neighbors', 14), ('p', 1)]), OrderedDict([('leaf_size', 300), ('n_neighbors', 14), ('p', 1)]), OrderedDict([('leaf_size', 6), ('n_neighbors', 8), ('p', 1)]), OrderedDict([('leaf_size', 3), ('n_neighbors', 14), ('p', 1)]), OrderedDict([('leaf_size', 299), ('n_neighbors', 14), ('p', 1)]), OrderedDict([('leaf_size', 3), ('n_neighbors', 14), ('p', 1)]), OrderedDict([('leaf_size', 300), ('n_neighbors', 14), ('p', 1)]), OrderedDict([('leaf_size', 4), ('n_neighbors', 9), ('p', 2)]), OrderedDict([('leaf_size', 3), ('n_neighbors', 14), ('p', 1)]), OrderedDict([('leaf_size', 296), ('n_neighbors', 37), ('p', 1)]), OrderedDict([('leaf_size', 3), ('n_neighbors', 14), ('p', 1)]), OrderedDict([('leaf_size', 300), ('n_neighbors', 14), ('p', 1)]), OrderedDict([('leaf_size', 298), ('n_neighbors', 14), ('p', 1)]), OrderedDict([('leaf_size', 3), ('n_neighbors', 14), ('p', 1)]), OrderedDict([('leaf_size', 3), ('n_neighbors', 10), ('p', 1)]), OrderedDict([('leaf_size', 4), ('n_neighbors', 14), ('p', 1)])], 'split0_test_score': array([-1.9365352 , -1.94467301, -2.06644851, -1.99846041, -2.08074734,
       -2.03836984, -1.95279342, -1.94984952, -2.06758363, -2.07937535,
       -2.15909346, -2.32938477, -1.94097115, -1.93143134, -1.97105248,
       -1.93352667, -1.95684926, -1.97955564, -1.93143134, -2.04897864,
       -1.95286536, -1.93143134, -1.92149712, -1.95279342, -2.0515126 ,
       -1.95432169, -2.00076052, -1.91684672, -2.02927378, -1.91684672,
       -1.94822347, -2.07670983, -1.91684672, -1.91684672, -1.91684672,
       -1.91684672, -1.94586119, -1.91684672, -1.91684672, -1.91684672,
       -1.91684672, -2.06603477, -1.91684672, -1.96816658, -1.91684672,
       -1.91684672, -1.91684672, -1.91684672, -1.94790523, -1.91684672]), 'split1_test_score': array([-2.13609958, -2.15768841, -2.29519647, -2.23176648, -2.34720762,
       -2.25625879, -2.15251178, -2.14377463, -2.33391535, -2.3533904 ,
       -2.2764192 , -2.3731282 , -2.12688569, -2.1326712 , -2.19542142,
       -2.13496754, -2.17403005, -2.22879396, -2.1326712 , -2.23932364,
       -2.12093404, -2.1326712 , -2.1260774 , -2.15251178, -2.29142755,
       -2.15996775, -2.23379883, -2.12143437, -2.24738679, -2.12143437,
       -2.16862091, -2.32299223, -2.12143437, -2.12143437, -2.12143437,
       -2.12143437, -2.14412276, -2.12143437, -2.12143437, -2.12143437,
       -2.12143437, -2.21972614, -2.12143437, -2.18709156, -2.12143437,
       -2.12143437, -2.12143437, -2.12143437, -2.1166124 , -2.12143437]), 'split2_test_score': array([-2.10285315, -2.11662244, -2.22093917, -2.13433895, -2.23302587,
       -2.24465985, -2.09565275, -2.1030432 , -2.23256167, -2.23526887,
       -2.33443506, -2.34651589, -2.10460811, -2.10584448, -2.1287825 ,
       -2.10908053, -2.13622304, -2.12193356, -2.10584448, -2.23741913,
       -2.13877649, -2.10584448, -2.11693649, -2.09565275, -2.23149846,
       -2.10080775, -2.13646839, -2.11419493, -2.23673416, -2.11419493,
       -2.12734619, -2.22019688, -2.11419493, -2.11419493, -2.11419493,
       -2.11419493, -2.13624018, -2.11419493, -2.11419493, -2.11419493,
       -2.11419493, -2.24180213, -2.11419493, -2.13428394, -2.11419493,
       -2.11419493, -2.11419493, -2.11419493, -2.13070283, -2.11419493]), 'mean_test_score': array([-2.05849598, -2.07299462, -2.19419472, -2.12152195, -2.22032694,
       -2.17976282, -2.06698598, -2.06555578, -2.21135355, -2.22267821,
       -2.25664924, -2.34967629, -2.05748831, -2.05664901, -2.0984188 ,
       -2.05919158, -2.08903412, -2.11009439, -2.05664901, -2.17524047,
       -2.07085863, -2.05664901, -2.05483701, -2.06698598, -2.19147953,
       -2.07169906, -2.12367592, -2.05082534, -2.17113158, -2.05082534,
       -2.08139686, -2.20663298, -2.05082534, -2.05082534, -2.05082534,
       -2.05082534, -2.07540804, -2.05082534, -2.05082534, -2.05082534,
       -2.05082534, -2.17585435, -2.05082534, -2.09651403, -2.05082534,
       -2.05082534, -2.05082534, -2.05082534, -2.06507349, -2.05082534]), 'std_test_score': array([0.08730084, 0.09227289, 0.09528153, 0.09567702, 0.10915194,
       0.10009201, 0.08401664, 0.08348939, 0.10975878, 0.11221989,
       0.07293517, 0.01799746, 0.08289053, 0.08921702, 0.09408089,
       0.08948477, 0.09473461, 0.10209492, 0.08921702, 0.08928398,
       0.08375121, 0.08921702, 0.09435936, 0.08401664, 0.10195075,
       0.08644097, 0.09556655, 0.09478328, 0.10040284, 0.09478328,
       0.09566352, 0.10100079, 0.09478328, 0.09478328, 0.09478328,
       0.09478328, 0.09165997, 0.09478328, 0.09478328, 0.09478328,
       0.09478328, 0.07817541, 0.09478328, 0.0932808 , 0.09478328,
       0.09478328, 0.09478328, 0.09478328, 0.08304993, 0.09478328]), 'rank_test_score': array([22, 30, 44, 37, 47, 42, 26, 25, 46, 48, 49, 50, 21, 18, 35, 23, 33,
       36, 18, 40, 28, 18, 17, 26, 43, 29, 38,  1, 39,  1, 32, 45,  1,  1,
        1,  1, 31,  1,  1,  1,  1, 41,  1, 34,  1,  1,  1,  1, 24,  1],
      dtype=int32)}
-2.0508253411752335
OrderedDict([('leaf_size', 300), ('n_neighbors', 14), ('p', 1)])
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=229, n_neighbors=19, p=2;, score=-2.240 total time=   0.1s
[CV 2/3] END leaf_size=229, n_neighbors=19, p=2;, score=-2.532 total time=   0.1s
[CV 3/3] END leaf_size=229, n_neighbors=19, p=2;, score=-2.305 total time=   0.1s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=105, n_neighbors=34, p=2;, score=-2.237 total time=   0.1s
[CV 2/3] END leaf_size=105, n_neighbors=34, p=2;, score=-2.519 total time=   0.1s
[CV 3/3] END leaf_size=105, n_neighbors=34, p=2;, score=-2.333 total time=   0.1s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=67, n_neighbors=14, p=1;, score=-2.174 total time=   0.2s
[CV 2/3] END leaf_size=67, n_neighbors=14, p=1;, score=-2.444 total time=   0.2s
[CV 3/3] END leaf_size=67, n_neighbors=14, p=1;, score=-2.219 total time=   0.2s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=155, n_neighbors=22, p=2;, score=-2.248 total time=   0.1s
[CV 2/3] END leaf_size=155, n_neighbors=22, p=2;, score=-2.534 total time=   0.1s
[CV 3/3] END leaf_size=155, n_neighbors=22, p=2;, score=-2.293 total time=   0.1s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=124, n_neighbors=25, p=1;, score=-2.142 total time=   0.2s
[CV 2/3] END leaf_size=124, n_neighbors=25, p=1;, score=-2.434 total time=   0.2s
[CV 3/3] END leaf_size=124, n_neighbors=25, p=1;, score=-2.211 total time=   0.2s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=238, n_neighbors=48, p=1;, score=-2.144 total time=   0.2s
[CV 2/3] END leaf_size=238, n_neighbors=48, p=1;, score=-2.454 total time=   0.2s
[CV 3/3] END leaf_size=238, n_neighbors=48, p=1;, score=-2.251 total time=   0.2s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=222, n_neighbors=46, p=1;, score=-2.147 total time=   0.2s
[CV 2/3] END leaf_size=222, n_neighbors=46, p=1;, score=-2.454 total time=   0.2s
[CV 3/3] END leaf_size=222, n_neighbors=46, p=1;, score=-2.252 total time=   0.2s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=148, n_neighbors=29, p=2;, score=-2.229 total time=   0.1s
[CV 2/3] END leaf_size=148, n_neighbors=29, p=2;, score=-2.532 total time=   0.1s
[CV 3/3] END leaf_size=148, n_neighbors=29, p=2;, score=-2.328 total time=   0.1s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=71, n_neighbors=6, p=1;, score=-2.251 total time=   0.2s
[CV 2/3] END .leaf_size=71, n_neighbors=6, p=1;, score=-2.428 total time=   0.2s
[CV 3/3] END .leaf_size=71, n_neighbors=6, p=1;, score=-2.280 total time=   0.2s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=260, n_neighbors=35, p=1;, score=-2.142 total time=   0.2s
[CV 2/3] END leaf_size=260, n_neighbors=35, p=1;, score=-2.421 total time=   0.2s
[CV 3/3] END leaf_size=260, n_neighbors=35, p=1;, score=-2.250 total time=   0.2s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=299, n_neighbors=50, p=2;, score=-2.237 total time=   0.2s
[CV 2/3] END leaf_size=299, n_neighbors=50, p=2;, score=-2.537 total time=   0.1s
[CV 3/3] END leaf_size=299, n_neighbors=50, p=2;, score=-2.368 total time=   0.1s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=300, n_neighbors=23, p=1;, score=-2.145 total time=   0.2s
[CV 2/3] END leaf_size=300, n_neighbors=23, p=1;, score=-2.435 total time=   0.2s
[CV 3/3] END leaf_size=300, n_neighbors=23, p=1;, score=-2.204 total time=   0.2s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=3, n_neighbors=22, p=1;, score=-2.134 total time=   0.2s
[CV 2/3] END .leaf_size=3, n_neighbors=22, p=1;, score=-2.435 total time=   0.2s
[CV 3/3] END .leaf_size=3, n_neighbors=22, p=1;, score=-2.193 total time=   0.2s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=14, n_neighbors=3, p=2;, score=-2.541 total time=   0.2s
[CV 2/3] END .leaf_size=14, n_neighbors=3, p=2;, score=-2.777 total time=   0.1s
[CV 3/3] END .leaf_size=14, n_neighbors=3, p=2;, score=-2.630 total time=   0.1s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=3, n_neighbors=19, p=1;, score=-2.135 total time=   0.2s
[CV 2/3] END .leaf_size=3, n_neighbors=19, p=1;, score=-2.429 total time=   0.2s
[CV 3/3] END .leaf_size=3, n_neighbors=19, p=1;, score=-2.222 total time=   0.2s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=3, n_neighbors=30, p=1;, score=-2.125 total time=   0.2s
[CV 2/3] END .leaf_size=3, n_neighbors=30, p=1;, score=-2.433 total time=   0.2s
[CV 3/3] END .leaf_size=3, n_neighbors=30, p=1;, score=-2.228 total time=   0.2s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=6, n_neighbors=40, p=1;, score=-2.146 total time=   0.2s
[CV 2/3] END .leaf_size=6, n_neighbors=40, p=1;, score=-2.441 total time=   0.2s
[CV 3/3] END .leaf_size=6, n_neighbors=40, p=1;, score=-2.251 total time=   0.2s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=27, n_neighbors=50, p=1;, score=-2.148 total time=   0.2s
[CV 2/3] END leaf_size=27, n_neighbors=50, p=1;, score=-2.454 total time=   0.2s
[CV 3/3] END leaf_size=27, n_neighbors=50, p=1;, score=-2.252 total time=   0.2s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=300, n_neighbors=19, p=1;, score=-2.135 total time=   0.2s
[CV 2/3] END leaf_size=300, n_neighbors=19, p=1;, score=-2.429 total time=   0.2s
[CV 3/3] END leaf_size=300, n_neighbors=19, p=1;, score=-2.222 total time=   0.2s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=3, n_neighbors=22, p=1;, score=-2.134 total time=   0.2s
[CV 2/3] END .leaf_size=3, n_neighbors=22, p=1;, score=-2.435 total time=   0.2s
[CV 3/3] END .leaf_size=3, n_neighbors=22, p=1;, score=-2.193 total time=   0.2s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=4, n_neighbors=34, p=1;, score=-2.144 total time=   0.2s
[CV 2/3] END .leaf_size=4, n_neighbors=34, p=1;, score=-2.425 total time=   0.2s
[CV 3/3] END .leaf_size=4, n_neighbors=34, p=1;, score=-2.250 total time=   0.2s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=299, n_neighbors=27, p=1;, score=-2.128 total time=   0.2s
[CV 2/3] END leaf_size=299, n_neighbors=27, p=1;, score=-2.441 total time=   0.2s
[CV 3/3] END leaf_size=299, n_neighbors=27, p=1;, score=-2.210 total time=   0.2s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=5, n_neighbors=26, p=1;, score=-2.134 total time=   0.2s
[CV 2/3] END .leaf_size=5, n_neighbors=26, p=1;, score=-2.436 total time=   0.2s
[CV 3/3] END .leaf_size=5, n_neighbors=26, p=1;, score=-2.217 total time=   0.2s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=3, n_neighbors=22, p=1;, score=-2.134 total time=   0.2s
[CV 2/3] END .leaf_size=3, n_neighbors=22, p=1;, score=-2.435 total time=   0.2s
[CV 3/3] END .leaf_size=3, n_neighbors=22, p=1;, score=-2.193 total time=   0.2s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=3, n_neighbors=43, p=2;, score=-2.236 total time=   0.1s
[CV 2/3] END .leaf_size=3, n_neighbors=43, p=2;, score=-2.543 total time=   0.1s
[CV 3/3] END .leaf_size=3, n_neighbors=43, p=2;, score=-2.348 total time=   0.1s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=300, n_neighbors=30, p=1;, score=-2.125 total time=   0.2s
[CV 2/3] END leaf_size=300, n_neighbors=30, p=1;, score=-2.433 total time=   0.2s
[CV 3/3] END leaf_size=300, n_neighbors=30, p=1;, score=-2.228 total time=   0.2s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=3, n_neighbors=21, p=1;, score=-2.135 total time=   0.2s
[CV 2/3] END .leaf_size=3, n_neighbors=21, p=1;, score=-2.436 total time=   0.2s
[CV 3/3] END .leaf_size=3, n_neighbors=21, p=1;, score=-2.208 total time=   0.2s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=3, n_neighbors=22, p=1;, score=-2.134 total time=   0.2s
[CV 2/3] END .leaf_size=3, n_neighbors=22, p=1;, score=-2.435 total time=   0.2s
[CV 3/3] END .leaf_size=3, n_neighbors=22, p=1;, score=-2.193 total time=   0.2s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=3, n_neighbors=22, p=1;, score=-2.134 total time=   0.2s
[CV 2/3] END .leaf_size=3, n_neighbors=22, p=1;, score=-2.435 total time=   0.2s
[CV 3/3] END .leaf_size=3, n_neighbors=22, p=1;, score=-2.193 total time=   0.2s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=15, n_neighbors=3, p=1;, score=-2.465 total time=   0.2s
[CV 2/3] END .leaf_size=15, n_neighbors=3, p=1;, score=-2.485 total time=   0.2s
[CV 3/3] END .leaf_size=15, n_neighbors=3, p=1;, score=-2.409 total time=   0.2s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=300, n_neighbors=10, p=1;, score=-2.264 total time=   0.2s
[CV 2/3] END leaf_size=300, n_neighbors=10, p=1;, score=-2.415 total time=   0.2s
[CV 3/3] END leaf_size=300, n_neighbors=10, p=1;, score=-2.246 total time=   0.2s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=300, n_neighbors=17, p=1;, score=-2.146 total time=   0.2s
[CV 2/3] END leaf_size=300, n_neighbors=17, p=1;, score=-2.429 total time=   0.2s
[CV 3/3] END leaf_size=300, n_neighbors=17, p=1;, score=-2.217 total time=   0.2s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=3, n_neighbors=28, p=1;, score=-2.130 total time=   0.2s
[CV 2/3] END .leaf_size=3, n_neighbors=28, p=1;, score=-2.437 total time=   0.2s
[CV 3/3] END .leaf_size=3, n_neighbors=28, p=1;, score=-2.219 total time=   0.2s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=3, n_neighbors=15, p=1;, score=-2.175 total time=   0.2s
[CV 2/3] END .leaf_size=3, n_neighbors=15, p=1;, score=-2.433 total time=   0.2s
[CV 3/3] END .leaf_size=3, n_neighbors=15, p=1;, score=-2.218 total time=   0.2s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=3, n_neighbors=37, p=1;, score=-2.141 total time=   0.2s
[CV 2/3] END .leaf_size=3, n_neighbors=37, p=1;, score=-2.423 total time=   0.2s
[CV 3/3] END .leaf_size=3, n_neighbors=37, p=1;, score=-2.250 total time=   0.2s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=3, n_neighbors=23, p=1;, score=-2.145 total time=   0.2s
[CV 2/3] END .leaf_size=3, n_neighbors=23, p=1;, score=-2.435 total time=   0.2s
[CV 3/3] END .leaf_size=3, n_neighbors=23, p=1;, score=-2.204 total time=   0.2s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=5, n_neighbors=14, p=1;, score=-2.174 total time=   0.2s
[CV 2/3] END .leaf_size=5, n_neighbors=14, p=1;, score=-2.444 total time=   0.2s
[CV 3/3] END .leaf_size=5, n_neighbors=14, p=1;, score=-2.219 total time=   0.2s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=186, n_neighbors=17, p=1;, score=-2.146 total time=   0.2s
[CV 2/3] END leaf_size=186, n_neighbors=17, p=1;, score=-2.429 total time=   0.2s
[CV 3/3] END leaf_size=186, n_neighbors=17, p=1;, score=-2.217 total time=   0.2s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=6, n_neighbors=18, p=1;, score=-2.143 total time=   0.2s
[CV 2/3] END .leaf_size=6, n_neighbors=18, p=1;, score=-2.424 total time=   0.2s
[CV 3/3] END .leaf_size=6, n_neighbors=18, p=1;, score=-2.218 total time=   0.2s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=300, n_neighbors=18, p=1;, score=-2.143 total time=   0.2s
[CV 2/3] END leaf_size=300, n_neighbors=18, p=1;, score=-2.424 total time=   0.2s
[CV 3/3] END leaf_size=300, n_neighbors=18, p=1;, score=-2.218 total time=   0.2s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=15, n_neighbors=18, p=1;, score=-2.143 total time=   0.2s
[CV 2/3] END leaf_size=15, n_neighbors=18, p=1;, score=-2.424 total time=   0.2s
[CV 3/3] END leaf_size=15, n_neighbors=18, p=1;, score=-2.218 total time=   0.2s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=19, n_neighbors=18, p=1;, score=-2.143 total time=   0.2s
[CV 2/3] END leaf_size=19, n_neighbors=18, p=1;, score=-2.424 total time=   0.2s
[CV 3/3] END leaf_size=19, n_neighbors=18, p=1;, score=-2.218 total time=   0.2s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=14, n_neighbors=18, p=1;, score=-2.143 total time=   0.2s
[CV 2/3] END leaf_size=14, n_neighbors=18, p=1;, score=-2.424 total time=   0.2s
[CV 3/3] END leaf_size=14, n_neighbors=18, p=1;, score=-2.218 total time=   0.2s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=300, n_neighbors=43, p=1;, score=-2.149 total time=   0.2s
[CV 2/3] END leaf_size=300, n_neighbors=43, p=1;, score=-2.441 total time=   0.2s
[CV 3/3] END leaf_size=300, n_neighbors=43, p=1;, score=-2.247 total time=   0.2s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=19, n_neighbors=18, p=1;, score=-2.143 total time=   0.2s
[CV 2/3] END leaf_size=19, n_neighbors=18, p=1;, score=-2.424 total time=   0.2s
[CV 3/3] END leaf_size=19, n_neighbors=18, p=1;, score=-2.218 total time=   0.2s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=5, n_neighbors=13, p=2;, score=-2.266 total time=   0.1s
[CV 2/3] END .leaf_size=5, n_neighbors=13, p=2;, score=-2.537 total time=   0.1s
[CV 3/3] END .leaf_size=5, n_neighbors=13, p=2;, score=-2.315 total time=   0.1s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=300, n_neighbors=37, p=1;, score=-2.141 total time=   0.2s
[CV 2/3] END leaf_size=300, n_neighbors=37, p=1;, score=-2.423 total time=   0.2s
[CV 3/3] END leaf_size=300, n_neighbors=37, p=1;, score=-2.250 total time=   0.2s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=300, n_neighbors=22, p=1;, score=-2.134 total time=   0.2s
[CV 2/3] END leaf_size=300, n_neighbors=22, p=1;, score=-2.435 total time=   0.2s
[CV 3/3] END leaf_size=300, n_neighbors=22, p=1;, score=-2.193 total time=   0.2s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=300, n_neighbors=22, p=1;, score=-2.134 total time=   0.2s
[CV 2/3] END leaf_size=300, n_neighbors=22, p=1;, score=-2.435 total time=   0.2s
[CV 3/3] END leaf_size=300, n_neighbors=22, p=1;, score=-2.193 total time=   0.2s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=300, n_neighbors=22, p=1;, score=-2.134 total time=   0.2s
[CV 2/3] END leaf_size=300, n_neighbors=22, p=1;, score=-2.435 total time=   0.2s
[CV 3/3] END leaf_size=300, n_neighbors=22, p=1;, score=-2.193 total time=   0.2s
{'mean_fit_time': array([0.00397507, 0.00491428, 0.00460227, 0.00462063, 0.00470575,
       0.00437713, 0.00451008, 0.00463374, 0.00437466, 0.00563526,
       0.00514062, 0.00440264, 0.00461499, 0.0048817 , 0.00446566,
       0.00398684, 0.0048124 , 0.00429328, 0.00429066, 0.00419148,
       0.0039587 , 0.00429694, 0.00423749, 0.00406694, 0.00461992,
       0.00409889, 0.00378831, 0.00380985, 0.00395584, 0.00419188,
       0.0041426 , 0.00393391, 0.00407839, 0.00438786, 0.0038619 ,
       0.00414197, 0.00440804, 0.00401147, 0.00423924, 0.00402975,
       0.00422899, 0.00419966, 0.00395974, 0.00362388, 0.00390021,
       0.00440073, 0.00377417, 0.00418766, 0.00387772, 0.00446924]), 'std_fit_time': array([1.22020895e-03, 1.36635411e-04, 2.34658984e-04, 1.24155024e-04,
       2.43418584e-04, 5.00881101e-04, 3.75140520e-05, 2.61251092e-04,
       1.08228088e-04, 1.78835786e-03, 1.16952569e-04, 1.65926999e-04,
       2.75493628e-04, 3.17923961e-04, 2.25176668e-04, 1.74006693e-04,
       3.03774608e-04, 3.75794188e-04, 3.80592596e-04, 3.79505381e-04,
       2.44550761e-04, 6.88706951e-04, 5.06285669e-04, 2.67496792e-04,
       4.81958006e-04, 4.13986431e-04, 2.13329819e-04, 1.76626638e-04,
       4.33211523e-04, 5.64951861e-04, 1.04735219e-04, 5.08078476e-04,
       7.34002977e-04, 1.01321071e-04, 2.93157207e-04, 3.99018516e-04,
       5.37435894e-04, 3.96512024e-04, 5.14127331e-04, 4.85021020e-04,
       5.97054657e-04, 6.17157175e-04, 3.75440876e-04, 3.53788179e-04,
       6.90962472e-04, 4.42986639e-04, 1.89592697e-04, 1.54970039e-05,
       2.11896434e-04, 6.20645047e-04]), 'mean_score_time': array([0.1141336 , 0.11469483, 0.15529911, 0.11380935, 0.15612189,
       0.15837685, 0.15758721, 0.11466432, 0.15464505, 0.16561302,
       0.13382657, 0.17113972, 0.16751552, 0.13498267, 0.17092466,
       0.16807564, 0.16719286, 0.16383656, 0.16271305, 0.1721882 ,
       0.16146906, 0.16850543, 0.16612736, 0.156516  , 0.11409179,
       0.16668026, 0.16597788, 0.16735625, 0.16810584, 0.16046143,
       0.16117819, 0.16378506, 0.15850218, 0.15577992, 0.15752157,
       0.15655677, 0.15917738, 0.16461913, 0.15617275, 0.15637509,
       0.16204246, 0.16481654, 0.16273387, 0.15953739, 0.16828211,
       0.1173358 , 0.15696653, 0.15616051, 0.15650566, 0.15635959]), 'std_score_time': array([0.00081775, 0.00015132, 0.000741  , 0.0004137 , 0.00049862,
       0.00049577, 0.00074056, 0.00071556, 0.00048568, 0.01264885,
       0.02621168, 0.02034869, 0.01555709, 0.03111201, 0.02140165,
       0.01630777, 0.0148771 , 0.00884801, 0.00984436, 0.02449588,
       0.0026506 , 0.01668115, 0.01458653, 0.00015646, 0.00093547,
       0.01464991, 0.01434293, 0.01622539, 0.01646087, 0.00840982,
       0.00885729, 0.01130373, 0.00365016, 0.00158055, 0.00092148,
       0.00062884, 0.00626073, 0.01338989, 0.00179808, 0.00069709,
       0.009363  , 0.01268394, 0.00970481, 0.00372198, 0.00920277,
       0.00361906, 0.00061657, 0.00100271, 0.00084137, 0.00154321]), 'param_leaf_size': masked_array(data=[229, 105, 67, 155, 124, 238, 222, 148, 71, 260, 299,
                   300, 3, 14, 3, 3, 6, 27, 300, 3, 4, 299, 5, 3, 3, 300,
                   3, 3, 3, 15, 300, 300, 3, 3, 3, 3, 5, 186, 6, 300, 15,
                   19, 14, 300, 19, 5, 300, 300, 300, 300],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False],
       fill_value='?',
            dtype=object), 'param_n_neighbors': masked_array(data=[19, 34, 14, 22, 25, 48, 46, 29, 6, 35, 50, 23, 22, 3,
                   19, 30, 40, 50, 19, 22, 34, 27, 26, 22, 43, 30, 21, 22,
                   22, 3, 10, 17, 28, 15, 37, 23, 14, 17, 18, 18, 18, 18,
                   18, 43, 18, 13, 37, 22, 22, 22],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False],
       fill_value='?',
            dtype=object), 'param_p': masked_array(data=[2, 2, 1, 2, 1, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1,
                   1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                   1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False],
       fill_value='?',
            dtype=object), 'params': [OrderedDict([('leaf_size', 229), ('n_neighbors', 19), ('p', 2)]), OrderedDict([('leaf_size', 105), ('n_neighbors', 34), ('p', 2)]), OrderedDict([('leaf_size', 67), ('n_neighbors', 14), ('p', 1)]), OrderedDict([('leaf_size', 155), ('n_neighbors', 22), ('p', 2)]), OrderedDict([('leaf_size', 124), ('n_neighbors', 25), ('p', 1)]), OrderedDict([('leaf_size', 238), ('n_neighbors', 48), ('p', 1)]), OrderedDict([('leaf_size', 222), ('n_neighbors', 46), ('p', 1)]), OrderedDict([('leaf_size', 148), ('n_neighbors', 29), ('p', 2)]), OrderedDict([('leaf_size', 71), ('n_neighbors', 6), ('p', 1)]), OrderedDict([('leaf_size', 260), ('n_neighbors', 35), ('p', 1)]), OrderedDict([('leaf_size', 299), ('n_neighbors', 50), ('p', 2)]), OrderedDict([('leaf_size', 300), ('n_neighbors', 23), ('p', 1)]), OrderedDict([('leaf_size', 3), ('n_neighbors', 22), ('p', 1)]), OrderedDict([('leaf_size', 14), ('n_neighbors', 3), ('p', 2)]), OrderedDict([('leaf_size', 3), ('n_neighbors', 19), ('p', 1)]), OrderedDict([('leaf_size', 3), ('n_neighbors', 30), ('p', 1)]), OrderedDict([('leaf_size', 6), ('n_neighbors', 40), ('p', 1)]), OrderedDict([('leaf_size', 27), ('n_neighbors', 50), ('p', 1)]), OrderedDict([('leaf_size', 300), ('n_neighbors', 19), ('p', 1)]), OrderedDict([('leaf_size', 3), ('n_neighbors', 22), ('p', 1)]), OrderedDict([('leaf_size', 4), ('n_neighbors', 34), ('p', 1)]), OrderedDict([('leaf_size', 299), ('n_neighbors', 27), ('p', 1)]), OrderedDict([('leaf_size', 5), ('n_neighbors', 26), ('p', 1)]), OrderedDict([('leaf_size', 3), ('n_neighbors', 22), ('p', 1)]), OrderedDict([('leaf_size', 3), ('n_neighbors', 43), ('p', 2)]), OrderedDict([('leaf_size', 300), ('n_neighbors', 30), ('p', 1)]), OrderedDict([('leaf_size', 3), ('n_neighbors', 21), ('p', 1)]), OrderedDict([('leaf_size', 3), ('n_neighbors', 22), ('p', 1)]), OrderedDict([('leaf_size', 3), ('n_neighbors', 22), ('p', 1)]), OrderedDict([('leaf_size', 15), ('n_neighbors', 3), ('p', 1)]), OrderedDict([('leaf_size', 300), ('n_neighbors', 10), ('p', 1)]), OrderedDict([('leaf_size', 300), ('n_neighbors', 17), ('p', 1)]), OrderedDict([('leaf_size', 3), ('n_neighbors', 28), ('p', 1)]), OrderedDict([('leaf_size', 3), ('n_neighbors', 15), ('p', 1)]), OrderedDict([('leaf_size', 3), ('n_neighbors', 37), ('p', 1)]), OrderedDict([('leaf_size', 3), ('n_neighbors', 23), ('p', 1)]), OrderedDict([('leaf_size', 5), ('n_neighbors', 14), ('p', 1)]), OrderedDict([('leaf_size', 186), ('n_neighbors', 17), ('p', 1)]), OrderedDict([('leaf_size', 6), ('n_neighbors', 18), ('p', 1)]), OrderedDict([('leaf_size', 300), ('n_neighbors', 18), ('p', 1)]), OrderedDict([('leaf_size', 15), ('n_neighbors', 18), ('p', 1)]), OrderedDict([('leaf_size', 19), ('n_neighbors', 18), ('p', 1)]), OrderedDict([('leaf_size', 14), ('n_neighbors', 18), ('p', 1)]), OrderedDict([('leaf_size', 300), ('n_neighbors', 43), ('p', 1)]), OrderedDict([('leaf_size', 19), ('n_neighbors', 18), ('p', 1)]), OrderedDict([('leaf_size', 5), ('n_neighbors', 13), ('p', 2)]), OrderedDict([('leaf_size', 300), ('n_neighbors', 37), ('p', 1)]), OrderedDict([('leaf_size', 300), ('n_neighbors', 22), ('p', 1)]), OrderedDict([('leaf_size', 300), ('n_neighbors', 22), ('p', 1)]), OrderedDict([('leaf_size', 300), ('n_neighbors', 22), ('p', 1)])], 'split0_test_score': array([-2.24025362, -2.23670151, -2.17354003, -2.24765311, -2.14199584,
       -2.14414354, -2.14656393, -2.22927444, -2.25088753, -2.1418893 ,
       -2.23665008, -2.14516183, -2.1336077 , -2.54117082, -2.13504297,
       -2.12534139, -2.14605409, -2.14753362, -2.13504297, -2.1336077 ,
       -2.14389105, -2.12802685, -2.13351667, -2.1336077 , -2.23555426,
       -2.12534139, -2.13484648, -2.1336077 , -2.1336077 , -2.46497266,
       -2.26376729, -2.14550818, -2.12975497, -2.17454251, -2.14133475,
       -2.14516183, -2.17354003, -2.14550818, -2.14341052, -2.14341052,
       -2.14341052, -2.14341052, -2.14341052, -2.14871559, -2.14341052,
       -2.26559503, -2.14133475, -2.1336077 , -2.1336077 , -2.1336077 ]), 'split1_test_score': array([-2.53161375, -2.51943151, -2.44356485, -2.53397018, -2.43418879,
       -2.45360713, -2.45444038, -2.53182084, -2.42750081, -2.42066756,
       -2.53705792, -2.43518204, -2.43452748, -2.77733295, -2.42854379,
       -2.4329443 , -2.44055948, -2.45379489, -2.42854379, -2.43452748,
       -2.42451966, -2.4413362 , -2.43560131, -2.43452748, -2.54324567,
       -2.4329443 , -2.43613658, -2.43452748, -2.43452748, -2.48469044,
       -2.41523937, -2.42895437, -2.43728272, -2.43324081, -2.42313581,
       -2.43518204, -2.44356485, -2.42895437, -2.42415394, -2.42415394,
       -2.42415394, -2.42415394, -2.42415394, -2.44085694, -2.42415394,
       -2.53748475, -2.42313581, -2.43452748, -2.43452748, -2.43452748]), 'split2_test_score': array([-2.3051379 , -2.3329396 , -2.21909422, -2.29320215, -2.21130488,
       -2.25073995, -2.25166584, -2.32815717, -2.27953882, -2.25029515,
       -2.36787342, -2.20427462, -2.19304024, -2.62990071, -2.22203604,
       -2.22798542, -2.25083165, -2.25175316, -2.22203604, -2.19304024,
       -2.24997943, -2.21021643, -2.21735876, -2.19304024, -2.34843515,
       -2.22798542, -2.20840747, -2.19304024, -2.19304024, -2.40884429,
       -2.24607183, -2.21651277, -2.21945903, -2.21835707, -2.25011981,
       -2.20427462, -2.21909422, -2.21651277, -2.21796589, -2.21796589,
       -2.21796589, -2.21796589, -2.21796589, -2.24737211, -2.21796589,
       -2.31466359, -2.25011981, -2.19304024, -2.19304024, -2.19304024]), 'mean_test_score': array([-2.35900176, -2.36302421, -2.27873303, -2.35827515, -2.2624965 ,
       -2.28283021, -2.28422339, -2.36308415, -2.31930905, -2.27095067,
       -2.38052714, -2.2615395 , -2.25372514, -2.64946816, -2.26187427,
       -2.26209037, -2.27914841, -2.28436056, -2.26187427, -2.25372514,
       -2.27279671, -2.25985983, -2.26215892, -2.25372514, -2.37574503,
       -2.26209037, -2.25979684, -2.25372514, -2.25372514, -2.4528358 ,
       -2.30835949, -2.26365844, -2.26216557, -2.27538013, -2.27153012,
       -2.2615395 , -2.27873303, -2.26365844, -2.26184345, -2.26184345,
       -2.26184345, -2.26184345, -2.26184345, -2.27898155, -2.26184345,
       -2.37258112, -2.27153012, -2.25372514, -2.25372514, -2.25372514]), 'std_test_score': array([0.12489641, 0.11736802, 0.11802808, 0.1256191 , 0.12465851,
       0.12835956, 0.12778099, 0.12595899, 0.07739215, 0.11474411,
       0.12296695, 0.12513294, 0.13012858, 0.09740055, 0.12308803,
       0.12787298, 0.1218872 , 0.12713883, 0.12308803, 0.13012858,
       0.11569666, 0.13263745, 0.12732916, 0.13012858, 0.12709019,
       0.12787298, 0.12825647, 0.13012858, 0.13012858, 0.03213137,
       0.07591997, 0.12042279, 0.1291284 , 0.11304844, 0.11603667,
       0.12513294, 0.11802808, 0.12042279, 0.11873822, 0.11873822,
       0.11873822, 0.11873822, 0.11873822, 0.12134252, 0.11873822,
       0.11831268, 0.11603667, 0.13012858, 0.13012858, 0.13012858]), 'rank_test_score': array([43, 44, 33, 42, 25, 37, 38, 45, 41, 28, 48, 11,  1, 50, 19, 21, 36,
       39, 19,  1, 31, 10, 23,  1, 47, 21,  9,  1,  1, 49, 40, 26, 24, 32,
       29, 11, 33, 26, 13, 13, 13, 13, 13, 35, 13, 46, 29,  1,  1,  1],
      dtype=int32)}
-2.253725139333953
OrderedDict([('leaf_size', 3), ('n_neighbors', 22), ('p', 1)])
