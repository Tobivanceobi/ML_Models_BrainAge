no change     /home/modelrep/sadiya/miniconda/condabin/conda
no change     /home/modelrep/sadiya/miniconda/bin/conda
no change     /home/modelrep/sadiya/miniconda/bin/conda-env
no change     /home/modelrep/sadiya/miniconda/bin/activate
no change     /home/modelrep/sadiya/miniconda/bin/deactivate
no change     /home/modelrep/sadiya/miniconda/etc/profile.d/conda.sh
no change     /home/modelrep/sadiya/miniconda/etc/fish/conf.d/conda.fish
no change     /home/modelrep/sadiya/miniconda/shell/condabin/Conda.psm1
no change     /home/modelrep/sadiya/miniconda/shell/condabin/conda-hook.ps1
no change     /home/modelrep/sadiya/miniconda/lib/python3.10/site-packages/xontrib/conda.xsh
no change     /home/modelrep/sadiya/miniconda/etc/profile.d/conda.csh
no change     /home/modelrep/sadiya/.bashrc
No action taken.
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=33, n_neighbors=22, p=2;, score=-2.425 total time=   0.6s
[CV 2/3] END leaf_size=33, n_neighbors=22, p=2;, score=-2.390 total time=   0.5s
[CV 3/3] END leaf_size=33, n_neighbors=22, p=2;, score=-2.370 total time=   0.6s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=84, n_neighbors=42, p=1;, score=-2.396 total time=   0.9s
[CV 2/3] END leaf_size=84, n_neighbors=42, p=1;, score=-2.352 total time=   0.8s
[CV 3/3] END leaf_size=84, n_neighbors=42, p=1;, score=-2.335 total time=   0.9s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=14, n_neighbors=22, p=1;, score=-2.415 total time=   1.1s
[CV 2/3] END leaf_size=14, n_neighbors=22, p=1;, score=-2.371 total time=   1.0s
[CV 3/3] END leaf_size=14, n_neighbors=22, p=1;, score=-2.354 total time=   0.7s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END ..leaf_size=8, n_neighbors=3, p=1;, score=-2.668 total time=   0.5s
[CV 2/3] END ..leaf_size=8, n_neighbors=3, p=1;, score=-2.647 total time=   0.4s
[CV 3/3] END ..leaf_size=8, n_neighbors=3, p=1;, score=-2.628 total time=   0.5s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=14, n_neighbors=35, p=1;, score=-2.399 total time=   0.7s
[CV 2/3] END leaf_size=14, n_neighbors=35, p=1;, score=-2.356 total time=   0.7s
[CV 3/3] END leaf_size=14, n_neighbors=35, p=1;, score=-2.338 total time=   0.7s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=38, n_neighbors=38, p=1;, score=-2.397 total time=   0.8s
[CV 2/3] END leaf_size=38, n_neighbors=38, p=1;, score=-2.355 total time=   0.7s
[CV 3/3] END leaf_size=38, n_neighbors=38, p=1;, score=-2.335 total time=   0.8s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=82, n_neighbors=45, p=1;, score=-2.394 total time=   1.1s
[CV 2/3] END leaf_size=82, n_neighbors=45, p=1;, score=-2.352 total time=   1.0s
[CV 3/3] END leaf_size=82, n_neighbors=45, p=1;, score=-2.336 total time=   1.1s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=13, n_neighbors=26, p=2;, score=-2.417 total time=   0.7s
[CV 2/3] END leaf_size=13, n_neighbors=26, p=2;, score=-2.386 total time=   0.6s
[CV 3/3] END leaf_size=13, n_neighbors=26, p=2;, score=-2.363 total time=   0.6s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=34, n_neighbors=28, p=2;, score=-2.414 total time=   0.6s
[CV 2/3] END leaf_size=34, n_neighbors=28, p=2;, score=-2.384 total time=   0.5s
[CV 3/3] END leaf_size=34, n_neighbors=28, p=2;, score=-2.358 total time=   0.6s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=52, n_neighbors=32, p=1;, score=-2.403 total time=   2.4s
[CV 2/3] END leaf_size=52, n_neighbors=32, p=1;, score=-2.363 total time=   2.3s
[CV 3/3] END leaf_size=52, n_neighbors=32, p=1;, score=-2.342 total time=   2.5s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=3, n_neighbors=50, p=2;, score=-2.405 total time=   0.6s
[CV 2/3] END .leaf_size=3, n_neighbors=50, p=2;, score=-2.366 total time=   0.5s
[CV 3/3] END .leaf_size=3, n_neighbors=50, p=2;, score=-2.353 total time=   0.5s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=100, n_neighbors=50, p=1;, score=-2.392 total time=   2.4s
[CV 2/3] END leaf_size=100, n_neighbors=50, p=1;, score=-2.348 total time=   0.8s
[CV 3/3] END leaf_size=100, n_neighbors=50, p=1;, score=-2.334 total time=   1.1s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=5, n_neighbors=50, p=1;, score=-2.392 total time=   1.7s
[CV 2/3] END .leaf_size=5, n_neighbors=50, p=1;, score=-2.348 total time=   1.5s
[CV 3/3] END .leaf_size=5, n_neighbors=50, p=1;, score=-2.334 total time=   1.6s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=3, n_neighbors=49, p=1;, score=-2.393 total time=   2.1s
[CV 2/3] END .leaf_size=3, n_neighbors=49, p=1;, score=-2.349 total time=   1.9s
[CV 3/3] END .leaf_size=3, n_neighbors=49, p=1;, score=-2.335 total time=   2.0s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=98, n_neighbors=39, p=2;, score=-2.407 total time=   0.7s
[CV 2/3] END leaf_size=98, n_neighbors=39, p=2;, score=-2.374 total time=   0.5s
[CV 3/3] END leaf_size=98, n_neighbors=39, p=2;, score=-2.355 total time=   0.6s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=3, n_neighbors=50, p=1;, score=-2.392 total time=   0.9s
[CV 2/3] END .leaf_size=3, n_neighbors=50, p=1;, score=-2.348 total time=   0.8s
[CV 3/3] END .leaf_size=3, n_neighbors=50, p=1;, score=-2.334 total time=   0.8s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=4, n_neighbors=15, p=1;, score=-2.437 total time=   0.7s
[CV 2/3] END .leaf_size=4, n_neighbors=15, p=1;, score=-2.398 total time=   1.1s
[CV 3/3] END .leaf_size=4, n_neighbors=15, p=1;, score=-2.378 total time=   0.6s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=100, n_neighbors=36, p=1;, score=-2.399 total time=   2.3s
[CV 2/3] END leaf_size=100, n_neighbors=36, p=1;, score=-2.355 total time=   1.0s
[CV 3/3] END leaf_size=100, n_neighbors=36, p=1;, score=-2.337 total time=   2.3s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=99, n_neighbors=27, p=1;, score=-2.408 total time=   0.9s
[CV 2/3] END leaf_size=99, n_neighbors=27, p=1;, score=-2.367 total time=   0.8s
[CV 3/3] END leaf_size=99, n_neighbors=27, p=1;, score=-2.347 total time=   0.9s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=99, n_neighbors=19, p=1;, score=-2.418 total time=   0.9s
[CV 2/3] END leaf_size=99, n_neighbors=19, p=1;, score=-2.383 total time=   0.9s
[CV 3/3] END leaf_size=99, n_neighbors=19, p=1;, score=-2.361 total time=   2.1s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=100, n_neighbors=50, p=1;, score=-2.392 total time=   1.0s
[CV 2/3] END leaf_size=100, n_neighbors=50, p=1;, score=-2.348 total time=   2.2s
[CV 3/3] END leaf_size=100, n_neighbors=50, p=1;, score=-2.334 total time=   0.9s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=100, n_neighbors=50, p=1;, score=-2.392 total time=   1.2s
[CV 2/3] END leaf_size=100, n_neighbors=50, p=1;, score=-2.348 total time=   2.2s
[CV 3/3] END leaf_size=100, n_neighbors=50, p=1;, score=-2.334 total time=   2.4s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=100, n_neighbors=11, p=2;, score=-2.465 total time=   1.2s
[CV 2/3] END leaf_size=100, n_neighbors=11, p=2;, score=-2.443 total time=   0.4s
[CV 3/3] END leaf_size=100, n_neighbors=11, p=2;, score=-2.421 total time=   0.5s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=3, n_neighbors=50, p=1;, score=-2.392 total time=   2.1s
[CV 2/3] END .leaf_size=3, n_neighbors=50, p=1;, score=-2.348 total time=   0.8s
[CV 3/3] END .leaf_size=3, n_neighbors=50, p=1;, score=-2.334 total time=   2.0s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=3, n_neighbors=45, p=2;, score=-2.404 total time=   1.2s
[CV 2/3] END .leaf_size=3, n_neighbors=45, p=2;, score=-2.369 total time=   0.5s
[CV 3/3] END .leaf_size=3, n_neighbors=45, p=2;, score=-2.354 total time=   1.1s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=5, n_neighbors=17, p=2;, score=-2.433 total time=   0.8s
[CV 2/3] END .leaf_size=5, n_neighbors=17, p=2;, score=-2.409 total time=   0.7s
[CV 3/3] END .leaf_size=5, n_neighbors=17, p=2;, score=-2.374 total time=   0.9s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=100, n_neighbors=34, p=2;, score=-2.408 total time=   1.4s
[CV 2/3] END leaf_size=100, n_neighbors=34, p=2;, score=-2.379 total time=   1.3s
[CV 3/3] END leaf_size=100, n_neighbors=34, p=2;, score=-2.353 total time=   1.4s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=3, n_neighbors=43, p=1;, score=-2.395 total time=   2.0s
[CV 2/3] END .leaf_size=3, n_neighbors=43, p=1;, score=-2.352 total time=   1.8s
[CV 3/3] END .leaf_size=3, n_neighbors=43, p=1;, score=-2.335 total time=   1.9s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=100, n_neighbors=50, p=1;, score=-2.392 total time=   2.4s
[CV 2/3] END leaf_size=100, n_neighbors=50, p=1;, score=-2.348 total time=   1.1s
[CV 3/3] END leaf_size=100, n_neighbors=50, p=1;, score=-2.334 total time=   1.1s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=3, n_neighbors=47, p=1;, score=-2.393 total time=   2.5s
[CV 2/3] END .leaf_size=3, n_neighbors=47, p=1;, score=-2.351 total time=   1.8s
[CV 3/3] END .leaf_size=3, n_neighbors=47, p=1;, score=-2.335 total time=   2.0s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=3, n_neighbors=50, p=1;, score=-2.392 total time=   2.1s
[CV 2/3] END .leaf_size=3, n_neighbors=50, p=1;, score=-2.348 total time=   1.9s
[CV 3/3] END .leaf_size=3, n_neighbors=50, p=1;, score=-2.334 total time=   2.1s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=3, n_neighbors=29, p=1;, score=-2.406 total time=   1.8s
[CV 2/3] END .leaf_size=3, n_neighbors=29, p=1;, score=-2.366 total time=   1.7s
[CV 3/3] END .leaf_size=3, n_neighbors=29, p=1;, score=-2.344 total time=   1.8s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=3, n_neighbors=40, p=1;, score=-2.395 total time=   1.9s
[CV 2/3] END .leaf_size=3, n_neighbors=40, p=1;, score=-2.355 total time=   1.8s
[CV 3/3] END .leaf_size=3, n_neighbors=40, p=1;, score=-2.337 total time=   2.0s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=100, n_neighbors=50, p=1;, score=-2.392 total time=   1.2s
[CV 2/3] END leaf_size=100, n_neighbors=50, p=1;, score=-2.348 total time=   1.1s
[CV 3/3] END leaf_size=100, n_neighbors=50, p=1;, score=-2.334 total time=   1.1s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=3, n_neighbors=50, p=1;, score=-2.392 total time=   2.1s
[CV 2/3] END .leaf_size=3, n_neighbors=50, p=1;, score=-2.348 total time=   1.9s
[CV 3/3] END .leaf_size=3, n_neighbors=50, p=1;, score=-2.334 total time=   2.1s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=98, n_neighbors=50, p=1;, score=-2.392 total time=   1.2s
[CV 2/3] END leaf_size=98, n_neighbors=50, p=1;, score=-2.348 total time=   1.1s
[CV 3/3] END leaf_size=98, n_neighbors=50, p=1;, score=-2.334 total time=   1.1s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=7, n_neighbors=50, p=1;, score=-2.392 total time=   1.4s
[CV 2/3] END .leaf_size=7, n_neighbors=50, p=1;, score=-2.348 total time=   1.2s
[CV 3/3] END .leaf_size=7, n_neighbors=50, p=1;, score=-2.334 total time=   1.3s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=99, n_neighbors=50, p=1;, score=-2.392 total time=   2.5s
[CV 2/3] END leaf_size=99, n_neighbors=50, p=1;, score=-2.348 total time=   1.0s
[CV 3/3] END leaf_size=99, n_neighbors=50, p=1;, score=-2.334 total time=   1.1s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END ..leaf_size=3, n_neighbors=9, p=1;, score=-2.475 total time=   1.3s
[CV 2/3] END ..leaf_size=3, n_neighbors=9, p=1;, score=-2.453 total time=   1.2s
[CV 3/3] END ..leaf_size=3, n_neighbors=9, p=1;, score=-2.419 total time=   1.5s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=5, n_neighbors=50, p=1;, score=-2.392 total time=   1.7s
[CV 2/3] END .leaf_size=5, n_neighbors=50, p=1;, score=-2.348 total time=   1.5s
[CV 3/3] END .leaf_size=5, n_neighbors=50, p=1;, score=-2.334 total time=   1.6s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=100, n_neighbors=24, p=1;, score=-2.414 total time=   1.1s
[CV 2/3] END leaf_size=100, n_neighbors=24, p=1;, score=-2.369 total time=   0.9s
[CV 3/3] END leaf_size=100, n_neighbors=24, p=1;, score=-2.348 total time=   1.1s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=3, n_neighbors=37, p=2;, score=-2.407 total time=   1.3s
[CV 2/3] END .leaf_size=3, n_neighbors=37, p=2;, score=-2.374 total time=   1.1s
[CV 3/3] END .leaf_size=3, n_neighbors=37, p=2;, score=-2.354 total time=   1.2s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=100, n_neighbors=48, p=1;, score=-2.393 total time=   2.4s
[CV 2/3] END leaf_size=100, n_neighbors=48, p=1;, score=-2.350 total time=   2.1s
[CV 3/3] END leaf_size=100, n_neighbors=48, p=1;, score=-2.335 total time=   2.2s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=99, n_neighbors=50, p=1;, score=-2.392 total time=   1.2s
[CV 2/3] END leaf_size=99, n_neighbors=50, p=1;, score=-2.348 total time=   1.0s
[CV 3/3] END leaf_size=99, n_neighbors=50, p=1;, score=-2.334 total time=   0.9s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=6, n_neighbors=50, p=1;, score=-2.392 total time=   1.7s
[CV 2/3] END .leaf_size=6, n_neighbors=50, p=1;, score=-2.348 total time=   1.5s
[CV 3/3] END .leaf_size=6, n_neighbors=50, p=1;, score=-2.334 total time=   1.7s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=97, n_neighbors=50, p=1;, score=-2.392 total time=   1.2s
[CV 2/3] END leaf_size=97, n_neighbors=50, p=1;, score=-2.348 total time=   1.1s
[CV 3/3] END leaf_size=97, n_neighbors=50, p=1;, score=-2.334 total time=   1.1s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END ..leaf_size=4, n_neighbors=7, p=2;, score=-2.508 total time=   0.6s
[CV 2/3] END ..leaf_size=4, n_neighbors=7, p=2;, score=-2.486 total time=   0.5s
[CV 3/3] END ..leaf_size=4, n_neighbors=7, p=2;, score=-2.462 total time=   0.5s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END .leaf_size=4, n_neighbors=50, p=1;, score=-2.392 total time=   0.8s
[CV 2/3] END .leaf_size=4, n_neighbors=50, p=1;, score=-2.348 total time=   0.7s
[CV 3/3] END .leaf_size=4, n_neighbors=50, p=1;, score=-2.334 total time=   1.7s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=99, n_neighbors=50, p=1;, score=-2.392 total time=   2.2s
[CV 2/3] END leaf_size=99, n_neighbors=50, p=1;, score=-2.348 total time=   2.1s
[CV 3/3] END leaf_size=99, n_neighbors=50, p=1;, score=-2.334 total time=   1.1s
Fitting 3 folds for each of 1 candidates, totalling 3 fits
[CV 1/3] END leaf_size=85, n_neighbors=50, p=1;, score=-2.392 total time=   1.1s
[CV 2/3] END leaf_size=85, n_neighbors=50, p=1;, score=-2.348 total time=   0.8s
[CV 3/3] END leaf_size=85, n_neighbors=50, p=1;, score=-2.334 total time=   2.4s
{'mean_fit_time': array([0.01782823, 0.01622971, 0.02002295, 0.02234769, 0.01960429,
       0.01780105, 0.01681972, 0.02231757, 0.01812967, 0.01752257,
       0.02692962, 0.01632071, 0.02383431, 0.02768032, 0.01605066,
       0.02809016, 0.02563326, 0.01557922, 0.01611217, 0.01661968,
       0.01649133, 0.01630441, 0.01651422, 0.02767499, 0.02695529,
       0.02417525, 0.01576598, 0.02765767, 0.01630537, 0.02671957,
       0.02728995, 0.02633238, 0.02631195, 0.0163695 , 0.02689131,
       0.01564312, 0.02175132, 0.01637022, 0.02786144, 0.02422539,
       0.01671354, 0.02747472, 0.01638516, 0.01646066, 0.02547487,
       0.01642529, 0.02402377, 0.02432807, 0.01633485, 0.0164063 ]), 'std_fit_time': array([1.41443503e-03, 4.47825848e-04, 1.87130117e-04, 4.85386071e-04,
       4.48771128e-04, 4.37365784e-04, 2.29039817e-04, 7.66140321e-04,
       1.68208133e-04, 2.35541468e-04, 4.66339955e-04, 5.42074618e-04,
       3.92127385e-04, 6.21863310e-04, 2.24742643e-04, 5.91741476e-04,
       1.61221123e-03, 3.13637987e-04, 2.80930500e-04, 3.43185691e-04,
       5.92704762e-04, 4.75590361e-04, 2.40073211e-04, 8.98867562e-04,
       1.25181056e-03, 2.53274630e-04, 1.40955910e-04, 1.63191744e-03,
       3.86116482e-04, 4.94813278e-04, 5.04759604e-04, 4.30570884e-04,
       3.43694879e-04, 2.55579107e-04, 3.39746299e-04, 8.21129647e-05,
       4.78194385e-04, 2.49918351e-04, 1.12930519e-03, 3.35382850e-04,
       1.43799722e-04, 2.41415055e-04, 3.95747903e-04, 3.73813773e-04,
       1.53768562e-03, 4.72398858e-04, 4.21974259e-04, 4.07535786e-04,
       2.54188746e-04, 4.17739288e-04]), 'mean_score_time': array([0.51843802, 0.87958686, 0.90023398, 0.44302503, 0.68380841,
       0.76259168, 1.06696351, 0.60248748, 0.53294794, 2.38915523,
       0.50988237, 1.40919034, 1.59375064, 1.95405515, 0.5906024 ,
       0.80494293, 0.78143883, 1.82474621, 0.83038799, 1.26082754,
       1.3389159 , 1.92807015, 0.68749301, 1.61607401, 0.91453624,
       0.7715462 , 1.33955503, 1.85977292, 1.50787918, 2.07147678,
       2.00589959, 1.72368495, 1.89319674, 1.11503537, 1.97078633,
       1.10621969, 1.31950402, 1.53812949, 1.3288037 , 1.56980403,
       1.01118231, 1.17094938, 2.21169551, 1.01979375, 1.59756962,
       1.11889267, 0.51506615, 1.0562853 , 1.79070632, 1.43503181]), 'std_score_time': array([0.03055131, 0.05022011, 0.14998391, 0.02491074, 0.03049254,
       0.04786223, 0.03585538, 0.04618414, 0.03642499, 0.07780623,
       0.04782924, 0.67321979, 0.07849717, 0.09089413, 0.05716318,
       0.06325959, 0.23165517, 0.59780018, 0.07113788, 0.55467755,
       0.56674121, 0.56666904, 0.348249  , 0.58720162, 0.29500494,
       0.05176727, 0.06522654, 0.08549749, 0.60359917, 0.27466406,
       0.09120442, 0.07727133, 0.05161908, 0.05934998, 0.10149322,
       0.05068616, 0.07435716, 0.66581583, 0.10507596, 0.06986673,
       0.06933036, 0.07985223, 0.11884167, 0.10991972, 0.08534094,
       0.04454462, 0.04664124, 0.41002803, 0.50963511, 0.66728491]), 'param_leaf_size': masked_array(data=[33, 84, 14, 8, 14, 38, 82, 13, 34, 52, 3, 100, 5, 3,
                   98, 3, 4, 100, 99, 99, 100, 100, 100, 3, 3, 5, 100, 3,
                   100, 3, 3, 3, 3, 100, 3, 98, 7, 99, 3, 5, 100, 3, 100,
                   99, 6, 97, 4, 4, 99, 85],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False],
       fill_value='?',
            dtype=object), 'param_n_neighbors': masked_array(data=[22, 42, 22, 3, 35, 38, 45, 26, 28, 32, 50, 50, 50, 49,
                   39, 50, 15, 36, 27, 19, 50, 50, 11, 50, 45, 17, 34, 43,
                   50, 47, 50, 29, 40, 50, 50, 50, 50, 50, 9, 50, 24, 37,
                   48, 50, 50, 50, 7, 50, 50, 50],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False],
       fill_value='?',
            dtype=object), 'param_p': masked_array(data=[2, 1, 1, 1, 1, 1, 1, 2, 2, 1, 2, 1, 1, 1, 2, 1, 1, 1,
                   1, 1, 1, 1, 2, 1, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                   1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False],
       fill_value='?',
            dtype=object), 'params': [OrderedDict([('leaf_size', 33), ('n_neighbors', 22), ('p', 2)]), OrderedDict([('leaf_size', 84), ('n_neighbors', 42), ('p', 1)]), OrderedDict([('leaf_size', 14), ('n_neighbors', 22), ('p', 1)]), OrderedDict([('leaf_size', 8), ('n_neighbors', 3), ('p', 1)]), OrderedDict([('leaf_size', 14), ('n_neighbors', 35), ('p', 1)]), OrderedDict([('leaf_size', 38), ('n_neighbors', 38), ('p', 1)]), OrderedDict([('leaf_size', 82), ('n_neighbors', 45), ('p', 1)]), OrderedDict([('leaf_size', 13), ('n_neighbors', 26), ('p', 2)]), OrderedDict([('leaf_size', 34), ('n_neighbors', 28), ('p', 2)]), OrderedDict([('leaf_size', 52), ('n_neighbors', 32), ('p', 1)]), OrderedDict([('leaf_size', 3), ('n_neighbors', 50), ('p', 2)]), OrderedDict([('leaf_size', 100), ('n_neighbors', 50), ('p', 1)]), OrderedDict([('leaf_size', 5), ('n_neighbors', 50), ('p', 1)]), OrderedDict([('leaf_size', 3), ('n_neighbors', 49), ('p', 1)]), OrderedDict([('leaf_size', 98), ('n_neighbors', 39), ('p', 2)]), OrderedDict([('leaf_size', 3), ('n_neighbors', 50), ('p', 1)]), OrderedDict([('leaf_size', 4), ('n_neighbors', 15), ('p', 1)]), OrderedDict([('leaf_size', 100), ('n_neighbors', 36), ('p', 1)]), OrderedDict([('leaf_size', 99), ('n_neighbors', 27), ('p', 1)]), OrderedDict([('leaf_size', 99), ('n_neighbors', 19), ('p', 1)]), OrderedDict([('leaf_size', 100), ('n_neighbors', 50), ('p', 1)]), OrderedDict([('leaf_size', 100), ('n_neighbors', 50), ('p', 1)]), OrderedDict([('leaf_size', 100), ('n_neighbors', 11), ('p', 2)]), OrderedDict([('leaf_size', 3), ('n_neighbors', 50), ('p', 1)]), OrderedDict([('leaf_size', 3), ('n_neighbors', 45), ('p', 2)]), OrderedDict([('leaf_size', 5), ('n_neighbors', 17), ('p', 2)]), OrderedDict([('leaf_size', 100), ('n_neighbors', 34), ('p', 2)]), OrderedDict([('leaf_size', 3), ('n_neighbors', 43), ('p', 1)]), OrderedDict([('leaf_size', 100), ('n_neighbors', 50), ('p', 1)]), OrderedDict([('leaf_size', 3), ('n_neighbors', 47), ('p', 1)]), OrderedDict([('leaf_size', 3), ('n_neighbors', 50), ('p', 1)]), OrderedDict([('leaf_size', 3), ('n_neighbors', 29), ('p', 1)]), OrderedDict([('leaf_size', 3), ('n_neighbors', 40), ('p', 1)]), OrderedDict([('leaf_size', 100), ('n_neighbors', 50), ('p', 1)]), OrderedDict([('leaf_size', 3), ('n_neighbors', 50), ('p', 1)]), OrderedDict([('leaf_size', 98), ('n_neighbors', 50), ('p', 1)]), OrderedDict([('leaf_size', 7), ('n_neighbors', 50), ('p', 1)]), OrderedDict([('leaf_size', 99), ('n_neighbors', 50), ('p', 1)]), OrderedDict([('leaf_size', 3), ('n_neighbors', 9), ('p', 1)]), OrderedDict([('leaf_size', 5), ('n_neighbors', 50), ('p', 1)]), OrderedDict([('leaf_size', 100), ('n_neighbors', 24), ('p', 1)]), OrderedDict([('leaf_size', 3), ('n_neighbors', 37), ('p', 2)]), OrderedDict([('leaf_size', 100), ('n_neighbors', 48), ('p', 1)]), OrderedDict([('leaf_size', 99), ('n_neighbors', 50), ('p', 1)]), OrderedDict([('leaf_size', 6), ('n_neighbors', 50), ('p', 1)]), OrderedDict([('leaf_size', 97), ('n_neighbors', 50), ('p', 1)]), OrderedDict([('leaf_size', 4), ('n_neighbors', 7), ('p', 2)]), OrderedDict([('leaf_size', 4), ('n_neighbors', 50), ('p', 1)]), OrderedDict([('leaf_size', 99), ('n_neighbors', 50), ('p', 1)]), OrderedDict([('leaf_size', 85), ('n_neighbors', 50), ('p', 1)])], 'split0_test_score': array([-2.42501958, -2.39567838, -2.41480406, -2.66800398, -2.39911378,
       -2.39657634, -2.39446567, -2.41728187, -2.41376834, -2.40306222,
       -2.40528337, -2.39206363, -2.39206363, -2.39310916, -2.40739515,
       -2.39206363, -2.43734855, -2.39853036, -2.40818901, -2.41803744,
       -2.39206363, -2.39206363, -2.4651593 , -2.39206363, -2.40441724,
       -2.43292917, -2.40830826, -2.39509126, -2.39206363, -2.393433  ,
       -2.39206363, -2.40560245, -2.39543131, -2.39206363, -2.39206363,
       -2.39206363, -2.39206363, -2.39206363, -2.47491686, -2.39206363,
       -2.41361814, -2.40706248, -2.39305077, -2.39206363, -2.39206363,
       -2.39206363, -2.50804638, -2.39206363, -2.39206363, -2.39206363]), 'split1_test_score': array([-2.39048399, -2.35248734, -2.37116519, -2.64709398, -2.35567324,
       -2.35507976, -2.35197703, -2.38570472, -2.38434531, -2.36298966,
       -2.36646857, -2.34839093, -2.34839093, -2.34878896, -2.37363133,
       -2.34839093, -2.3977814 , -2.35467602, -2.36695726, -2.38292559,
       -2.34839093, -2.34839093, -2.44340183, -2.34839093, -2.36871401,
       -2.40936734, -2.37906175, -2.35246022, -2.34839093, -2.35113091,
       -2.34839093, -2.36643663, -2.35499633, -2.34839093, -2.34839093,
       -2.34839093, -2.34839093, -2.34839093, -2.45312626, -2.34839093,
       -2.36945877, -2.37415131, -2.35043001, -2.34839093, -2.34839093,
       -2.34839093, -2.48640202, -2.34839093, -2.34839093, -2.34839093]), 'split2_test_score': array([-2.3697497 , -2.33540044, -2.35438402, -2.62773179, -2.33811387,
       -2.33508749, -2.3357196 , -2.36301632, -2.35810992, -2.34228854,
       -2.35299031, -2.3342073 , -2.3342073 , -2.33540625, -2.35487128,
       -2.3342073 , -2.37839708, -2.33727458, -2.3469665 , -2.36109842,
       -2.3342073 , -2.3342073 , -2.42075673, -2.3342073 , -2.35437361,
       -2.37425099, -2.35286424, -2.33480055, -2.3342073 , -2.33517759,
       -2.3342073 , -2.34436072, -2.33675306, -2.3342073 , -2.3342073 ,
       -2.3342073 , -2.3342073 , -2.3342073 , -2.41862892, -2.3342073 ,
       -2.34778447, -2.35394036, -2.33467417, -2.3342073 , -2.3342073 ,
       -2.3342073 , -2.46230325, -2.3342073 , -2.3342073 , -2.3342073 ]), 'mean_test_score': array([-2.39508442, -2.36118872, -2.38011776, -2.64760992, -2.3643003 ,
       -2.36224786, -2.36072076, -2.38866764, -2.38540786, -2.36944681,
       -2.37491408, -2.35822062, -2.35822062, -2.35910145, -2.37863259,
       -2.35822062, -2.40450901, -2.36349365, -2.37403759, -2.38735382,
       -2.35822062, -2.35822062, -2.44310595, -2.35822062, -2.37583496,
       -2.40551583, -2.38007808, -2.36078401, -2.35822062, -2.35991383,
       -2.35822062, -2.37213326, -2.36239357, -2.35822062, -2.35822062,
       -2.35822062, -2.35822062, -2.35822062, -2.44889068, -2.35822062,
       -2.37695379, -2.37838472, -2.35938498, -2.35822062, -2.35822062,
       -2.35822062, -2.48558388, -2.35822062, -2.35822062, -2.35822062]), 'std_test_score': array([0.02279712, 0.0253659 , 0.02546575, 0.0164451 , 0.02563938,
       0.02560932, 0.02476712, 0.02225266, 0.02273488, 0.02522738,
       0.02216809, 0.02462121, 0.02462121, 0.02465991, 0.02173244,
       0.02462121, 0.02453249, 0.02577312, 0.02549048, 0.02345521,
       0.02462121, 0.02462121, 0.01812848, 0.02462121, 0.02104158,
       0.02410958, 0.02264633, 0.02530753, 0.02462121, 0.02458018,
       0.02462121, 0.02532425, 0.0245197 , 0.02462121, 0.02462121,
       0.02462121, 0.02462121, 0.02462121, 0.02317381, 0.02462121,
       0.02739403, 0.02189264, 0.02465902, 0.02462121, 0.02462121,
       0.02462121, 0.01868352, 0.02462121, 0.02462121, 0.02462121]), 'rank_test_score': array([44, 26, 40, 50, 30, 27, 24, 43, 41, 31, 34,  1,  1, 21, 38,  1, 45,
       29, 33, 42,  1,  1, 47,  1, 35, 46, 39, 25,  1, 23,  1, 32, 28,  1,
        1,  1,  1,  1, 48,  1, 36, 37, 22,  1,  1,  1, 49,  1,  1,  1],
      dtype=int32)}
-2.3582206191725037
OrderedDict([('leaf_size', 100), ('n_neighbors', 50), ('p', 1)])
